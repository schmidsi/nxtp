{
  "address": "0x801F5323d730d5b26D512b7c938F28b9A992CF96",
  "abi": [
    {
      "inputs": [],
      "name": "AssetLogic__handleIncomingAsset_ethWithErcTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__handleIncomingAsset_notAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__transferAssetFromContract_notNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__addAssetId_alreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__addRelayer_alreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__bumpTransfer_invalidTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__bumpTransfer_valueIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__execute_alreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__execute_invalidRouterSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__execute_maxRoutersExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__execute_notSupportedRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__execute_unapprovedRelayer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "name": "ConnextLogic__initiateClaim_notRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__reconcile_alreadyReconciled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__reconcile_invalidAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__removeAssetId_notAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__removeLiquidity_amountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__removeLiquidity_insufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__removeLiquidity_recipientEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__removeRelayer_notApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__xcall_emptyTo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__xcall_notSupportedAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__xcall_relayerFeeIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextLogic__xcall_wrongDomain",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adoptedAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "supportedAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "transferIds",
          "type": "bytes32[]"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IConnextHandler.CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "local",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "routers",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "routerSignatures",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IConnextHandler.ExecuteArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transactingAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "transferIds",
          "type": "bytes32[]"
        }
      ],
      "name": "InitiatedClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRoutersPerTransfer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MaxRoutersPerTransferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "origin",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "routers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Reconciled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RelayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RelayerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "StableSwapAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransferRelayerFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IConnextHandler.CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "transactingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relayerFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IConnextHandler.XCallArgs",
          "name": "xcallArgs",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "transactingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bridgedAmt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bridged",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ConnextLogic.XCalledEventArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "XCalled",
      "type": "event"
    }
  ],
  "transactionHash": "0x4edc7eaf9a9e488be8d9e6e02a3a4089a707491bd74594e0f2d4cc4d70719aee",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0x801F5323d730d5b26D512b7c938F28b9A992CF96",
    "transactionIndex": 4,
    "gasUsed": "4270327",
    "logsBloom": "0x
    "blockHash": "0x26c98df001394783f7ec61c827cfd552482c19d7d3e336e0bdaf780883c74c16",
    "transactionHash": "0x4edc7eaf9a9e488be8d9e6e02a3a4089a707491bd74594e0f2d4cc4d70719aee",
    "logs": [],
    "blockNumber": 31270364,
    "cumulativeGasUsed": "5426765",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a533283e505337f2151e2443d6fef62f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AssetLogic__handleIncomingAsset_ethWithErcTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__handleIncomingAsset_notAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__transferAssetFromContract_notNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__addAssetId_alreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__addRelayer_alreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__bumpTransfer_invalidTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__bumpTransfer_valueIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__execute_alreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__execute_invalidRouterSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__execute_maxRoutersExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__execute_notSupportedRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__execute_unapprovedRelayer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"ConnextLogic__initiateClaim_notRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__reconcile_alreadyReconciled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__reconcile_invalidAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__removeAssetId_notAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__removeLiquidity_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__removeLiquidity_insufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__removeLiquidity_recipientEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__removeRelayer_notApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__xcall_emptyTo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__xcall_notSupportedAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__xcall_relayerFeeIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextLogic__xcall_wrongDomain\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adoptedAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"supportedAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"transferIds\",\"type\":\"bytes32[]\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"internalType\":\"struct IConnextHandler.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"routerSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IConnextHandler.ExecuteArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"transferIds\",\"type\":\"bytes32[]\"}],\"name\":\"InitiatedClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRoutersPerTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MaxRoutersPerTransferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Reconciled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"StableSwapAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransferRelayerFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"internalType\":\"struct IConnextHandler.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IConnextHandler.XCallArgs\",\"name\":\"xcallArgs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridged\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ConnextLogic.XCalledEventArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"XCalled\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"AssetAdded(bytes32,uint32,address,address,address)\":{\"params\":{\"adoptedAsset\":\"- The address of the adopted (user-expected) asset\",\"caller\":\"- The account that called the function\",\"canonicalId\":\"- The canonical identifier of the token the local <> adopted AMM is for\",\"domain\":\"- The domain of the canonical token for the local <> adopted amm\",\"supportedAsset\":\"- The address of the whitelisted asset. If the native asset is to be whitelisted, the address of the wrapped version will be stored\"}},\"AssetRemoved(bytes32,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"canonicalId\":\"- The canonical identifier of the token removed\"}},\"Claimed(address,uint256,bytes32[])\":{\"params\":{\"recipient\":\"- Address on origin chain to send claimed funds to\",\"total\":\"- Total amount claimed\",\"transferIds\":\"- TransferIds to claim\"}},\"Executed(bytes32,address,((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address),address,uint256,address)\":{\"details\":\"`execute` may be called when providing fast liquidity *or* when processing a reconciled transfer\",\"params\":{\"args\":\"- The ExecuteArgs provided to the function\",\"caller\":\"- The account that called the function\",\"to\":\"- The CallParams.to provided, created as indexed parameter\",\"transactingAmount\":\"- The amount of transferring asset the to address receives or the external call is executed with\",\"transactingAsset\":\"- The asset the to gets or the external call is executed with. Should be the adopted asset on that chain.\",\"transferId\":\"- The unique identifier of the crosschain transfer\"}},\"InitiatedClaim(uint32,address,address,bytes32[])\":{\"params\":{\"caller\":\"- The account that called the function\",\"domain\":\"- Domain to claim funds on\",\"recipient\":\"- Address on origin chain to send claimed funds to\",\"transferIds\":\"- TransferIds to claim\"}},\"LiquidityAdded(address,address,bytes32,uint256,address)\":{\"params\":{\"amount\":\"- The amount of liquidity added\",\"caller\":\"- The account that called the function\",\"local\":\"- The address of the token added (all liquidity held in local asset)\",\"router\":\"- The address of the router the funds were credited to\"}},\"LiquidityRemoved(address,address,address,uint256,address)\":{\"params\":{\"amount\":\"- The amount of liquidity withdrawn\",\"caller\":\"- The account that called the function\",\"local\":\"- The address of the token withdrawn\",\"router\":\"- The router you are removing liquidity from\",\"to\":\"- The address the funds were withdrawn to\"}},\"MaxRoutersPerTransferUpdated(uint256,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"maxRoutersPerTransfer\":\"- The maxRoutersPerTransfer new value\"}},\"Reconciled(bytes32,uint32,address[],address,uint256,address)\":{\"params\":{\"amount\":\"- The amount that was provided by the bridge\",\"asset\":\"- The asset that was provided by the bridge\",\"caller\":\"- The account that called the function\",\"origin\":\"- The origin domain of the transfer\",\"routers\":\"- The CallParams.recipient provided, created as indexed parameter\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"RelayerAdded(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"relayer\":\"- The relayer address to be added or removed\"}},\"RelayerRemoved(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"relayer\":\"- The relayer address to be added or removed\"}},\"StableSwapAdded(bytes32,uint32,address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"canonicalId\":\"- The canonical identifier of the token the local <> adopted AMM is for\",\"domain\":\"- The domain of the canonical token for the local <> adopted amm\",\"swapPool\":\"- The address of the AMM\"}},\"TransferRelayerFeesUpdated(bytes32,uint256,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"relayerFee\":\"- The updated amount of relayer fee in native asset\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}}},\"kind\":\"dev\",\"methods\":{\"addAssetId(ConnextMessage.TokenId,address,address,mapping(bytes32 => bool) storage,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => address) storage)\":{\"params\":{\"_adoptedAssetId\":\"- The used asset id for this domain (i.e. PoS USDC for polygon)\",\"_canonical\":\"- The canonical TokenId to add (domain and id)\"}},\"addLiquidityForRouter(uint256,address,address,mapping(address => mapping(address => uint256)) storage,bytes32,IWrapped)\":{\"details\":\"The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.\",\"params\":{\"_amount\":\"- The amount of liquidity to add for the router\",\"_canonicalId\":\"- Canonical asset id from the representation\",\"_local\":\"- The address of the nomad representation of the asset\",\"_router\":\"- The router you are adding liquidity on behalf of\"}},\"addRelayer(address,mapping(address => bool) storage)\":{\"params\":{\"_relayer\":\"- The relayer address to add\"}},\"addStableSwapPool(ConnextMessage.TokenId,address,mapping(bytes32 => IStableSwap) storage)\":{\"params\":{\"_canonical\":\"- The canonical TokenId to add (domain and id)\",\"_stableSwap\":\"- The address of the amm to add\"}},\"bumpTransfer(bytes32,mapping(bytes32 => uint256) storage)\":{\"params\":{\"_transferId\":\"- The unique identifier of the crosschain transaction\"}},\"claim(address,bytes32[],mapping(bytes32 => uint256) storage)\":{\"details\":\"Called by the RelayerFeeRouter.handle message. The validity of the transferIds is asserted before dispatching the message.\",\"params\":{\"_recipient\":\"- address on origin chain to send claimed funds to\",\"_relayerFees\":\"- Mapping of transactionIds to fee\",\"_transferIds\":\"- transferIds to claim\"}},\"execute(ConnextLogic.ExecuteLibArgs,mapping(bytes32 => address[]) storage,mapping(bytes32 => bool) storage,mapping(address => mapping(address => uint256)) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => address) storage,RouterPermissionsManagerInfo storage,mapping(bytes32 => address) storage)\":{\"details\":\"Can be called prior to or after `handle`, depending if fast liquidity is being used.\"},\"initiateClaim(uint32,address,bytes32[],RelayerFeeRouter,mapping(bytes32 => address) storage)\":{\"details\":\"Domain should be the origin domain of all the transfer ids\",\"params\":{\"_domain\":\"- domain to claim funds on\",\"_recipient\":\"- address on origin chain to send claimed funds to\",\"_relayerFeeRouter\":\"- The local nomad relayer fee router\",\"_transferIds\":\"- transferIds to claim\",\"_transferRelayer\":\"- Mapping of transactionIds to relayer\"}},\"reconcile(uint32,bytes,mapping(bytes32 => bool) storage,ITokenRegistry,mapping(bytes32 => address[]) storage,mapping(address => mapping(address => uint256)) storage)\":{\"details\":\"Will either (a) credit router or (b) make funds available for execution. Don't include execution here\"},\"removeAssetId(bytes32,address,address,mapping(bytes32 => bool) storage,mapping(bytes32 => IStableSwap) storage,mapping(address => ConnextMessage.TokenId) storage)\":{\"params\":{\"_adoptedAssetId\":\"- Corresponding adopted asset to remove\",\"_canonicalId\":\"- Token id to remove\"}},\"removeLiquidity(uint256,address,address,mapping(address => mapping(address => uint256)) storage,IWrapped)\":{\"params\":{\"_amount\":\"- The amount of liquidity to remove for the router\",\"_local\":\"- The address of the asset you're removing liquidity from. If removing liquidity of the native asset, routers may use `address(0)` or the wrapped asset\",\"_recipient\":\"The address that will receive the liquidity being removed\"}},\"removeRelayer(address,mapping(address => bool) storage)\":{\"params\":{\"_relayer\":\"- The relayer address to remove\"}},\"setMaxRoutersPerTransfer(uint256,uint256)\":{\"params\":{\"_newMax\":\"The new max amount of routers\"}},\"xcall(ConnextLogic.XCallLibArgs,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => uint256) storage)\":{\"params\":{\"_adoptedToCanonical\":\"- Mapping of canonical to adopted assets on this domain\",\"_adoptedToLocalPools\":\"- Mapping holding the AMMs for swapping in and out of local assets\",\"_args\":\"- The XCallArgs\",\"_relayerFees\":\"- Mapping of relayer fee for a transfer\"},\"returns\":{\"_0\":\"The transfer id of the crosschain transfer\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(bytes32,uint32,address,address,address)\":{\"notice\":\"Emitted when a new asset is added\"},\"AssetRemoved(bytes32,address)\":{\"notice\":\"Emitted when an asset is removed from whitelists\"},\"Claimed(address,uint256,bytes32[])\":{\"notice\":\"Emitted when `claim` is called on the origin domain\"},\"Executed(bytes32,address,((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address),address,uint256,address)\":{\"notice\":\"Emitted when `execute` is called on the destination chain\"},\"InitiatedClaim(uint32,address,address,bytes32[])\":{\"notice\":\"Emitted when `initiateClaim` is called on the destination chain\"},\"LiquidityAdded(address,address,bytes32,uint256,address)\":{\"notice\":\"Emitted when a router adds liquidity to the contract\"},\"LiquidityRemoved(address,address,address,uint256,address)\":{\"notice\":\"Emitted when a router withdraws liquidity from the contract\"},\"MaxRoutersPerTransferUpdated(uint256,address)\":{\"notice\":\"Emitted when the maxRoutersPerTransfer variable is updated\"},\"Reconciled(bytes32,uint32,address[],address,uint256,address)\":{\"notice\":\"Emitted when `reconciled` is called by the bridge on the destination domain\"},\"RelayerAdded(address,address)\":{\"notice\":\"Emitted when a rlayer is added or removed from whitelists\"},\"RelayerRemoved(address,address)\":{\"notice\":\"Emitted when a rlayer is added or removed from whitelists\"},\"StableSwapAdded(bytes32,uint32,address,address)\":{\"notice\":\"Emitted when a new stable-swap AMM is added for the local <> adopted token\"},\"TransferRelayerFeesUpdated(bytes32,uint256,address)\":{\"notice\":\"Emitted when `bumpTransfer` is called by an user on the origin domain\"},\"XCalled(bytes32,((address,bytes,uint32,uint32),address,uint256,uint256),(address,uint256,uint256,address),uint256,bytes,address)\":{\"notice\":\"Emitted when `xcall` is called on the origin domain\"}},\"kind\":\"user\",\"methods\":{\"addAssetId(ConnextMessage.TokenId,address,address,mapping(bytes32 => bool) storage,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => address) storage)\":{\"notice\":\"Used to add assets on same chain as contract that can be transferred.\"},\"addLiquidityForRouter(uint256,address,address,mapping(address => mapping(address => uint256)) storage,bytes32,IWrapped)\":{\"notice\":\"Contains the logic to verify + increment a given routers liquidity\"},\"addRelayer(address,mapping(address => bool) storage)\":{\"notice\":\"Used to add approved relayer\"},\"addStableSwapPool(ConnextMessage.TokenId,address,mapping(bytes32 => IStableSwap) storage)\":{\"notice\":\"Used to add an AMM for adopted <> local assets\"},\"bumpTransfer(bytes32,mapping(bytes32 => uint256) storage)\":{\"notice\":\"Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\"},\"claim(address,bytes32[],mapping(bytes32 => uint256) storage)\":{\"notice\":\"Pays out a relayer for the given fees\"},\"execute(ConnextLogic.ExecuteLibArgs,mapping(bytes32 => address[]) storage,mapping(bytes32 => bool) storage,mapping(address => mapping(address => uint256)) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => address) storage,RouterPermissionsManagerInfo storage,mapping(bytes32 => address) storage)\":{\"notice\":\"Called on the destination domain to disburse correct assets to end recipient and execute any included calldata\"},\"initiateClaim(uint32,address,bytes32[],RelayerFeeRouter,mapping(bytes32 => address) storage)\":{\"notice\":\"Called by relayer when they want to claim owed funds on a given domain\"},\"reconcile(uint32,bytes,mapping(bytes32 => bool) storage,ITokenRegistry,mapping(bytes32 => address[]) storage,mapping(address => mapping(address => uint256)) storage)\":{\"notice\":\"Called via `handle` to manage funds associated with a transaction\"},\"removeAssetId(bytes32,address,address,mapping(bytes32 => bool) storage,mapping(bytes32 => IStableSwap) storage,mapping(address => ConnextMessage.TokenId) storage)\":{\"notice\":\"Used to remove assets from the whitelist\"},\"removeLiquidity(uint256,address,address,mapping(address => mapping(address => uint256)) storage,IWrapped)\":{\"notice\":\"This is used by any router to decrease their available liquidity for a given asset.\"},\"removeRelayer(address,mapping(address => bool) storage)\":{\"notice\":\"Used to remove approved relayer\"},\"setMaxRoutersPerTransfer(uint256,uint256)\":{\"notice\":\"Used to set the max amount of routers a payment can be routed through\"},\"xcall(ConnextLogic.XCallLibArgs,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => uint256) storage)\":{\"notice\":\"This function is called ConnextHandler when a user who is looking to bridge funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Connext/ConnextLogic.sol\":\"ConnextLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/ProposedOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnableUpgradeable is Initializable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnableUpgradeable__onlyOwner_notOwner();\\n  error ProposedOwnableUpgradeable__onlyProposed_notProposedOwner();\\n  error ProposedOwnableUpgradeable__proposeRouterOwnershipRenunciation_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceRouterOwnership_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceRouterOwnership_noProposal();\\n  error ProposedOwnableUpgradeable__renounceRouterOwnership_delayNotElapsed();\\n  error ProposedOwnableUpgradeable__proposeAssetOwnershipRenunciation_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceAssetOwnership_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceAssetOwnership_noProposal();\\n  error ProposedOwnableUpgradeable__renounceAssetOwnership_delayNotElapsed();\\n  error ProposedOwnableUpgradeable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnableUpgradeable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceOwnership_noProposal();\\n  error ProposedOwnableUpgradeable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnableUpgradeable__renounceOwnership_invalidProposal();\\n  error ProposedOwnableUpgradeable__acceptProposedOwner_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  bool private _routerOwnershipRenounced;\\n  uint256 private _routerOwnershipTimestamp;\\n\\n  bool private _assetOwnershipRenounced;\\n  uint256 private _assetOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  event RouterOwnershipRenunciationProposed(uint256 timestamp);\\n\\n  event RouterOwnershipRenounced(bool renounced);\\n\\n  event AssetOwnershipRenunciationProposed(uint256 timestamp);\\n\\n  event AssetOwnershipRenounced(bool renounced);\\n\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the timestamp when router ownership was last proposed to be renounced\\n   */\\n  function routerOwnershipTimestamp() public view virtual returns (uint256) {\\n    return _routerOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the timestamp when asset ownership was last proposed to be renounced\\n   */\\n  function assetOwnershipTimestamp() public view virtual returns (uint256) {\\n    return _assetOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnableUpgradeable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnableUpgradeable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the router whitelist has\\n   * been renounced\\n   */\\n  function isRouterOwnershipRenounced() public view returns (bool) {\\n    return _owner == address(0) || _routerOwnershipRenounced;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the router whitelist has\\n   * been renounced\\n   */\\n  function proposeRouterOwnershipRenunciation() public virtual onlyOwner {\\n    // Use contract as source of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_routerOwnershipRenounced)\\n      revert ProposedOwnableUpgradeable__proposeRouterOwnershipRenunciation_noOwnershipChange();\\n\\n    // Begin delay, emit event\\n    _setRouterOwnershipTimestamp();\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function renounceRouterOwnership() public virtual onlyOwner {\\n    // Contract as sournce of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_routerOwnershipRenounced) revert ProposedOwnableUpgradeable__renounceRouterOwnership_noOwnershipChange();\\n\\n    // Ensure there has been a proposal cycle started\\n    if (_routerOwnershipTimestamp == 0) revert ProposedOwnableUpgradeable__renounceRouterOwnership_noProposal();\\n\\n    // Delay has elapsed\\n    if ((block.timestamp - _routerOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__renounceRouterOwnership_delayNotElapsed();\\n\\n    // Set renounced, emit event, reset timestamp to 0\\n    _setRouterOwnership(true);\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function isAssetOwnershipRenounced() public view returns (bool) {\\n    return _owner == address(0) || _assetOwnershipRenounced;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function proposeAssetOwnershipRenunciation() public virtual onlyOwner {\\n    // Contract as sournce of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_assetOwnershipRenounced)\\n      revert ProposedOwnableUpgradeable__proposeAssetOwnershipRenunciation_noOwnershipChange();\\n\\n    // Start cycle, emit event\\n    _setAssetOwnershipTimestamp();\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function renounceAssetOwnership() public virtual onlyOwner {\\n    // Contract as sournce of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_assetOwnershipRenounced) revert ProposedOwnableUpgradeable__renounceAssetOwnership_noOwnershipChange();\\n\\n    // Ensure there has been a proposal cycle started\\n    if (_assetOwnershipTimestamp == 0) revert ProposedOwnableUpgradeable__renounceAssetOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _assetOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__renounceAssetOwnership_delayNotElapsed();\\n\\n    // Set ownership, reset timestamp, emit event\\n    _setAssetOwnership(true);\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnableUpgradeable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnableUpgradeable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnableUpgradeable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnableUpgradeable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // Contract as source of truth\\n    if (_owner == _proposed) revert ProposedOwnableUpgradeable__acceptProposedOwner_noOwnershipChange();\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  ////// INTERNAL //////\\n\\n  function _setRouterOwnershipTimestamp() private {\\n    _routerOwnershipTimestamp = block.timestamp;\\n    emit RouterOwnershipRenunciationProposed(_routerOwnershipTimestamp);\\n  }\\n\\n  function _setRouterOwnership(bool value) private {\\n    _routerOwnershipRenounced = value;\\n    _routerOwnershipTimestamp = 0;\\n    emit RouterOwnershipRenounced(value);\\n  }\\n\\n  function _setAssetOwnershipTimestamp() private {\\n    _assetOwnershipTimestamp = block.timestamp;\\n    emit AssetOwnershipRenunciationProposed(_assetOwnershipTimestamp);\\n  }\\n\\n  function _setAssetOwnership(bool value) private {\\n    _assetOwnershipRenounced = value;\\n    _assetOwnershipTimestamp = 0;\\n    emit AssetOwnershipRenounced(value);\\n  }\\n\\n  function _setOwner(address newOwner) private {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(_proposed);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x679e1a3bdc7dea956dfe0115277440407ca84d4e912330d3434014250d0406fd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IConnextHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.11;\\n\\nimport \\\"../nomad-xapps/contracts/connext/ConnextMessage.sol\\\";\\n\\ninterface IConnextHandler {\\n  // ============= Structs =============\\n\\n  /**\\n   * @notice These are the call parameters that will remain constant between the\\n   * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n   * @property to - The account that receives funds, in the event of a crosschain call,\\n   * will receive funds if the call fails.\\n   * @param to - The address you are sending funds (and potentially data) to\\n   * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n   * @param originDomain - The originating domain (i.e. where `xcall` is called). Must match nomad domain schema\\n   * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called). Must match nomad domain schema\\n   */\\n  struct CallParams {\\n    address to;\\n    bytes callData;\\n    uint32 originDomain;\\n    uint32 destinationDomain;\\n  }\\n\\n  /**\\n   * @notice The arguments you supply to the `xcall` function called by user on origin domain\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\n   * @param transactingAssetId - The asset the caller sent with the transfer. Can be the adopted, canonical,\\n   * or the representational asset\\n   * @param amount - The amount of transferring asset the tx called xcall with\\n   * @param relayerFee - The amount of relayer fee the tx called xcall with\\n   */\\n  struct XCallArgs {\\n    CallParams params;\\n    address transactingAssetId; // Could be adopted, local, or wrapped\\n    uint256 amount;\\n    uint256 relayerFee;\\n  }\\n\\n  /**\\n   * @notice\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\n   * @param local - The local asset for the transfer, will be swapped to the adopted asset if\\n   * appropriate\\n   * @param routers - The routers who you are sending the funds on behalf of\\n   * @param amount - The amount of liquidity the router provided or the bridge forwarded, depending on\\n   * if fast liquidity was used\\n   * @param nonce - The nonce used to generate transfer id\\n   * @param originSender - The msg.sender of the xcall on origin domain\\n   */\\n  struct ExecuteArgs {\\n    CallParams params;\\n    address local; // local representation of canonical token\\n    address[] routers;\\n    bytes[] routerSignatures;\\n    uint256 amount;\\n    uint256 nonce;\\n    address originSender;\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  function initialize(\\n    uint256 _domain,\\n    address _xAppConnectionManager,\\n    address _tokenRegistry, // Nomad token registry\\n    address _wrappedNative,\\n    address _relayerFeeRouter\\n  ) external;\\n\\n  function setupRouter(\\n    address router,\\n    address owner,\\n    address recipient\\n  ) external;\\n\\n  function removeRouter(address router) external;\\n\\n  function addStableSwapPool(ConnextMessage.TokenId calldata canonical, address stableSwapPool) external;\\n\\n  function setupAsset(\\n    ConnextMessage.TokenId calldata canonical,\\n    address adoptedAssetId,\\n    address stableSwapPool\\n  ) external;\\n\\n  function removeAssetId(bytes32 canonicalId, address adoptedAssetId) external;\\n\\n  function setMaxRoutersPerTransfer(uint256 newMaxRouters) external;\\n\\n  function addRelayer(address relayer) external;\\n\\n  function removeRelayer(address relayer) external;\\n\\n  // ============ Public Functions ===========\\n\\n  function addLiquidityFor(\\n    uint256 amount,\\n    address local,\\n    address router\\n  ) external payable;\\n\\n  function addLiquidity(uint256 amount, address local) external payable;\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address local,\\n    address payable to\\n  ) external;\\n\\n  function xcall(XCallArgs calldata _args) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32);\\n\\n  function initiateClaim(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds\\n  ) external;\\n\\n  function claim(address _recipient, bytes32[] calldata _transferIds) external;\\n}\\n\",\"keccak256\":\"0x26fb107635decfaf51bfd16adcbada02ac603a90b3d0112a4c5c6fac56dc0018\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\ninterface IExecutor {\\n  event Executed(\\n    bytes32 indexed transferId,\\n    address indexed to,\\n    address assetId,\\n    uint256 amount,\\n    bytes _properties,\\n    bytes callData,\\n    bytes returnData,\\n    bool success\\n  );\\n\\n  function getConnext() external returns (address);\\n\\n  function originSender() external returns (address);\\n\\n  function origin() external returns (uint32);\\n\\n  function execute(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address payable _to,\\n    address _assetId,\\n    bytes memory _properties,\\n    bytes calldata _callData\\n  ) external payable returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0xca0a6e8f6d278467d12388b40963cca30ca3f598e40b5c8bd515fb7cd7211cd3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwap {\\n  /*** EVENTS ***/\\n\\n  // events replicated from SwapUtils to make the ABI easier for dumb\\n  // clients\\n  event TokenSwap(address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId);\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n  event NewWithdrawFee(uint256 newWithdrawFee);\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  function swapExact(\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut\\n  ) external payable returns (uint256);\\n\\n  function getA() external view returns (uint256);\\n\\n  function getToken(uint8 index) external view returns (IERC20);\\n\\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n  function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n    external\\n    view\\n    returns (uint256 availableTokenAmount);\\n\\n  // state modifying functions\\n  function initialize(\\n    IERC20[] memory pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 a,\\n    uint256 fee,\\n    uint256 adminFee,\\n    address lpTokenTargetAddress\\n  ) external;\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaf4774b94acb5fec49e836c647d49162503b86ad0d4f2be10b6f51aa30bb49f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n// TODO: need a correct interface here\\ninterface IWrapped {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd7d1bcdf3c4f5674b9c42e5a0edfd3e44ae7b361ca7d20a98bb6c4bba83c71cc\",\"license\":\"UNLICENSED\"},\"contracts/lib/Connext/AssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IWrapped} from \\\"../../interfaces/IWrapped.sol\\\";\\nimport {IStableSwap} from \\\"../../interfaces/IStableSwap.sol\\\";\\nimport {ConnextMessage} from \\\"../../nomad-xapps/contracts/connext/ConnextMessage.sol\\\";\\nimport {ITokenRegistry} from \\\"../../nomad-xapps/interfaces/bridge/ITokenRegistry.sol\\\";\\n\\nimport {SafeERC20Upgradeable, IERC20Upgradeable, AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary AssetLogic {\\n  error AssetLogic__handleIncomingAsset_notAmount();\\n  error AssetLogic__handleIncomingAsset_ethWithErcTransfer();\\n  error AssetLogic__transferAssetFromContract_notNative();\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev If using the native asset, will automatically wrap\\n   * @param _assetId - The address to transfer\\n   * @param _assetAmount - The specified amount to transfer. May not be the\\n   * actual amount transferred (i.e. fee on transfer tokens)\\n   * @param _fee - The fee amount in native asset included as part of the transaction that\\n   * should not be considered for the transfer amount.\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   * @return The assetId of the transferred asset\\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\\n   * if the token is a fee-on-transfer token)\\n   */\\n  function handleIncomingAsset(\\n    address _assetId,\\n    uint256 _assetAmount,\\n    uint256 _fee,\\n    IWrapped _wrapper\\n  ) internal returns (address, uint256) {\\n    uint256 trueAmount = _assetAmount;\\n\\n    if (_assetId == address(0)) {\\n      if (msg.value != _assetAmount + _fee) revert AssetLogic__handleIncomingAsset_notAmount();\\n\\n      // When transferring native asset to the contract, always make sure that the\\n      // asset is properly wrapped\\n      wrapNativeAsset(_assetAmount, _wrapper);\\n      _assetId = address(_wrapper);\\n    } else {\\n      if (msg.value != _fee) revert AssetLogic__handleIncomingAsset_ethWithErcTransfer();\\n\\n      // Transfer asset to contract\\n      trueAmount = transferAssetToContract(_assetId, _assetAmount);\\n    }\\n\\n    return (_assetId, trueAmount);\\n  }\\n\\n  /**\\n   * @notice Wrap the native asset\\n   * @param _amount - The specified amount to wrap\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   */\\n  function wrapNativeAsset(uint256 _amount, IWrapped _wrapper) internal {\\n    _wrapper.deposit{value: _amount}();\\n  }\\n\\n  /**\\n   * @notice Transfer asset funds from msg.sender to the Connext contract.\\n   * @param _assetId - The address to transfer\\n   * @param _amount - The specified amount to transfer\\n   * @return The amount of the asset that was seen by the contract\\n   */\\n  function transferAssetToContract(address _assetId, uint256 _amount) internal returns (uint256) {\\n    // Validate correct amounts are transferred\\n    uint256 starting = IERC20Upgradeable(_assetId).balanceOf(address(this));\\n\\n    SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_assetId), msg.sender, address(this), _amount);\\n    // Calculate the *actual* amount that was sent here\\n    return IERC20Upgradeable(_assetId).balanceOf(address(this)) - starting;\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev If using the native asset, will automatically unwrap\\n   * @param _assetId - The address to transfer\\n   * @param _to - The account that will receive the withdrawn funds\\n   * @param _amount - The amount to withdraw from contract\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   */\\n  function transferAssetFromContract(\\n    address _assetId,\\n    address _to,\\n    uint256 _amount,\\n    IWrapped _wrapper\\n  ) internal {\\n    // No native assets should ever be stored on this contract\\n    if (_assetId == address(0)) revert AssetLogic__transferAssetFromContract_notNative();\\n\\n    if (_assetId == address(_wrapper)) {\\n      // If dealing with wrapped assets, make sure they are properly unwrapped\\n      // before sending from contract\\n      _wrapper.withdraw(_amount);\\n      AddressUpgradeable.sendValue(payable(_to), _amount);\\n    } else {\\n      // Transfer ERC20 asset\\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _to, _amount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Swaps an adopted asset to the local (representation or canonical) nomad asset\\n   * @dev Will not swap if the asset passed in is the local asset\\n   * @param _canonical - The canonical token\\n   * @param _pool - The StableSwap pool\\n   * @param _tokenRegistry - The local nomad token registry\\n   * @param _asset - The address of the adopted asset to swap into the local asset\\n   * @param _amount - The amount of the adopted asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapToLocalAssetIfNeeded(\\n    ConnextMessage.TokenId memory _canonical,\\n    IStableSwap _pool,\\n    ITokenRegistry _tokenRegistry,\\n    address _asset,\\n    uint256 _amount\\n  ) internal returns (uint256, address) {\\n    // Check to see if the asset must be swapped because it is not the local asset\\n    if (_canonical.id == bytes32(0)) {\\n      // This is *not* the adopted asset, meaning it must be the local asset\\n      return (_amount, _asset);\\n    }\\n\\n    // Get the local token for this domain (may return canonical or representation)\\n    address local = _tokenRegistry.getLocalAddress(_canonical.domain, _canonical.id);\\n\\n    // if theres no amount, no need to swap\\n    if (_amount == 0) {\\n      return (_amount, local);\\n    }\\n\\n    // Check the case where the adopted asset *is* the local asset\\n    if (local == _asset) {\\n      // No need to swap\\n      return (_amount, _asset);\\n    }\\n\\n    // Approve pool\\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), address(_pool), _amount);\\n\\n    // Swap the asset to the proper local asset\\n    return (_pool.swapExact(_amount, _asset, local), local);\\n  }\\n\\n  /**\\n   * @notice Swaps a local nomad asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _canonicalToAdopted - Mapping of adopted to canonical on this domain\\n   * @param _adoptedToLocalPools - Mapping holding the AMMs for swapping in and out of local assets\\n   * @param _tokenRegistry - The local nomad token registry\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @return The amount of adopted asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeeded(\\n    mapping(bytes32 => address) storage _canonicalToAdopted,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    ITokenRegistry _tokenRegistry,\\n    address _asset,\\n    uint256 _amount\\n  ) internal returns (uint256, address) {\\n    // Get the token id\\n    (, bytes32 id) = _tokenRegistry.getTokenId(_asset);\\n\\n    // If the adopted asset is the local asset, no need to swap\\n    address adopted = _canonicalToAdopted[id];\\n    if (adopted == _asset) {\\n      return (_amount, _asset);\\n    }\\n\\n    // Approve pool\\n    IStableSwap pool = _adoptedToLocalPools[id];\\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), address(pool), _amount);\\n\\n    // Otherwise, swap to adopted asset\\n    return (pool.swapExact(_amount, _asset, adopted), adopted);\\n  }\\n}\\n\",\"keccak256\":\"0x4a6896ea9639aef2131592b11f198cb0431794ff99a7d050375fb6ac8f94052a\",\"license\":\"UNLICENSED\"},\"contracts/lib/Connext/ConnextLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IConnextHandler} from \\\"../../interfaces/IConnextHandler.sol\\\";\\nimport {IStableSwap} from \\\"../../interfaces/IStableSwap.sol\\\";\\nimport {IWrapped} from \\\"../../interfaces/IWrapped.sol\\\";\\nimport {IExecutor} from \\\"../../interfaces/IExecutor.sol\\\";\\nimport {LibCrossDomainProperty} from \\\"../LibCrossDomainProperty.sol\\\";\\nimport {RouterPermissionsManagerInfo} from \\\"./RouterPermissionsManagerLogic.sol\\\";\\nimport {AssetLogic} from \\\"./AssetLogic.sol\\\";\\n\\nimport {RelayerFeeRouter} from \\\"../../nomad-xapps/contracts/relayer-fee-router/RelayerFeeRouter.sol\\\";\\nimport {ITokenRegistry, IBridgeToken} from \\\"../../nomad-xapps/interfaces/bridge/ITokenRegistry.sol\\\";\\nimport {ConnextMessage} from \\\"../../nomad-xapps/contracts/connext/ConnextMessage.sol\\\";\\nimport {TypedMemView} from \\\"../../nomad-core/libs/TypedMemView.sol\\\";\\nimport {TypeCasts} from \\\"../../nomad-core/contracts/XAppConnectionManager.sol\\\";\\nimport {Home} from \\\"../../nomad-core/contracts/Home.sol\\\";\\n\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable, AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary ConnextLogic {\\n  // ============ Libraries ============\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using ConnextMessage for bytes29;\\n\\n  bytes32 internal constant EMPTY = hex\\\"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\\\";\\n\\n  // ============ Errors ============\\n\\n  error ConnextLogic__addAssetId_alreadyAdded();\\n  error ConnextLogic__removeAssetId_notAdded();\\n  error ConnextLogic__addRelayer_alreadyApproved();\\n  error ConnextLogic__removeRelayer_notApproved();\\n  error ConnextLogic__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer();\\n  error ConnextLogic__reconcile_invalidAction();\\n  error ConnextLogic__reconcile_alreadyReconciled();\\n  error ConnextLogic__removeLiquidity_recipientEmpty();\\n  error ConnextLogic__removeLiquidity_amountIsZero();\\n  error ConnextLogic__removeLiquidity_insufficientFunds();\\n  error ConnextLogic__xcall_wrongDomain();\\n  error ConnextLogic__xcall_emptyTo();\\n  error ConnextLogic__xcall_notSupportedAsset();\\n  error ConnextLogic__xcall_relayerFeeIsZero();\\n  error ConnextLogic__execute_unapprovedRelayer();\\n  error ConnextLogic__execute_maxRoutersExceeded();\\n  error ConnextLogic__execute_alreadyExecuted();\\n  error ConnextLogic__execute_notSupportedRouter();\\n  error ConnextLogic__execute_invalidRouterSignature();\\n  error ConnextLogic__initiateClaim_notRelayer(bytes32 transferId);\\n  error ConnextLogic__bumpTransfer_invalidTransfer();\\n  error ConnextLogic__bumpTransfer_valueIsZero();\\n\\n  // ============ Structs ============\\n\\n  struct XCallLibArgs {\\n    IConnextHandler.XCallArgs xCallArgs;\\n    IWrapped wrapper;\\n    uint256 nonce;\\n    ITokenRegistry tokenRegistry;\\n    uint256 domain;\\n    Home home;\\n    bytes32 remote;\\n  }\\n\\n  struct XCalledEventArgs {\\n    address transactingAssetId;\\n    uint256 amount;\\n    uint256 bridgedAmt;\\n    address bridged;\\n  }\\n\\n  struct ExecuteLibArgs {\\n    IConnextHandler.ExecuteArgs executeArgs;\\n    bool isRouterOwnershipRenounced;\\n    uint256 maxRoutersPerTransfer;\\n    ITokenRegistry tokenRegistry;\\n    IWrapped wrapper;\\n    IExecutor executor;\\n    uint256 liquidityFeeNumerator;\\n    uint256 liquidityFeeDenominator;\\n  }\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when a new stable-swap AMM is added for the local <> adopted token\\n   * @param canonicalId - The canonical identifier of the token the local <> adopted AMM is for\\n   * @param domain - The domain of the canonical token for the local <> adopted amm\\n   * @param swapPool - The address of the AMM\\n   * @param caller - The account that called the function\\n   */\\n  event StableSwapAdded(bytes32 canonicalId, uint32 domain, address swapPool, address caller);\\n\\n  /**\\n   * @notice Emitted when a new asset is added\\n   * @param canonicalId - The canonical identifier of the token the local <> adopted AMM is for\\n   * @param domain - The domain of the canonical token for the local <> adopted amm\\n   * @param adoptedAsset - The address of the adopted (user-expected) asset\\n   * @param supportedAsset - The address of the whitelisted asset. If the native asset is to be whitelisted,\\n   * the address of the wrapped version will be stored\\n   * @param caller - The account that called the function\\n   */\\n  event AssetAdded(bytes32 canonicalId, uint32 domain, address adoptedAsset, address supportedAsset, address caller);\\n\\n  /**\\n   * @notice Emitted when an asset is removed from whitelists\\n   * @param canonicalId - The canonical identifier of the token removed\\n   * @param caller - The account that called the function\\n   */\\n  event AssetRemoved(bytes32 canonicalId, address caller);\\n\\n  /**\\n   * @notice Emitted when a rlayer is added or removed from whitelists\\n   * @param relayer - The relayer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event RelayerAdded(address relayer, address caller);\\n\\n  /**\\n   * @notice Emitted when a rlayer is added or removed from whitelists\\n   * @param relayer - The relayer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event RelayerRemoved(address relayer, address caller);\\n\\n  /**\\n   * @notice Emitted when a router withdraws liquidity from the contract\\n   * @param router - The router you are removing liquidity from\\n   * @param to - The address the funds were withdrawn to\\n   * @param local - The address of the token withdrawn\\n   * @param amount - The amount of liquidity withdrawn\\n   * @param caller - The account that called the function\\n   */\\n  event LiquidityRemoved(address indexed router, address to, address local, uint256 amount, address caller);\\n\\n  /**\\n   * @notice Emitted when a router adds liquidity to the contract\\n   * @param router - The address of the router the funds were credited to\\n   * @param local - The address of the token added (all liquidity held in local asset)\\n   * @param amount - The amount of liquidity added\\n   * @param caller - The account that called the function\\n   */\\n  event LiquidityAdded(address indexed router, address local, bytes32 canonicalId, uint256 amount, address caller);\\n\\n  /**\\n   * @notice Emitted when the maxRoutersPerTransfer variable is updated\\n   * @param maxRoutersPerTransfer - The maxRoutersPerTransfer new value\\n   * @param caller - The account that called the function\\n   */\\n  event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller);\\n\\n  /**\\n   * @notice Emitted when `xcall` is called on the origin domain\\n   */\\n  event XCalled(\\n    bytes32 indexed transferId,\\n    IConnextHandler.XCallArgs xcallArgs,\\n    XCalledEventArgs args,\\n    uint256 nonce,\\n    bytes message,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `execute` is called on the destination chain\\n   * @dev `execute` may be called when providing fast liquidity *or* when processing a reconciled transfer\\n   * @param transferId - The unique identifier of the crosschain transfer\\n   * @param to - The CallParams.to provided, created as indexed parameter\\n   * @param args - The ExecuteArgs provided to the function\\n   * @param transactingAsset - The asset the to gets or the external call is executed with. Should be the\\n   * adopted asset on that chain.\\n   * @param transactingAmount - The amount of transferring asset the to address receives or the external call is\\n   * executed with\\n   * @param caller - The account that called the function\\n   */\\n  event Executed(\\n    bytes32 indexed transferId,\\n    address indexed to,\\n    IConnextHandler.ExecuteArgs args,\\n    address transactingAsset,\\n    uint256 transactingAmount,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `reconciled` is called by the bridge on the destination domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param origin - The origin domain of the transfer\\n   * @param routers - The CallParams.recipient provided, created as indexed parameter\\n   * @param asset - The asset that was provided by the bridge\\n   * @param amount - The amount that was provided by the bridge\\n   * @param caller - The account that called the function\\n   */\\n  event Reconciled(\\n    bytes32 indexed transferId,\\n    uint32 indexed origin,\\n    address[] routers,\\n    address asset,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `bumpTransfer` is called by an user on the origin domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param relayerFee - The updated amount of relayer fee in native asset\\n   * @param caller - The account that called the function\\n   */\\n  event TransferRelayerFeesUpdated(bytes32 indexed transferId, uint256 relayerFee, address caller);\\n\\n  /**\\n   * @notice Emitted when `initiateClaim` is called on the destination chain\\n   * @param domain - Domain to claim funds on\\n   * @param recipient - Address on origin chain to send claimed funds to\\n   * @param caller - The account that called the function\\n   * @param transferIds - TransferIds to claim\\n   */\\n  event InitiatedClaim(uint32 indexed domain, address indexed recipient, address caller, bytes32[] transferIds);\\n\\n  /**\\n   * @notice Emitted when `claim` is called on the origin domain\\n   * @param recipient - Address on origin chain to send claimed funds to\\n   * @param total - Total amount claimed\\n   * @param transferIds - TransferIds to claim\\n   */\\n  event Claimed(address indexed recipient, uint256 total, bytes32[] transferIds);\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Used to add an AMM for adopted <> local assets\\n   * @param _canonical - The canonical TokenId to add (domain and id)\\n   * @param _stableSwap - The address of the amm to add\\n   */\\n  function addStableSwapPool(\\n    ConnextMessage.TokenId calldata _canonical,\\n    address _stableSwap,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools\\n  ) external {\\n    // Update the pool mapping\\n    _adoptedToLocalPools[_canonical.id] = IStableSwap(_stableSwap);\\n\\n    emit StableSwapAdded(_canonical.id, _canonical.domain, _stableSwap, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to add assets on same chain as contract that can be transferred.\\n   * @param _canonical - The canonical TokenId to add (domain and id)\\n   * @param _adoptedAssetId - The used asset id for this domain (i.e. PoS USDC for\\n   * polygon)\\n   */\\n  function addAssetId(\\n    ConnextMessage.TokenId calldata _canonical,\\n    address _adoptedAssetId,\\n    address _wrapper,\\n    mapping(bytes32 => bool) storage _approvedAssets,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical,\\n    mapping(bytes32 => address) storage _canonicalToAdopted\\n  ) external {\\n    // Sanity check: needs approval\\n    if (_approvedAssets[_canonical.id]) revert ConnextLogic__addAssetId_alreadyAdded();\\n\\n    // Update approved assets mapping\\n    _approvedAssets[_canonical.id] = true;\\n\\n    address supported = _adoptedAssetId == address(0) ? _wrapper : _adoptedAssetId;\\n\\n    // Update the adopted mapping\\n    _adoptedToCanonical[supported] = _canonical;\\n\\n    // Update the canonical mapping\\n    _canonicalToAdopted[_canonical.id] = supported;\\n\\n    // Emit event\\n    emit AssetAdded(_canonical.id, _canonical.domain, _adoptedAssetId, supported, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove assets from the whitelist\\n   * @param _canonicalId - Token id to remove\\n   * @param _adoptedAssetId - Corresponding adopted asset to remove\\n   */\\n  function removeAssetId(\\n    bytes32 _canonicalId,\\n    address _adoptedAssetId,\\n    address _wrapper,\\n    mapping(bytes32 => bool) storage _approvedAssets,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical\\n  ) external {\\n    // Sanity check: already approval\\n    if (!_approvedAssets[_canonicalId]) revert ConnextLogic__removeAssetId_notAdded();\\n\\n    // Update mapping\\n    delete _approvedAssets[_canonicalId];\\n\\n    // Update pools\\n    delete _adoptedToLocalPools[_canonicalId];\\n\\n    // Update adopted mapping\\n    delete _adoptedToCanonical[_adoptedAssetId == address(0) ? _wrapper : _adoptedAssetId];\\n\\n    // Emit event\\n    emit AssetRemoved(_canonicalId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to add approved relayer\\n   * @param _relayer - The relayer address to add\\n   */\\n  function addRelayer(address _relayer, mapping(address => bool) storage _approvedRelayers) external {\\n    if (_approvedRelayers[_relayer]) revert ConnextLogic__addRelayer_alreadyApproved();\\n    _approvedRelayers[_relayer] = true;\\n\\n    emit RelayerAdded(_relayer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove approved relayer\\n   * @param _relayer - The relayer address to remove\\n   */\\n  function removeRelayer(address _relayer, mapping(address => bool) storage _approvedRelayers) external {\\n    if (!_approvedRelayers[_relayer]) revert ConnextLogic__removeRelayer_notApproved();\\n    delete _approvedRelayers[_relayer];\\n\\n    emit RelayerRemoved(_relayer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to set the max amount of routers a payment can be routed through\\n   * @param _newMax The new max amount of routers\\n   */\\n  function setMaxRoutersPerTransfer(uint256 _newMax, uint256 _currentMax) external {\\n    if (_newMax == 0 || _newMax == _currentMax)\\n      revert ConnextLogic__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer();\\n\\n    emit MaxRoutersPerTransferUpdated(_newMax, msg.sender);\\n  }\\n\\n  // ============ Functions ============\\n\\n  /**\\n   * @notice Contains the logic to verify + increment a given routers liquidity\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\n   * @param _amount - The amount of liquidity to add for the router\\n   * @param _local - The address of the nomad representation of the asset\\n   * @param _router - The router you are adding liquidity on behalf of\\n   * @param _canonicalId - Canonical asset id from the representation\\n   */\\n  function addLiquidityForRouter(\\n    uint256 _amount,\\n    address _local,\\n    address _router,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    bytes32 _canonicalId,\\n    IWrapped _wrapper\\n  ) external {\\n    // Transfer funds to contract\\n    (address asset, uint256 received) = AssetLogic.handleIncomingAsset(_local, _amount, 0, _wrapper);\\n\\n    // Update the router balances. Happens after pulling funds to account for\\n    // the fee on transfer tokens\\n    _routerBalances[_router][asset] += received;\\n\\n    // Emit event\\n    emit LiquidityAdded(_router, asset, _canonicalId, received, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This is used by any router to decrease their available liquidity for a given asset.\\n   * @param _amount - The amount of liquidity to remove for the router\\n   * @param _local - The address of the asset you're removing liquidity from. If removing liquidity of the\\n   * native asset, routers may use `address(0)` or the wrapped asset\\n   * @param _recipient The address that will receive the liquidity being removed\\n   */\\n  function removeLiquidity(\\n    uint256 _amount,\\n    address _local,\\n    address _recipient,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    IWrapped _wrapper\\n  ) external {\\n    // Sanity check: to is sensible\\n    if (_recipient == address(0)) revert ConnextLogic__removeLiquidity_recipientEmpty();\\n\\n    // Sanity check: nonzero amounts\\n    if (_amount == 0) revert ConnextLogic__removeLiquidity_amountIsZero();\\n\\n    uint256 routerBalance = _routerBalances[msg.sender][_local];\\n    // Sanity check: amount can be deducted for the router\\n    if (routerBalance < _amount) revert ConnextLogic__removeLiquidity_insufficientFunds();\\n\\n    // Update router balances\\n    unchecked {\\n      _routerBalances[msg.sender][_local] = routerBalance - _amount;\\n    }\\n\\n    // Transfer from contract to specified to\\n    AssetLogic.transferAssetFromContract(_local, _recipient, _amount, _wrapper);\\n\\n    // Emit event\\n    emit LiquidityRemoved(msg.sender, _recipient, _local, _amount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This function is called ConnextHandler when a user who is looking to bridge funds\\n   * @param _args - The XCallArgs\\n   * @param _adoptedToCanonical - Mapping of canonical to adopted assets on this domain\\n   * @param _adoptedToLocalPools - Mapping holding the AMMs for swapping in and out of local assets\\n   * @param _relayerFees - Mapping of relayer fee for a transfer\\n   * @return The transfer id of the crosschain transfer\\n   */\\n  function xcall(\\n    XCallLibArgs calldata _args,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(bytes32 => uint256) storage _relayerFees\\n  ) external returns (bytes32, uint256) {\\n    _xcallSanityChecks(_args);\\n\\n    // get the true transacting asset id (using wrapped native instead native)\\n    (bytes32 transferId, bytes memory message, XCalledEventArgs memory eventArgs) = _xcallProcess(\\n      _args,\\n      _adoptedToCanonical,\\n      _adoptedToLocalPools\\n    );\\n\\n    // Store the relayer fee\\n    _relayerFees[transferId] = _args.xCallArgs.relayerFee;\\n\\n    // emit event\\n    emit XCalled(transferId, _args.xCallArgs, eventArgs, _args.nonce, message, msg.sender);\\n\\n    return (transferId, _args.nonce + 1);\\n  }\\n\\n  /**\\n   * @notice Called via `handle` to manage funds associated with a transaction\\n   * @dev Will either (a) credit router or (b) make funds available for execution. Don't\\n   * include execution here\\n   */\\n  function reconcile(\\n    uint32 _origin,\\n    bytes memory _message,\\n    mapping(bytes32 => bool) storage _reconciledTransfers,\\n    ITokenRegistry _tokenRegistry,\\n    mapping(bytes32 => address[]) storage _routedTransfers,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances\\n  ) external {\\n    // parse tokenId and action from message\\n    bytes29 msg_ = _message.ref(0).mustBeMessage();\\n    bytes29 tokenId = msg_.tokenId();\\n    bytes29 action = msg_.action();\\n\\n    // assert the action is valid\\n    if (!action.isTransfer()) {\\n      revert ConnextLogic__reconcile_invalidAction();\\n    }\\n\\n    // load the transferId\\n    bytes32 transferId = action.transferId();\\n\\n    // ensure the transaction has not been handled\\n    if (_reconciledTransfers[transferId]) {\\n      revert ConnextLogic__reconcile_alreadyReconciled();\\n    }\\n\\n    // get the token contract for the given tokenId on this chain\\n    // (if the token is of remote origin and there is\\n    // no existing representation token contract, the TokenRegistry will\\n    // deploy a new one)\\n    address token = _tokenRegistry.ensureLocalToken(tokenId.domain(), tokenId.id());\\n\\n    // load amount once\\n    uint256 amount = action.amnt();\\n\\n    // NOTE: tokenId + amount must be in plaintext in message so funds can\\n    // *only* be minted by `handle`. They are still used in the generation of\\n    // the transferId so routers must provide them correctly to be reimbursed\\n\\n    // TODO: do we need to keep this\\n    bytes32 details = action.detailsHash();\\n\\n    // if the token is of remote origin, mint the tokens. will either\\n    // - be credited to router (fast liquidity)\\n    // - be reserved for execution (slow liquidity)\\n    if (!_tokenRegistry.isLocalOrigin(token)) {\\n      IBridgeToken(token).mint(address(this), amount);\\n      // Tell the token what its detailsHash is\\n      IBridgeToken(token).setDetailsHash(details);\\n    }\\n    // NOTE: if the token is of local origin, it means it was escrowed\\n    // in this contract at xcall\\n\\n    // mark the transfer as reconciled\\n    _reconciledTransfers[transferId] = true;\\n\\n    // get the transfer\\n    address[] storage routers = _routedTransfers[transferId];\\n\\n    uint256 pathLen = routers.length;\\n    if (pathLen != 0) {\\n      // fast liquidity path\\n      // credit the router the asset\\n      uint256 routerAmt = amount / pathLen;\\n      for (uint256 i; i < pathLen; ) {\\n        _routerBalances[routers[i]][token] += routerAmt;\\n        unchecked {\\n          i++;\\n        }\\n      }\\n    }\\n\\n    emit Reconciled(transferId, _origin, routers, token, amount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Called on the destination domain to disburse correct assets to end recipient\\n   * and execute any included calldata\\n   * @dev Can be called prior to or after `handle`, depending if fast liquidity is being\\n   * used.\\n   */\\n  function execute(\\n    ExecuteLibArgs calldata _args,\\n    mapping(bytes32 => address[]) storage _routedTransfers,\\n    mapping(bytes32 => bool) storage _reconciledTransfers,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(bytes32 => address) storage _canonicalToAdopted,\\n    RouterPermissionsManagerInfo storage _routerInfo,\\n    mapping(bytes32 => address) storage _transferRelayer\\n  ) external returns (bytes32) {\\n    (bytes32 transferId, bool reconciled) = _executeSanityChecks(\\n      _args,\\n      _transferRelayer,\\n      _reconciledTransfers,\\n      _routerInfo.approvedRouters\\n    );\\n\\n    // execute router liquidity when this is a fast transfer\\n    (uint256 amount, address adopted) = _handleExecuteLiquidity(\\n      transferId,\\n      !reconciled,\\n      _args,\\n      _routedTransfers,\\n      _routerBalances,\\n      _adoptedToLocalPools,\\n      _canonicalToAdopted\\n    );\\n\\n    // execute the transaction\\n    _handleExecuteTransaction(_args, amount, adopted, transferId, reconciled);\\n\\n    // Set the relayer for this transaction to allow for future claim\\n    _transferRelayer[transferId] = msg.sender;\\n\\n    // emit event\\n    emit Executed(transferId, _args.executeArgs.params.to, _args.executeArgs, adopted, amount, msg.sender);\\n\\n    return transferId;\\n  }\\n\\n  /**\\n   * @notice Called by relayer when they want to claim owed funds on a given domain\\n   * @dev Domain should be the origin domain of all the transfer ids\\n   * @param _domain - domain to claim funds on\\n   * @param _recipient - address on origin chain to send claimed funds to\\n   * @param _transferIds - transferIds to claim\\n   * @param _relayerFeeRouter - The local nomad relayer fee router\\n   * @param _transferRelayer - Mapping of transactionIds to relayer\\n   */\\n  function initiateClaim(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds,\\n    RelayerFeeRouter _relayerFeeRouter,\\n    mapping(bytes32 => address) storage _transferRelayer\\n  ) external {\\n    // Ensure the relayer can claim all transfers specified\\n    for (uint256 i; i < _transferIds.length; ) {\\n      if (_transferRelayer[_transferIds[i]] != msg.sender)\\n        revert ConnextLogic__initiateClaim_notRelayer(_transferIds[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // Send transferIds via nomad\\n    _relayerFeeRouter.send(_domain, _recipient, _transferIds);\\n\\n    emit InitiatedClaim(_domain, _recipient, msg.sender, _transferIds);\\n  }\\n\\n  /**\\n   * @notice Pays out a relayer for the given fees\\n   * @dev Called by the RelayerFeeRouter.handle message. The validity of the transferIds is\\n   * asserted before dispatching the message.\\n   * @param _recipient - address on origin chain to send claimed funds to\\n   * @param _transferIds - transferIds to claim\\n   * @param _relayerFees - Mapping of transactionIds to fee\\n   */\\n  function claim(\\n    address _recipient,\\n    bytes32[] calldata _transferIds,\\n    mapping(bytes32 => uint256) storage _relayerFees\\n  ) external {\\n    // Tally amounts owed\\n    uint256 total;\\n    for (uint256 i; i < _transferIds.length; ) {\\n      total += _relayerFees[_transferIds[i]];\\n      _relayerFees[_transferIds[i]] = 0;\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    AddressUpgradeable.sendValue(payable(_recipient), total);\\n\\n    emit Claimed(_recipient, total, _transferIds);\\n  }\\n\\n  /**\\n   * @notice Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\\n   * @param _transferId - The unique identifier of the crosschain transaction\\n   */\\n  function bumpTransfer(bytes32 _transferId, mapping(bytes32 => uint256) storage relayerFees) external {\\n    if (msg.value == 0) revert ConnextLogic__bumpTransfer_valueIsZero();\\n\\n    relayerFees[_transferId] += msg.value;\\n\\n    emit TransferRelayerFeesUpdated(_transferId, relayerFees[_transferId], msg.sender);\\n  }\\n\\n  // ============ Private Functions ============\\n\\n  /**\\n   * @notice Performs some sanity checks for `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _executeSanityChecks(\\n    ExecuteLibArgs calldata _args,\\n    mapping(bytes32 => address) storage _transferRelayer,\\n    mapping(bytes32 => bool) storage _reconciledTransfers,\\n    mapping(address => bool) storage _approvedRouters\\n  ) private returns (bytes32, bool) {\\n    // get number of facilitating routers\\n    uint256 pathLength = _args.executeArgs.routers.length;\\n\\n    // make sure number of routers is valid\\n    if (pathLength > _args.maxRoutersPerTransfer) revert ConnextLogic__execute_maxRoutersExceeded();\\n\\n    // get transfer id\\n    bytes32 transferId = _getTransferId(_args);\\n\\n    // get the payload the router should have signed\\n    bytes32 routerHash = keccak256(abi.encode(transferId, pathLength));\\n\\n    // make sure routers are all approved if needed\\n    for (uint256 i; i < pathLength; ) {\\n      if (!_args.isRouterOwnershipRenounced && !_approvedRouters[_args.executeArgs.routers[i]]) {\\n        revert ConnextLogic__execute_notSupportedRouter();\\n      }\\n      if (_args.executeArgs.routers[i] != _recoverSignature(routerHash, _args.executeArgs.routerSignatures[i])) {\\n        revert ConnextLogic__execute_invalidRouterSignature();\\n      }\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // require this transfer has not already been executed\\n    if (_transferRelayer[transferId] != address(0)) {\\n      revert ConnextLogic__execute_alreadyExecuted();\\n    }\\n\\n    // get reconciled record\\n    bool reconciled = _reconciledTransfers[transferId];\\n\\n    return (transferId, reconciled);\\n  }\\n\\n  /**\\n   * @notice Calculates fast transfer amount.\\n   * @param _amount Transfer amount\\n   * @param _liquidityFeeNum Liquidity fee numerator\\n   * @param _liquidityFeeDen Liquidity fee denominator\\n   */\\n  function _getFastTransferAmount(\\n    uint256 _amount,\\n    uint256 _liquidityFeeNum,\\n    uint256 _liquidityFeeDen\\n  ) private pure returns (uint256) {\\n    return (_amount * _liquidityFeeNum) / _liquidityFeeDen;\\n  }\\n\\n  /**\\n   * @notice Performs some sanity checks for `xcall`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _xcallSanityChecks(XCallLibArgs calldata _args) private {\\n    // ensure this is the right domain\\n    if (_args.xCallArgs.params.originDomain != _args.domain) {\\n      revert ConnextLogic__xcall_wrongDomain();\\n    }\\n\\n    // ensure theres a recipient defined\\n    if (_args.xCallArgs.params.to == address(0)) {\\n      revert ConnextLogic__xcall_emptyTo();\\n    }\\n  }\\n\\n  /**\\n   * @notice Processes an `xcall`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _xcallProcess(\\n    XCallLibArgs calldata _args,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools\\n  )\\n    private\\n    returns (\\n      bytes32,\\n      bytes memory,\\n      XCalledEventArgs memory\\n    )\\n  {\\n    address transactingAssetId = _args.xCallArgs.transactingAssetId == address(0)\\n      ? address(_args.wrapper)\\n      : _args.xCallArgs.transactingAssetId;\\n\\n    // check that the asset is supported -- can be either adopted or local\\n    ConnextMessage.TokenId memory canonical = _adoptedToCanonical[transactingAssetId];\\n    if (canonical.id == bytes32(0)) {\\n      revert ConnextLogic__xcall_notSupportedAsset();\\n    }\\n\\n    // transfer funds of transacting asset to the contract from user\\n    // NOTE: will wrap any native asset transferred to wrapped-native automatically\\n    (, uint256 amount) = AssetLogic.handleIncomingAsset(\\n      _args.xCallArgs.transactingAssetId,\\n      _args.xCallArgs.amount,\\n      _args.xCallArgs.relayerFee,\\n      _args.wrapper\\n    );\\n\\n    // swap to the local asset from adopted\\n    (uint256 bridgedAmt, address bridged) = AssetLogic.swapToLocalAssetIfNeeded(\\n      canonical,\\n      _adoptedToLocalPools[canonical.id],\\n      _args.tokenRegistry,\\n      transactingAssetId,\\n      amount\\n    );\\n\\n    bytes32 transferId = _getTransferId(_args, canonical);\\n\\n    bytes memory message = _formatMessage(_args, bridged, transferId, bridgedAmt);\\n    _args.home.dispatch(_args.xCallArgs.params.destinationDomain, _args.remote, message);\\n\\n    return (\\n      transferId,\\n      message,\\n      XCalledEventArgs({\\n        transactingAssetId: transactingAssetId,\\n        amount: amount,\\n        bridgedAmt: bridgedAmt,\\n        bridged: bridged\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Calculates a transferId based on `execute` arguments\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _getTransferId(ExecuteLibArgs calldata _args) private view returns (bytes32) {\\n    (uint32 tokenDomain, bytes32 tokenId) = _args.tokenRegistry.getTokenId(_args.executeArgs.local);\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          _args.executeArgs.nonce,\\n          _args.executeArgs.params,\\n          _args.executeArgs.originSender,\\n          tokenId,\\n          tokenDomain,\\n          _args.executeArgs.amount\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Calculates a transferId based on `xcall` arguments\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _getTransferId(XCallLibArgs calldata _args, ConnextMessage.TokenId memory _canonical)\\n    private\\n    view\\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encode(\\n          _args.nonce,\\n          _args.xCallArgs.params,\\n          msg.sender,\\n          _canonical.id,\\n          _canonical.domain,\\n          _args.xCallArgs.amount\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Formats a nomad message generated by `xcall`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _formatMessage(\\n    XCallLibArgs calldata _args,\\n    address _asset,\\n    bytes32 _transferId,\\n    uint256 _amount\\n  ) private returns (bytes memory) {\\n    // get token\\n    IBridgeToken token = IBridgeToken(_asset);\\n\\n    // declare details\\n    bytes32 detailsHash;\\n\\n    if (_args.tokenRegistry.isLocalOrigin(_asset)) {\\n      // TODO: do we want to store a mapping of custodied token balances here?\\n\\n      // token is local, custody token on this chain\\n      // query token contract for details and calculate detailsHash\\n      detailsHash = ConnextMessage.formatDetailsHash(token.name(), token.symbol(), token.decimals());\\n    } else {\\n      // if the token originates on a remote chain,\\n      // burn the representation tokens on this chain\\n      if (_amount > 0) {\\n        token.burn(msg.sender, _amount);\\n      }\\n      detailsHash = token.detailsHash();\\n    }\\n\\n    // format action\\n    bytes29 action = ConnextMessage.formatTransfer(\\n      TypeCasts.addressToBytes32(_args.xCallArgs.params.to),\\n      _amount,\\n      detailsHash,\\n      _transferId\\n    );\\n\\n    // get the tokenID\\n    (uint32 domain, bytes32 id) = _args.tokenRegistry.getTokenId(_asset);\\n\\n    // format token id\\n    bytes29 tokenId = ConnextMessage.formatTokenId(domain, id);\\n\\n    // send message\\n    return ConnextMessage.formatMessage(tokenId, action);\\n  }\\n\\n  /**\\n   * @notice Process the transfer, and calldata if needed, when calling `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _handleExecuteTransaction(\\n    ExecuteLibArgs calldata _args,\\n    uint256 _amount,\\n    address _adopted,\\n    bytes32 _transferId,\\n    bool _reconciled\\n  ) private {\\n    // execute the the transaction\\n    if (keccak256(_args.executeArgs.params.callData) == EMPTY) {\\n      // no call data, send funds to the user\\n      AssetLogic.transferAssetFromContract(_adopted, _args.executeArgs.params.to, _amount, _args.wrapper);\\n    } else {\\n      // execute calldata w/funds\\n      AssetLogic.transferAssetFromContract(_adopted, address(_args.executor), _amount, _args.wrapper);\\n      _args.executor.execute(\\n        _transferId,\\n        _amount,\\n        payable(_args.executeArgs.params.to),\\n        _adopted,\\n        _reconciled\\n          ? LibCrossDomainProperty.formatDomainAndSenderBytes(\\n            _args.executeArgs.params.originDomain,\\n            _args.executeArgs.originSender\\n          )\\n          : LibCrossDomainProperty.EMPTY_BYTES,\\n        _args.executeArgs.params.callData\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Execute liquidity process used when calling `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _handleExecuteLiquidity(\\n    bytes32 _transferId,\\n    bool _isFast,\\n    ExecuteLibArgs calldata _args,\\n    mapping(bytes32 => address[]) storage _routedTransfers,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(bytes32 => address) storage _canonicalToAdopted\\n  ) private returns (uint256, address) {\\n    uint256 toSwap = _args.executeArgs.amount;\\n    uint256 pathLen = _args.executeArgs.routers.length;\\n    if (_isFast) {\\n      // this is the fast liquidity path\\n      // ensure the router is whitelisted\\n\\n      // calculate amount with fast liquidity fee\\n      toSwap = _getFastTransferAmount(\\n        _args.executeArgs.amount,\\n        _args.liquidityFeeNumerator,\\n        _args.liquidityFeeDenominator\\n      );\\n\\n      // TODO: validate routers signature on path / transferId\\n\\n      // store the routers address\\n      _routedTransfers[_transferId] = _args.executeArgs.routers;\\n\\n      // for each router, assert they are approved, and deduct liquidity\\n      uint256 routerAmount = toSwap / pathLen;\\n      for (uint256 i; i < pathLen; ) {\\n        // decrement routers liquidity\\n        _routerBalances[_args.executeArgs.routers[i]][_args.executeArgs.local] -= routerAmount;\\n\\n        unchecked {\\n          i++;\\n        }\\n      }\\n    }\\n\\n    // swap out of mad* asset into adopted asset if needed\\n    return\\n      AssetLogic.swapFromLocalAssetIfNeeded(\\n        _canonicalToAdopted,\\n        _adoptedToLocalPools,\\n        _args.tokenRegistry,\\n        _args.executeArgs.local,\\n        toSwap\\n      );\\n  }\\n\\n  /**\\n   * @notice Holds the logic to recover the signer from an encoded payload.\\n   * @dev Will hash and convert to an eth signed message.\\n   * @param _signed The hash that was signed\\n   * @param _sig The signature you are recovering the signer from\\n   */\\n  function _recoverSignature(bytes32 _signed, bytes calldata _sig) internal pure returns (address) {\\n    // Recover\\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(_signed), _sig);\\n  }\\n}\\n\",\"keccak256\":\"0xd7f6bc9cab6ded4001a7c661fa335c9fd529e7b1241f222e13c1624a5dda233b\",\"license\":\"UNLICENSED\"},\"contracts/lib/Connext/RouterPermissionsManagerLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/**\\n * @notice Contains RouterPermissionsManager related state\\n * @param approvedRouters - Mapping of whitelisted router addresses\\n * @param routerRecipients - Mapping of router withdraw recipient addresses.\\n * If set, all liquidity is withdrawn only to this address. Must be set by routerOwner\\n * (if configured) or the router itself\\n * @param routerOwners - Mapping of router owners\\n * If set, can update the routerRecipient\\n * @param proposedRouterOwners - Mapping of proposed router owners\\n * Must wait timeout to set the\\n * @param proposedRouterTimestamp - Mapping of proposed router owners timestamps\\n * When accepting a proposed owner, must wait for delay to elapse\\n */\\nstruct RouterPermissionsManagerInfo {\\n  mapping(address => bool) approvedRouters;\\n  mapping(address => address) routerRecipients;\\n  mapping(address => address) routerOwners;\\n  mapping(address => address) proposedRouterOwners;\\n  mapping(address => uint256) proposedRouterTimestamp;\\n}\\n\\nlibrary RouterPermissionsManagerLogic {\\n  // ========== Custom Errors ===========\\n  error RouterPermissionsManagerLogic__acceptProposedRouterOwner_notElapsed();\\n  error RouterPermissionsManagerLogic__setRouterRecipient_notNewRecipient();\\n  error RouterPermissionsManagerLogic__onlyRouterOwner_notRouterOwner();\\n  error RouterPermissionsManagerLogic__onlyProposedRouterOwner_notRouterOwner();\\n  error RouterPermissionsManagerLogic__onlyProposedRouterOwner_notProposedRouterOwner();\\n  error RouterPermissionsManagerLogic__removeRouter_routerEmpty();\\n  error RouterPermissionsManagerLogic__removeRouter_notAdded();\\n  error RouterPermissionsManagerLogic__setupRouter_routerEmpty();\\n  error RouterPermissionsManagerLogic__setupRouter_amountIsZero();\\n  error RouterPermissionsManagerLogic__proposeRouterOwner_notNewOwner();\\n  error RouterPermissionsManagerLogic__proposeRouterOwner_badRouter();\\n\\n  /**\\n   * @notice Emitted when a new router is added\\n   * @param router - The address of the added router\\n   * @param caller - The account that called the function\\n   */\\n  event RouterAdded(address indexed router, address caller);\\n\\n  /**\\n   * @notice Emitted when an existing router is removed\\n   * @param router - The address of the removed router\\n   * @param caller - The account that called the function\\n   */\\n  event RouterRemoved(address indexed router, address caller);\\n\\n  /**\\n   * @notice Emitted when the recipient of router is updated\\n   * @param router - The address of the added router\\n   * @param prevRecipient  - The address of the previous recipient of the router\\n   * @param newRecipient  - The address of the new recipient of the router\\n   */\\n  event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient);\\n\\n  /**\\n   * @notice Emitted when the owner of router is proposed\\n   * @param router - The address of the added router\\n   * @param prevProposed  - The address of the previous proposed\\n   * @param newProposed  - The address of the new proposed\\n   */\\n  event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed);\\n\\n  /**\\n   * @notice Emitted when the owner of router is accepted\\n   * @param router - The address of the added router\\n   * @param prevOwner  - The address of the previous owner of the router\\n   * @param newOwner  - The address of the new owner of the router\\n   */\\n  event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Asserts caller is the router owner (if set) or the router itself\\n   */\\n  function _onlyRouterOwner(address _router, address _owner) internal view {\\n    if (!((_owner == address(0) && msg.sender == _router) || _owner == msg.sender))\\n      revert RouterPermissionsManagerLogic__onlyRouterOwner_notRouterOwner();\\n  }\\n\\n  /**\\n   * @notice Asserts caller is the proposed router. If proposed router is address(0), then asserts\\n   * the owner is calling the function (if set), or the router itself is calling the function\\n   */\\n  function _onlyProposedRouterOwner(\\n    address _router,\\n    address _owner,\\n    address _proposed\\n  ) internal view {\\n    if (_proposed == address(0)) {\\n      if (!((_owner == address(0) && msg.sender == _router) || _owner == msg.sender))\\n        revert RouterPermissionsManagerLogic__onlyProposedRouterOwner_notRouterOwner();\\n    } else {\\n      if (msg.sender != _proposed)\\n        revert RouterPermissionsManagerLogic__onlyProposedRouterOwner_notProposedRouterOwner();\\n    }\\n  }\\n\\n  // ============ Public methods =============\\n\\n  /**\\n   * @notice Sets the designated recipient for a router\\n   * @dev Router should only be able to set this once otherwise if router key compromised,\\n   * no problem is solved since attacker could just update recipient\\n   * @param router Router address to set recipient\\n   * @param recipient Recipient Address to set to router\\n   */\\n  function setRouterRecipient(\\n    address router,\\n    address recipient,\\n    RouterPermissionsManagerInfo storage routerInfo // mapping(address => address) storage routerOwners, // mapping(address => address) storage routerRecipients\\n  ) external {\\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\\n\\n    // Check recipient is changing\\n    address _prevRecipient = routerInfo.routerRecipients[router];\\n    if (_prevRecipient == recipient) revert RouterPermissionsManagerLogic__setRouterRecipient_notNewRecipient();\\n\\n    // Set new recipient\\n    routerInfo.routerRecipients[router] = recipient;\\n\\n    // Emit event\\n    emit RouterRecipientSet(router, _prevRecipient, recipient);\\n  }\\n\\n  /**\\n   * @notice Current owner or router may propose a new router owner\\n   * @param router Router address to set recipient\\n   * @param proposed Proposed owner Address to set to router\\n   */\\n  function proposeRouterOwner(\\n    address router,\\n    address proposed,\\n    RouterPermissionsManagerInfo storage routerInfo\\n  ) external {\\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\\n\\n    // Check that proposed is different than current owner\\n    if (getRouterOwner(router, routerInfo.routerOwners) == proposed)\\n      revert RouterPermissionsManagerLogic__proposeRouterOwner_notNewOwner();\\n\\n    // Check that proposed is different than current proposed\\n    address _currentProposed = routerInfo.proposedRouterOwners[router];\\n    if (_currentProposed == proposed) revert RouterPermissionsManagerLogic__proposeRouterOwner_badRouter();\\n\\n    // Set proposed owner + timestamp\\n    routerInfo.proposedRouterOwners[router] = proposed;\\n    routerInfo.proposedRouterTimestamp[router] = block.timestamp;\\n\\n    // Emit event\\n    emit RouterOwnerProposed(router, _currentProposed, proposed);\\n  }\\n\\n  /**\\n   * @notice New router owner must accept role, or previous if proposed is 0x0\\n   * @param router Router address to set recipient\\n   */\\n  function acceptProposedRouterOwner(\\n    address router,\\n    uint256 _delay,\\n    RouterPermissionsManagerInfo storage routerInfo\\n  ) external {\\n    _onlyProposedRouterOwner(router, routerInfo.routerOwners[router], routerInfo.proposedRouterOwners[router]);\\n\\n    address owner = getRouterOwner(router, routerInfo.routerOwners);\\n\\n    // Check timestamp has passed\\n    if (block.timestamp - routerInfo.proposedRouterTimestamp[router] <= _delay)\\n      revert RouterPermissionsManagerLogic__acceptProposedRouterOwner_notElapsed();\\n\\n    // Get current owner + proposed\\n    address _proposed = routerInfo.proposedRouterOwners[router];\\n\\n    // Update the current owner\\n    routerInfo.routerOwners[router] = _proposed;\\n\\n    // Reset proposal + timestamp\\n    if (_proposed != address(0)) {\\n      // delete proposedRouterOwners[router];\\n      routerInfo.proposedRouterOwners[router] = address(0);\\n    }\\n    routerInfo.proposedRouterTimestamp[router] = 0;\\n\\n    // Emit event\\n    emit RouterOwnerAccepted(router, owner, _proposed);\\n  }\\n\\n  /**\\n   * @notice Used to set router initial properties\\n   * @param router Router address to setup\\n   * @param owner Initial Owner of router\\n   * @param recipient Initial Recipient of router\\n   */\\n  function setupRouter(\\n    address router,\\n    address owner,\\n    address recipient,\\n    RouterPermissionsManagerInfo storage routerInfo\\n  ) internal {\\n    // Sanity check: not empty\\n    if (router == address(0)) revert RouterPermissionsManagerLogic__setupRouter_routerEmpty();\\n\\n    // Sanity check: needs approval\\n    if (routerInfo.approvedRouters[router]) revert RouterPermissionsManagerLogic__setupRouter_amountIsZero();\\n\\n    // Approve router\\n    routerInfo.approvedRouters[router] = true;\\n\\n    // Emit event\\n    emit RouterAdded(router, msg.sender);\\n\\n    // Update routerOwner (zero address possible)\\n    if (owner != address(0)) {\\n      routerInfo.routerOwners[router] = owner;\\n      emit RouterOwnerAccepted(router, address(0), owner);\\n    }\\n\\n    // Update router recipient\\n    if (recipient != address(0)) {\\n      routerInfo.routerRecipients[router] = recipient;\\n      emit RouterRecipientSet(router, address(0), recipient);\\n    }\\n  }\\n\\n  /**\\n   * @notice Used to remove routers that can transact crosschain\\n   * @param router Router address to remove\\n   */\\n  function removeRouter(address router, RouterPermissionsManagerInfo storage routerInfo) external {\\n    // Sanity check: not empty\\n    if (router == address(0)) revert RouterPermissionsManagerLogic__removeRouter_routerEmpty();\\n\\n    // Sanity check: needs removal\\n    if (!routerInfo.approvedRouters[router]) revert RouterPermissionsManagerLogic__removeRouter_notAdded();\\n\\n    // Update mapping\\n    routerInfo.approvedRouters[router] = false;\\n\\n    // Emit event\\n    emit RouterRemoved(router, msg.sender);\\n\\n    // Remove router owner\\n    address _owner = routerInfo.routerOwners[router];\\n    if (_owner != address(0)) {\\n      emit RouterOwnerAccepted(router, _owner, address(0));\\n      // delete routerOwners[router];\\n      routerInfo.routerOwners[router] = address(0);\\n    }\\n\\n    // Remove router recipient\\n    address _recipient = routerInfo.routerRecipients[router];\\n    if (_recipient != address(0)) {\\n      emit RouterRecipientSet(router, _recipient, address(0));\\n      // delete routerRecipients[router];\\n      routerInfo.routerRecipients[router] = address(0);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the router owner if it is set, or the router itself if not\\n   * @dev Router owners have the ability to propose new owners and set recipients\\n   * @param _router The relevant router address\\n   * @param _routerOwners The mapping of owners for routers\\n   */\\n  function getRouterOwner(address _router, mapping(address => address) storage _routerOwners)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address _owner = _routerOwners[_router];\\n    return _owner == address(0) ? _router : _owner;\\n  }\\n}\\n\",\"keccak256\":\"0x72b4bbd17846119ba6dff3410813e6b7cf8da51910b5c5a22378301050843076\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibCrossDomainProperty.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {TypedMemView} from \\\"../nomad-core/libs/TypedMemView.sol\\\";\\n\\nlibrary LibCrossDomainProperty {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes29;\\n  using TypedMemView for bytes;\\n\\n  // ============ Enums ============\\n\\n  /**\\n   * Contains information so the properties can be type-checked properly\\n   */\\n  enum Types {\\n    Invalid, // 0\\n    DomainAndSender // 1\\n  }\\n\\n  // ============ Structs ============\\n\\n  /**\\n   * Struct containing the domain and an address of the caller of a function on that\\n   * domain.\\n   */\\n  struct DomainAndSender {\\n    uint32 domain;\\n    address sender;\\n  }\\n\\n  // ============ Constants ============\\n\\n  uint256 private constant PROPERTY_LEN = 25; // 1 byte identifer + 4 bytes domain + 20 bytes address\\n  // default value is the TypedMemView null view\\n  bytes29 public constant EMPTY = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  bytes public constant EMPTY_BYTES = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a property is of type `_t`\\n   * @param _view The stored property\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Checks that view is a valid property length\\n   * @param _view The bytes string\\n   * @return TRUE if length is valid\\n   */\\n  function isValidPropertyLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    return _len == PROPERTY_LEN;\\n  }\\n\\n  /**\\n   * @notice Checks that the property is of the specified type\\n   * @param _type the type to check for\\n   * @param _property The property\\n   * @return True if the property is of the specified type\\n   */\\n  function isType(bytes29 _property, Types _type) internal pure returns (bool) {\\n    return propertyType(_property) == uint8(_type);\\n  }\\n\\n  /**\\n   * @notice Checks that the property is of type DomainAndSender\\n   * @param _property The property\\n   * @return True if the property is of type DomainAndSender\\n   */\\n  function isDomainAndSender(bytes29 _property) internal pure returns (bool) {\\n    return isValidPropertyLength(_property) && isType(_property, Types.DomainAndSender);\\n  }\\n\\n  /**\\n   * @notice Retrieves the identifier from property\\n   * @param _property The property\\n   * @return The property type\\n   */\\n  function propertyType(bytes29 _property) internal pure returns (uint8) {\\n    return uint8(_property.indexUint(0, 1));\\n  }\\n\\n  /**\\n   * @notice Converts to a Property\\n   * @param _view The property\\n   * @return The newly typed property\\n   */\\n  function tryAsProperty(bytes29 _view) internal pure returns (bytes29) {\\n    if (isValidPropertyLength(_view)) {\\n      return _view.castTo(uint40(Types.DomainAndSender));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the property is of type DomainAndSender\\n   * @param _view The property\\n   * @return The property\\n   */\\n  function mustBeProperty(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsProperty(_view).assertValid();\\n  }\\n\\n  /**\\n   * @notice Retrieves the sender from a property\\n   * @param _property The property\\n   * @return The sender address\\n   */\\n  function sender(bytes29 _property) internal pure typeAssert(_property, Types.DomainAndSender) returns (address) {\\n    // before = 1 byte id + 4 bytes domain = 5 bytes\\n    return _property.indexAddress(5);\\n  }\\n\\n  /**\\n   * @notice Retrieves the domain from a property\\n   * @param _property The property\\n   * @return The sender address\\n   */\\n  function domain(bytes29 _property) internal pure typeAssert(_property, Types.DomainAndSender) returns (uint32) {\\n    // before = 1 byte identifier = 1 byte\\n    return uint32(_property.indexUint(1, 4));\\n  }\\n\\n  /**\\n   * @notice Creates a serialized property from components\\n   * @param _domain The domain\\n   * @param _sender The sender\\n   * @return The formatted view\\n   */\\n  function formatDomainAndSender(uint32 _domain, address _sender) internal pure returns (bytes29) {\\n    return abi.encodePacked(Types.DomainAndSender, _domain, _sender).ref(0).castTo(uint40(Types.DomainAndSender));\\n  }\\n\\n  /**\\n   * @notice Creates a serialized property from components\\n   * @param _domain The domain\\n   * @param _sender The sender\\n   * @return The formatted view\\n   */\\n  function formatDomainAndSenderBytes(uint32 _domain, address _sender) internal pure returns (bytes memory) {\\n    return abi.encodePacked(Types.DomainAndSender, _domain, _sender);\\n  }\\n\\n  /**\\n   * @notice Creates a serialized property from components\\n   * @param _property The bytes representation of the property\\n   */\\n  function parseDomainAndSenderBytes(bytes memory _property) internal pure returns (bytes29) {\\n    return mustBeProperty(_property.ref(0));\\n  }\\n}\\n\",\"keccak256\":\"0xcba3ef23aeb393878d9b0c4ca6292f5425bf984569829313517f57f93248fa30\",\"license\":\"UNLICENSED\"},\"contracts/nomad-core/contracts/Home.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Version0} from \\\"./Version0.sol\\\";\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\nimport {QueueLib} from \\\"../libs/Queue.sol\\\";\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\nimport {MerkleTreeManager} from \\\"./Merkle.sol\\\";\\nimport {QueueManager} from \\\"./Queue.sol\\\";\\nimport {IUpdaterManager} from \\\"../interfaces/IUpdaterManager.sol\\\";\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Home\\n * @author Illusory Systems Inc.\\n * @notice Accepts messages to be dispatched to remote chains,\\n * constructs a Merkle tree of the messages,\\n * and accepts signatures from a bonded Updater\\n * which notarize the Merkle tree roots.\\n * Accepts submissions of fraudulent signatures\\n * by the Updater and slashes the Updater in this case.\\n */\\ncontract Home is Version0, QueueManager, MerkleTreeManager, NomadBase {\\n  // ============ Libraries ============\\n\\n  using QueueLib for QueueLib.Queue;\\n  using MerkleLib for MerkleLib.Tree;\\n\\n  // ============ Constants ============\\n\\n  // Maximum bytes per message = 2 KiB\\n  // (somewhat arbitrarily set to begin)\\n  uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\\n\\n  // ============ Public Storage Variables ============\\n\\n  // domain => next available nonce for the domain\\n  mapping(uint32 => uint32) public nonces;\\n  // contract responsible for Updater bonding, slashing and rotation\\n  IUpdaterManager public updaterManager;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[48] private __GAP;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when a new message is dispatched via Nomad\\n   * @param leafIndex Index of message's leaf in merkle tree\\n   * @param destinationAndNonce Destination and destination-specific\\n   * nonce combined in single field ((destination << 32) & nonce)\\n   * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\n   * @param committedRoot the latest notarized root submitted in the last signed Update\\n   * @param message Raw bytes of message\\n   */\\n  event Dispatch(\\n    bytes32 indexed messageHash,\\n    uint256 indexed leafIndex,\\n    uint64 indexed destinationAndNonce,\\n    bytes32 committedRoot,\\n    bytes message\\n  );\\n\\n  /**\\n   * @notice Emitted when proof of an improper update is submitted,\\n   * which sets the contract to FAILED state\\n   * @param oldRoot Old root of the improper update\\n   * @param newRoot New root of the improper update\\n   * @param signature Signature on `oldRoot` and `newRoot\\n   */\\n  event ImproperUpdate(bytes32 oldRoot, bytes32 newRoot, bytes signature);\\n\\n  /**\\n   * @notice Emitted when the Updater is slashed\\n   * (should be paired with ImproperUpdater or DoubleUpdate event)\\n   * @param updater The address of the updater\\n   * @param reporter The address of the entity that reported the updater misbehavior\\n   */\\n  event UpdaterSlashed(address indexed updater, address indexed reporter);\\n\\n  /**\\n   * @notice Emitted when the UpdaterManager contract is changed\\n   * @param updaterManager The address of the new updaterManager\\n   */\\n  event NewUpdaterManager(address updaterManager);\\n\\n  // ============ Constructor ============\\n\\n  constructor(uint32 _localDomain) NomadBase(_localDomain) {} // solhint-disable-line no-empty-blocks\\n\\n  // ============ Initializer ============\\n\\n  function initialize(IUpdaterManager _updaterManager) public initializer {\\n    // initialize queue, set Updater Manager, and initialize\\n    __QueueManager_initialize();\\n    _setUpdaterManager(_updaterManager);\\n    __NomadBase_initialize(updaterManager.updater());\\n  }\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Ensures that function is called by the UpdaterManager contract\\n   */\\n  modifier onlyUpdaterManager() {\\n    require(msg.sender == address(updaterManager), \\\"!updaterManager\\\");\\n    _;\\n  }\\n\\n  // ============ External: Updater & UpdaterManager Configuration  ============\\n\\n  /**\\n   * @notice Set a new Updater\\n   * @param _updater the new Updater\\n   */\\n  function setUpdater(address _updater) external onlyUpdaterManager {\\n    _setUpdater(_updater);\\n  }\\n\\n  /**\\n   * @notice Set a new UpdaterManager contract\\n   * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\\n   * we will progressively decentralize by swapping the trusted contract with a new implementation\\n   * that implements Updater bonding & slashing, and rules for Updater selection & rotation\\n   * @param _updaterManager the new UpdaterManager contract\\n   */\\n  function setUpdaterManager(address _updaterManager) external onlyOwner {\\n    _setUpdaterManager(IUpdaterManager(_updaterManager));\\n  }\\n\\n  // ============ External Functions  ============\\n\\n  /**\\n   * @notice Dispatch the message it to the destination domain & recipient\\n   * @dev Format the message, insert its hash into Merkle tree,\\n   * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipientAddress Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes content of message\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external notFailed {\\n    require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \\\"msg too long\\\");\\n    // get the next nonce for the destination domain, then increment it\\n    uint32 _nonce = nonces[_destinationDomain];\\n    nonces[_destinationDomain] = _nonce + 1;\\n    // format the message into packed bytes\\n    bytes memory _message = Message.formatMessage(\\n      localDomain,\\n      bytes32(uint256(uint160(msg.sender))),\\n      _nonce,\\n      _destinationDomain,\\n      _recipientAddress,\\n      _messageBody\\n    );\\n    // insert the hashed message into the Merkle tree\\n    bytes32 _messageHash = keccak256(_message);\\n    tree.insert(_messageHash);\\n    // enqueue the new Merkle root after inserting the message\\n    queue.enqueue(root());\\n    // Emit Dispatch event with message information\\n    // note: leafIndex is count() - 1 since new leaf has already been inserted\\n    emit Dispatch(_messageHash, count() - 1, _destinationAndNonce(_destinationDomain, _nonce), committedRoot, _message);\\n  }\\n\\n  /**\\n   * @notice Submit a signature from the Updater \\\"notarizing\\\" a root,\\n   * which updates the Home contract's `committedRoot`,\\n   * and publishes the signature which will be relayed to Replica contracts\\n   * @dev emits Update event\\n   * @dev If _newRoot is not contained in the queue,\\n   * the Update is a fraudulent Improper Update, so\\n   * the Updater is slashed & Home is set to FAILED state\\n   * @param _committedRoot Current updated merkle root which the update is building off of\\n   * @param _newRoot New merkle root to update the contract state to\\n   * @param _signature Updater signature on `_committedRoot` and `_newRoot`\\n   */\\n  function update(\\n    bytes32 _committedRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) external notFailed {\\n    // check that the update is not fraudulent;\\n    // if fraud is detected, Updater is slashed & Home is set to FAILED state\\n    if (improperUpdate(_committedRoot, _newRoot, _signature)) return;\\n    // clear all of the intermediate roots contained in this update from the queue\\n    while (true) {\\n      bytes32 _next = queue.dequeue();\\n      if (_next == _newRoot) break;\\n    }\\n    // update the Home state with the latest signed root & emit event\\n    committedRoot = _newRoot;\\n    emit Update(localDomain, _committedRoot, _newRoot, _signature);\\n  }\\n\\n  /**\\n   * @notice Suggest an update for the Updater to sign and submit.\\n   * @dev If queue is empty, null bytes returned for both\\n   * (No update is necessary because no messages have been dispatched since the last update)\\n   * @return _committedRoot Latest root signed by the Updater\\n   * @return _new Latest enqueued Merkle root\\n   */\\n  function suggestUpdate() external view returns (bytes32 _committedRoot, bytes32 _new) {\\n    if (queue.length() != 0) {\\n      _committedRoot = committedRoot;\\n      _new = queue.lastItem();\\n    }\\n  }\\n\\n  // ============ Public Functions  ============\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   */\\n  function homeDomainHash() public view override returns (bytes32) {\\n    return _homeDomainHash(localDomain);\\n  }\\n\\n  /**\\n   * @notice Check if an Update is an Improper Update;\\n   * if so, slash the Updater and set the contract to FAILED state.\\n   *\\n   * An Improper Update is an update building off of the Home's `committedRoot`\\n   * for which the `_newRoot` does not currently exist in the Home's queue.\\n   * This would mean that message(s) that were not truly\\n   * dispatched on Home were falsely included in the signed root.\\n   *\\n   * An Improper Update will only be accepted as valid by the Replica\\n   * If an Improper Update is attempted on Home,\\n   * the Updater will be slashed immediately.\\n   * If an Improper Update is submitted to the Replica,\\n   * it should be relayed to the Home contract using this function\\n   * in order to slash the Updater with an Improper Update.\\n   *\\n   * An Improper Update submitted to the Replica is only valid\\n   * while the `_oldRoot` is still equal to the `committedRoot` on Home;\\n   * if the `committedRoot` on Home has already been updated with a valid Update,\\n   * then the Updater should be slashed with a Double Update.\\n   * @dev Reverts (and doesn't slash updater) if signature is invalid or\\n   * update not current\\n   * @param _oldRoot Old merkle tree root (should equal home's committedRoot)\\n   * @param _newRoot New merkle tree root\\n   * @param _signature Updater signature on `_oldRoot` and `_newRoot`\\n   * @return TRUE if update was an Improper Update (implying Updater was slashed)\\n   */\\n  function improperUpdate(\\n    bytes32 _oldRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) public notFailed returns (bool) {\\n    require(_isUpdaterSignature(_oldRoot, _newRoot, _signature), \\\"!updater sig\\\");\\n    require(_oldRoot == committedRoot, \\\"not a current update\\\");\\n    // if the _newRoot is not currently contained in the queue,\\n    // slash the Updater and set the contract to FAILED state\\n    if (!queue.contains(_newRoot)) {\\n      _fail();\\n      emit ImproperUpdate(_oldRoot, _newRoot, _signature);\\n      return true;\\n    }\\n    // if the _newRoot is contained in the queue,\\n    // this is not an improper update\\n    return false;\\n  }\\n\\n  // ============ Internal Functions  ============\\n\\n  /**\\n   * @notice Set the UpdaterManager\\n   * @param _updaterManager Address of the UpdaterManager\\n   */\\n  function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\\n    require(Address.isContract(address(_updaterManager)), \\\"!contract updaterManager\\\");\\n    updaterManager = IUpdaterManager(_updaterManager);\\n    emit NewUpdaterManager(address(_updaterManager));\\n  }\\n\\n  /**\\n   * @notice Slash the Updater and set contract state to FAILED\\n   * @dev Called when fraud is proven (Improper Update or Double Update)\\n   */\\n  function _fail() internal override {\\n    // set contract to FAILED\\n    _setFailed();\\n    // slash Updater\\n    updaterManager.slashUpdater(payable(msg.sender));\\n    emit UpdaterSlashed(updater, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Internal utility function that combines\\n   * `_destination` and `_nonce`.\\n   * @dev Both destination and nonce should be less than 2^32 - 1\\n   * @param _destination Domain of destination chain\\n   * @param _nonce Current nonce for given destination chain\\n   * @return Returns (`_destination` << 32) & `_nonce`\\n   */\\n  function _destinationAndNonce(uint32 _destination, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_destination) << 32) | _nonce;\\n  }\\n}\\n\",\"keccak256\":\"0xed74ddb383b57ad0dab108aff28c581c95a7f417044ea9da266b367b2edcc567\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\n\\n/**\\n * @title MerkleTreeManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a Merkle tree instance and\\n * exposes view functions for the tree.\\n */\\ncontract MerkleTreeManager {\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n  MerkleLib.Tree public tree;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Calculates and returns tree's current root\\n   */\\n  function root() public view returns (bytes32) {\\n    return tree.root();\\n  }\\n\\n  /**\\n   * @notice Returns the number of inserted leaves in the tree (current index)\\n   */\\n  function count() public view returns (uint256) {\\n    return tree.count;\\n  }\\n}\\n\",\"keccak256\":\"0x065fd34c72a6083074d108893aee8a27590423c11e2158cd005a5eab0369b0ab\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/NomadBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Message} from \\\"../libs/Message.sol\\\";\\n// ============ External Imports ============\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title NomadBase\\n * @author Illusory Systems Inc.\\n * @notice Shared utilities between Home and Replica.\\n */\\nabstract contract NomadBase is Initializable, OwnableUpgradeable {\\n  // ============ Enums ============\\n\\n  // States:\\n  //   0 - UnInitialized - before initialize function is called\\n  //   note: the contract is initialized at deploy time, so it should never be in this state\\n  //   1 - Active - as long as the contract has not become fraudulent\\n  //   2 - Failed - after a valid fraud proof has been submitted;\\n  //   contract will no longer accept updates or new messages\\n  enum States {\\n    UnInitialized,\\n    Active,\\n    Failed\\n  }\\n\\n  // ============ Immutable Variables ============\\n\\n  // Domain of chain on which the contract is deployed\\n  uint32 public immutable localDomain;\\n\\n  // ============ Public Variables ============\\n\\n  // Address of bonded Updater\\n  address public updater;\\n  // Current state of contract\\n  States public state;\\n  // The latest root that has been signed by the Updater\\n  bytes32 public committedRoot;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[47] private __GAP;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when update is made on Home\\n   * or unconfirmed update root is submitted on Replica\\n   * @param homeDomain Domain of home contract\\n   * @param oldRoot Old merkle root\\n   * @param newRoot New merkle root\\n   * @param signature Updater's signature on `oldRoot` and `newRoot`\\n   */\\n  event Update(uint32 indexed homeDomain, bytes32 indexed oldRoot, bytes32 indexed newRoot, bytes signature);\\n\\n  /**\\n   * @notice Emitted when proof of a double update is submitted,\\n   * which sets the contract to FAILED state\\n   * @param oldRoot Old root shared between two conflicting updates\\n   * @param newRoot Array containing two conflicting new roots\\n   * @param signature Signature on `oldRoot` and `newRoot`[0]\\n   * @param signature2 Signature on `oldRoot` and `newRoot`[1]\\n   */\\n  event DoubleUpdate(bytes32 oldRoot, bytes32[2] newRoot, bytes signature, bytes signature2);\\n\\n  /**\\n   * @notice Emitted when Updater is rotated\\n   * @param oldUpdater The address of the old updater\\n   * @param newUpdater The address of the new updater\\n   */\\n  event NewUpdater(address oldUpdater, address newUpdater);\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Ensures that contract state != FAILED when the function is called\\n   */\\n  modifier notFailed() {\\n    require(state != States.Failed, \\\"failed state\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  constructor(uint32 _localDomain) {\\n    localDomain = _localDomain;\\n  }\\n\\n  // ============ Initializer ============\\n\\n  function __NomadBase_initialize(address _updater) internal initializer {\\n    __Ownable_init();\\n    _setUpdater(_updater);\\n    state = States.Active;\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Called by external agent. Checks that signatures on two sets of\\n   * roots are valid and that the new roots conflict with each other. If both\\n   * cases hold true, the contract is failed and a `DoubleUpdate` event is\\n   * emitted.\\n   * @dev When `fail()` is called on Home, updater is slashed.\\n   * @param _oldRoot Old root shared between two conflicting updates\\n   * @param _newRoot Array containing two conflicting new roots\\n   * @param _signature Signature on `_oldRoot` and `_newRoot`[0]\\n   * @param _signature2 Signature on `_oldRoot` and `_newRoot`[1]\\n   */\\n  function doubleUpdate(\\n    bytes32 _oldRoot,\\n    bytes32[2] calldata _newRoot,\\n    bytes calldata _signature,\\n    bytes calldata _signature2\\n  ) external notFailed {\\n    if (\\n      NomadBase._isUpdaterSignature(_oldRoot, _newRoot[0], _signature) &&\\n      NomadBase._isUpdaterSignature(_oldRoot, _newRoot[1], _signature2) &&\\n      _newRoot[0] != _newRoot[1]\\n    ) {\\n      _fail();\\n      emit DoubleUpdate(_oldRoot, _newRoot, _signature, _signature2);\\n    }\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   */\\n  function homeDomainHash() public view virtual returns (bytes32);\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   * @param _homeDomain the Home domain to hash\\n   */\\n  function _homeDomainHash(uint32 _homeDomain) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_homeDomain, \\\"NOMAD\\\"));\\n  }\\n\\n  /**\\n   * @notice Set contract state to FAILED\\n   * @dev Called when a valid fraud proof is submitted\\n   */\\n  function _setFailed() internal {\\n    state = States.Failed;\\n  }\\n\\n  /**\\n   * @notice Moves the contract into failed state\\n   * @dev Called when fraud is proven\\n   * (Double Update is submitted on Home or Replica,\\n   * or Improper Update is submitted on Home)\\n   */\\n  function _fail() internal virtual;\\n\\n  /**\\n   * @notice Set the Updater\\n   * @param _newUpdater Address of the new Updater\\n   */\\n  function _setUpdater(address _newUpdater) internal {\\n    address _oldUpdater = updater;\\n    updater = _newUpdater;\\n    emit NewUpdater(_oldUpdater, _newUpdater);\\n  }\\n\\n  /**\\n   * @notice Checks that signature was signed by Updater\\n   * @param _oldRoot Old merkle root\\n   * @param _newRoot New merkle root\\n   * @param _signature Signature on `_oldRoot` and `_newRoot`\\n   * @return TRUE iff signature is valid signed by updater\\n   **/\\n  function _isUpdaterSignature(\\n    bytes32 _oldRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) internal view returns (bool) {\\n    bytes32 _digest = keccak256(abi.encodePacked(homeDomainHash(), _oldRoot, _newRoot));\\n    _digest = ECDSA.toEthSignedMessageHash(_digest);\\n    return (ECDSA.recover(_digest, _signature) == updater);\\n  }\\n}\\n\",\"keccak256\":\"0x483124ff79dba668241e1707c53b20fa8b80ba97536eebf002060cf490b3b762\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {QueueLib} from \\\"../libs/Queue.sol\\\";\\n// ============ External Imports ============\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title QueueManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a queue instance and\\n * exposes view functions for the queue.\\n **/\\ncontract QueueManager is Initializable {\\n  // ============ Libraries ============\\n\\n  using QueueLib for QueueLib.Queue;\\n  QueueLib.Queue internal queue;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ============ Initializer ============\\n\\n  function __QueueManager_initialize() internal initializer {\\n    queue.initialize();\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Returns number of elements in queue\\n   */\\n  function queueLength() external view returns (uint256) {\\n    return queue.length();\\n  }\\n\\n  /**\\n   * @notice Returns TRUE iff `_item` is in the queue\\n   */\\n  function queueContains(bytes32 _item) external view returns (bool) {\\n    return queue.contains(_item);\\n  }\\n\\n  /**\\n   * @notice Returns last item enqueued to the queue\\n   */\\n  function queueEnd() external view returns (bytes32) {\\n    return queue.lastItem();\\n  }\\n}\\n\",\"keccak256\":\"0xb8076aba530cbc7d1e215fdb7272ff93aec1c0e96ffaa44c1476c2d15cda044b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Replica.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Version0} from \\\"./Version0.sol\\\";\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\n// ============ External Imports ============\\n// import {TypedMemView} from \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\nimport {TypedMemView} from \\\"../libs/TypedMemView.sol\\\";\\n\\n/**\\n * @title Replica\\n * @author Illusory Systems Inc.\\n * @notice Track root updates on Home,\\n * prove and dispatch messages to end recipients.\\n */\\ncontract Replica is Version0, NomadBase {\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using Message for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // Status of Message:\\n  //   0 - None - message has not been proven or processed\\n  //   1 - Proven - message inclusion proof has been validated\\n  //   2 - Processed - message has been dispatched to recipient\\n  enum MessageStatus {\\n    None,\\n    Proven,\\n    Processed\\n  }\\n\\n  // ============ Immutables ============\\n\\n  // Minimum gas for message processing\\n  uint256 public immutable PROCESS_GAS;\\n  // Reserved gas (to ensure tx completes in case message processing runs out)\\n  uint256 public immutable RESERVE_GAS;\\n\\n  // ============ Public Storage ============\\n\\n  // Domain of home chain\\n  uint32 public remoteDomain;\\n  // Number of seconds to wait before root becomes confirmable\\n  uint256 public optimisticSeconds;\\n  // re-entrancy guard\\n  uint8 private entered;\\n  // Mapping of roots to allowable confirmation times\\n  mapping(bytes32 => uint256) public confirmAt;\\n  // Mapping of message leaves to MessageStatus\\n  mapping(bytes32 => MessageStatus) public messages;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[45] private __GAP;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when message is processed\\n   * @param messageHash Hash of message that failed to process\\n   * @param success TRUE if the call was executed successfully, FALSE if the call reverted\\n   * @param returnData the return data from the external call\\n   */\\n  event Process(bytes32 indexed messageHash, bool indexed success, bytes indexed returnData);\\n\\n  /**\\n   * @notice Emitted when the value for optimisticTimeout is set\\n   * @param timeout The new value for optimistic timeout\\n   */\\n  event SetOptimisticTimeout(uint256 timeout);\\n\\n  /**\\n   * @notice Emitted when a root's confirmation is modified by governance\\n   * @param root The root for which confirmAt has been set\\n   * @param previousConfirmAt The previous value of confirmAt\\n   * @param newConfirmAt The new value of confirmAt\\n   */\\n  event SetConfirmation(bytes32 indexed root, uint256 previousConfirmAt, uint256 newConfirmAt);\\n\\n  // ============ Constructor ============\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(\\n    uint32 _localDomain,\\n    uint256 _processGas,\\n    uint256 _reserveGas\\n  ) NomadBase(_localDomain) {\\n    require(_processGas >= 850_000, \\\"!process gas\\\");\\n    require(_reserveGas >= 15_000, \\\"!reserve gas\\\");\\n    PROCESS_GAS = _processGas;\\n    RESERVE_GAS = _reserveGas;\\n  }\\n\\n  // ============ Initializer ============\\n\\n  function initialize(\\n    uint32 _remoteDomain,\\n    address _updater,\\n    bytes32 _committedRoot,\\n    uint256 _optimisticSeconds\\n  ) public initializer {\\n    __NomadBase_initialize(_updater);\\n    // set storage variables\\n    entered = 1;\\n    remoteDomain = _remoteDomain;\\n    committedRoot = _committedRoot;\\n    confirmAt[_committedRoot] = 1;\\n    optimisticSeconds = _optimisticSeconds;\\n    emit SetOptimisticTimeout(_optimisticSeconds);\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Called by external agent. Submits the signed update's new root,\\n   * marks root's allowable confirmation time, and emits an `Update` event.\\n   * @dev Reverts if update doesn't build off latest committedRoot\\n   * or if signature is invalid.\\n   * @param _oldRoot Old merkle root\\n   * @param _newRoot New merkle root\\n   * @param _signature Updater's signature on `_oldRoot` and `_newRoot`\\n   */\\n  function update(\\n    bytes32 _oldRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) external notFailed {\\n    // ensure that update is building off the last submitted root\\n    require(_oldRoot == committedRoot, \\\"not current update\\\");\\n    // validate updater signature\\n    require(_isUpdaterSignature(_oldRoot, _newRoot, _signature), \\\"!updater sig\\\");\\n    // Hook for future use\\n    _beforeUpdate();\\n    // set the new root's confirmation timer\\n    confirmAt[_newRoot] = block.timestamp + optimisticSeconds;\\n    // update committedRoot\\n    committedRoot = _newRoot;\\n    emit Update(remoteDomain, _oldRoot, _newRoot, _signature);\\n  }\\n\\n  /**\\n   * @notice First attempts to prove the validity of provided formatted\\n   * `message`. If the message is successfully proven, then tries to process\\n   * message.\\n   * @dev Reverts if `prove` call returns false\\n   * @param _message Formatted message (refer to NomadBase.sol Message library)\\n   * @param _proof Merkle proof of inclusion for message's leaf\\n   * @param _index Index of leaf in home's merkle tree\\n   */\\n  function proveAndProcess(\\n    bytes memory _message,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) external {\\n    require(prove(keccak256(_message), _proof, _index), \\\"!prove\\\");\\n    process(_message);\\n  }\\n\\n  /**\\n   * @notice Given formatted message, attempts to dispatch\\n   * message payload to end recipient.\\n   * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)\\n   * Reverts if formatted message's destination domain is not the Replica's domain,\\n   * if message has not been proven,\\n   * or if not enough gas is provided for the dispatch transaction.\\n   * @param _message Formatted message\\n   * @return _success TRUE iff dispatch transaction succeeded\\n   */\\n  function process(bytes memory _message) public returns (bool _success) {\\n    bytes29 _m = _message.ref(0);\\n    // ensure message was meant for this domain\\n    require(_m.destination() == localDomain, \\\"!destination\\\");\\n    // ensure message has been proven\\n    bytes32 _messageHash = _m.keccak();\\n    require(messages[_messageHash] == MessageStatus.Proven, \\\"!proven\\\");\\n    // check re-entrancy guard\\n    require(entered == 1, \\\"!reentrant\\\");\\n    entered = 0;\\n    // update message status as processed\\n    messages[_messageHash] = MessageStatus.Processed;\\n    // A call running out of gas TYPICALLY errors the whole tx. We want to\\n    // a) ensure the call has a sufficient amount of gas to make a\\n    //    meaningful state change.\\n    // b) ensure that if the subcall runs out of gas, that the tx as a whole\\n    //    does not revert (i.e. we still mark the message processed)\\n    // To do this, we require that we have enough gas to process\\n    // and still return. We then delegate only the minimum processing gas.\\n    require(gasleft() >= PROCESS_GAS + RESERVE_GAS, \\\"!gas\\\");\\n    // get the message recipient\\n    address _recipient = _m.recipientAddress();\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    uint256 _maxCopy = 256;\\n    uint256 _gas = PROCESS_GAS;\\n    // allocate memory for returndata\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    bytes memory _calldata = abi.encodeWithSignature(\\n      \\\"handle(uint32,uint32,bytes32,bytes)\\\",\\n      _m.origin(),\\n      _m.nonce(),\\n      _m.sender(),\\n      _m.body().clone()\\n    );\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := call(\\n        _gas, // gas\\n        _recipient, // recipient\\n        0, // ether value\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    // emit process results\\n    emit Process(_messageHash, _success, _returnData);\\n    // reset re-entrancy guard\\n    entered = 1;\\n  }\\n\\n  // ============ External Owner Functions ============\\n\\n  /**\\n   * @notice Set optimistic timeout period for new roots\\n   * @dev Only callable by owner (Governance)\\n   * @param _optimisticSeconds New optimistic timeout period\\n   */\\n  function setOptimisticTimeout(uint256 _optimisticSeconds) external onlyOwner {\\n    optimisticSeconds = _optimisticSeconds;\\n    emit SetOptimisticTimeout(_optimisticSeconds);\\n  }\\n\\n  /**\\n   * @notice Set Updater role\\n   * @dev MUST ensure that all roots signed by previous Updater have\\n   * been relayed before calling. Only callable by owner (Governance)\\n   * @param _updater New Updater\\n   */\\n  function setUpdater(address _updater) external onlyOwner {\\n    _setUpdater(_updater);\\n  }\\n\\n  /**\\n   * @notice Set confirmAt for a given root\\n   * @dev To be used if in the case that fraud is proven\\n   * and roots need to be deleted / added. Only callable by owner (Governance)\\n   * @param _root The root for which to modify confirm time\\n   * @param _confirmAt The new confirmation time. Set to 0 to \\\"delete\\\" a root.\\n   */\\n  function setConfirmation(bytes32 _root, uint256 _confirmAt) external onlyOwner {\\n    uint256 _previousConfirmAt = confirmAt[_root];\\n    confirmAt[_root] = _confirmAt;\\n    emit SetConfirmation(_root, _previousConfirmAt, _confirmAt);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Check that the root has been submitted\\n   * and that the optimistic timeout period has expired,\\n   * meaning the root can be processed\\n   * @param _root the Merkle root, submitted in an update, to check\\n   * @return TRUE iff root has been submitted & timeout has expired\\n   */\\n  function acceptableRoot(bytes32 _root) public view returns (bool) {\\n    uint256 _time = confirmAt[_root];\\n    if (_time == 0) {\\n      return false;\\n    }\\n    return block.timestamp >= _time;\\n  }\\n\\n  /**\\n   * @notice Attempts to prove the validity of message given its leaf, the\\n   * merkle proof of inclusion for the leaf, and the index of the leaf.\\n   * @dev Reverts if message's MessageStatus != None (i.e. if message was\\n   * already proven or processed)\\n   * @dev For convenience, we allow proving against any previous root.\\n   * This means that witnesses never need to be updated for the new root\\n   * @param _leaf Leaf of message to prove\\n   * @param _proof Merkle proof of inclusion for leaf\\n   * @param _index Index of leaf in home's merkle tree\\n   * @return Returns true if proof was valid and `prove` call succeeded\\n   **/\\n  function prove(\\n    bytes32 _leaf,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) public returns (bool) {\\n    // ensure that message has not been proven or processed\\n    require(messages[_leaf] == MessageStatus.None, \\\"!MessageStatus.None\\\");\\n    // calculate the expected root based on the proof\\n    bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);\\n    // if the root is valid, change status to Proven\\n    if (acceptableRoot(_calculatedRoot)) {\\n      messages[_leaf] = MessageStatus.Proven;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   */\\n  function homeDomainHash() public view override returns (bytes32) {\\n    return _homeDomainHash(remoteDomain);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Moves the contract into failed state\\n   * @dev Called when a Double Update is submitted\\n   */\\n  function _fail() internal override {\\n    _setFailed();\\n  }\\n\\n  /// @notice Hook for potential future use\\n  // solhint-disable-next-line no-empty-blocks\\n  function _beforeUpdate() internal {}\\n}\\n\",\"keccak256\":\"0xae3f34ab4459a7647225c83f82a0816c33c77c5348e8d0f7c7f6f617c391e993\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title Version0\\n * @notice Version getter for contracts\\n **/\\ncontract Version0 {\\n  uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0x452c436ab052150c2f90f501f82d0049e08dcf87c061130a0769cf635ce681b4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/XAppConnectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Home} from \\\"./Home.sol\\\";\\nimport {Replica} from \\\"./Replica.sol\\\";\\nimport {TypeCasts} from \\\"../libs/TypeCasts.sol\\\";\\n// ============ External Imports ============\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title XAppConnectionManager\\n * @author Illusory Systems Inc.\\n * @notice Manages a registry of local Replica contracts\\n * for remote Home domains. Accepts Watcher signatures\\n * to un-enroll Replicas attached to fraudulent remote Homes\\n */\\ncontract XAppConnectionManager is Ownable {\\n  // ============ Public Storage ============\\n\\n  // Home contract\\n  Home public home;\\n  // local Replica address => remote Home domain\\n  mapping(address => uint32) public replicaToDomain;\\n  // remote Home domain => local Replica address\\n  mapping(uint32 => address) public domainToReplica;\\n  // watcher address => replica remote domain => has/doesn't have permission\\n  mapping(address => mapping(uint32 => bool)) private watcherPermissions;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when a new Replica is enrolled / added\\n   * @param domain the remote domain of the Home contract for the Replica\\n   * @param replica the address of the Replica\\n   */\\n  event ReplicaEnrolled(uint32 indexed domain, address replica);\\n\\n  /**\\n   * @notice Emitted when a new Replica is un-enrolled / removed\\n   * @param domain the remote domain of the Home contract for the Replica\\n   * @param replica the address of the Replica\\n   */\\n  event ReplicaUnenrolled(uint32 indexed domain, address replica);\\n\\n  /**\\n   * @notice Emitted when Watcher permissions are changed\\n   * @param domain the remote domain of the Home contract for the Replica\\n   * @param watcher the address of the Watcher\\n   * @param access TRUE if the Watcher was given permissions, FALSE if permissions were removed\\n   */\\n  event WatcherPermissionSet(uint32 indexed domain, address watcher, bool access);\\n\\n  // ============ Modifiers ============\\n\\n  modifier onlyReplica() {\\n    require(isReplica(msg.sender), \\\"!replica\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() Ownable() {}\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Un-Enroll a replica contract\\n   * in the case that fraud was detected on the Home\\n   * @dev in the future, if fraud occurs on the Home contract,\\n   * the Watcher will submit their signature directly to the Home\\n   * and it can be relayed to all remote chains to un-enroll the Replicas\\n   * @param _domain the remote domain of the Home contract for the Replica\\n   * @param _updater the address of the Updater for the Home contract (also stored on Replica)\\n   * @param _signature signature of watcher on (domain, replica address, updater address)\\n   */\\n  function unenrollReplica(\\n    uint32 _domain,\\n    bytes32 _updater,\\n    bytes memory _signature\\n  ) external {\\n    // ensure that the replica is currently set\\n    address _replica = domainToReplica[_domain];\\n    require(_replica != address(0), \\\"!replica exists\\\");\\n    // ensure that the signature is on the proper updater\\n    require(Replica(_replica).updater() == TypeCasts.bytes32ToAddress(_updater), \\\"!current updater\\\");\\n    // get the watcher address from the signature\\n    // and ensure that the watcher has permission to un-enroll this replica\\n    address _watcher = _recoverWatcherFromSig(_domain, TypeCasts.addressToBytes32(_replica), _updater, _signature);\\n    require(watcherPermissions[_watcher][_domain], \\\"!valid watcher\\\");\\n    // remove the replica from mappings\\n    _unenrollReplica(_replica);\\n  }\\n\\n  /**\\n   * @notice Set the address of the local Home contract\\n   * @param _home the address of the local Home contract\\n   */\\n  function setHome(address _home) external onlyOwner {\\n    home = Home(_home);\\n  }\\n\\n  /**\\n   * @notice Allow Owner to enroll Replica contract\\n   * @param _replica the address of the Replica\\n   * @param _domain the remote domain of the Home contract for the Replica\\n   */\\n  function ownerEnrollReplica(address _replica, uint32 _domain) external onlyOwner {\\n    // un-enroll any existing replica\\n    _unenrollReplica(_replica);\\n    // add replica and domain to two-way mapping\\n    replicaToDomain[_replica] = _domain;\\n    domainToReplica[_domain] = _replica;\\n    emit ReplicaEnrolled(_domain, _replica);\\n  }\\n\\n  /**\\n   * @notice Allow Owner to un-enroll Replica contract\\n   * @param _replica the address of the Replica\\n   */\\n  function ownerUnenrollReplica(address _replica) external onlyOwner {\\n    _unenrollReplica(_replica);\\n  }\\n\\n  /**\\n   * @notice Allow Owner to set Watcher permissions for a Replica\\n   * @param _watcher the address of the Watcher\\n   * @param _domain the remote domain of the Home contract for the Replica\\n   * @param _access TRUE to give the Watcher permissions, FALSE to remove permissions\\n   */\\n  function setWatcherPermission(\\n    address _watcher,\\n    uint32 _domain,\\n    bool _access\\n  ) external onlyOwner {\\n    watcherPermissions[_watcher][_domain] = _access;\\n    emit WatcherPermissionSet(_domain, _watcher, _access);\\n  }\\n\\n  /**\\n   * @notice Query local domain from Home\\n   * @return local domain\\n   */\\n  function localDomain() external view returns (uint32) {\\n    return home.localDomain();\\n  }\\n\\n  /**\\n   * @notice Get access permissions for the watcher on the domain\\n   * @param _watcher the address of the watcher\\n   * @param _domain the domain to check for watcher permissions\\n   * @return TRUE iff _watcher has permission to un-enroll replicas on _domain\\n   */\\n  function watcherPermission(address _watcher, uint32 _domain) external view returns (bool) {\\n    return watcherPermissions[_watcher][_domain];\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Check whether _replica is enrolled\\n   * @param _replica the replica to check for enrollment\\n   * @return TRUE iff _replica is enrolled\\n   */\\n  function isReplica(address _replica) public view returns (bool) {\\n    return replicaToDomain[_replica] != 0;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Remove the replica from the two-way mappings\\n   * @param _replica replica to un-enroll\\n   */\\n  function _unenrollReplica(address _replica) internal {\\n    uint32 _currentDomain = replicaToDomain[_replica];\\n    domainToReplica[_currentDomain] = address(0);\\n    replicaToDomain[_replica] = 0;\\n    emit ReplicaUnenrolled(_currentDomain, _replica);\\n  }\\n\\n  /**\\n   * @notice Get the Watcher address from the provided signature\\n   * @return address of watcher that signed\\n   */\\n  function _recoverWatcherFromSig(\\n    uint32 _domain,\\n    bytes32 _replica,\\n    bytes32 _updater,\\n    bytes memory _signature\\n  ) internal view returns (address) {\\n    bytes32 _homeDomainHash = Replica(TypeCasts.bytes32ToAddress(_replica)).homeDomainHash();\\n    bytes32 _digest = keccak256(abi.encodePacked(_homeDomainHash, _domain, _updater));\\n    _digest = ECDSA.toEthSignedMessageHash(_digest);\\n    return ECDSA.recover(_digest, _signature);\\n  }\\n}\\n\",\"keccak256\":\"0x2d7cabe7a136d706de3a32b93f73f03a34d47bf7d3ddac61c64a928685e822c8\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1b61d18d09fe4a2aeda10ca965375a2ea376d9f5ed3e7e868678e674056df447\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/interfaces/IUpdaterManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IUpdaterManager {\\n  function slashUpdater(address payable _reporter) external;\\n\\n  function updater() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb822d426d29a262616a6f2405f7a3b4d01bb2216a9d13fc478a165998bb08e1e\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\n\\n/**\\n * @title MerkleLib\\n * @author Illusory Systems Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n  uint256 internal constant TREE_DEPTH = 32;\\n  uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n  /**\\n   * @notice Struct representing incremental merkle tree. Contains current\\n   * branch and the number of inserted leaves in the tree.\\n   **/\\n  struct Tree {\\n    bytes32[TREE_DEPTH] branch;\\n    uint256 count;\\n  }\\n\\n  /**\\n   * @notice Inserts `_node` into merkle tree\\n   * @dev Reverts if tree is full\\n   * @param _node Element to insert into tree\\n   **/\\n  function insert(Tree storage _tree, bytes32 _node) internal {\\n    require(_tree.count < MAX_LEAVES, \\\"merkle tree full\\\");\\n\\n    _tree.count += 1;\\n    uint256 size = _tree.count;\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      if ((size & 1) == 1) {\\n        _tree.branch[i] = _node;\\n        return;\\n      }\\n      _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\n      size /= 2;\\n    }\\n    // As the loop should always end prematurely with the `return` statement,\\n    // this code should be unreachable. We assert `false` just to be safe.\\n    assert(false);\\n  }\\n\\n  /**\\n   * @notice Calculates and returns`_tree`'s current root given array of zero\\n   * hashes\\n   * @param _zeroes Array of zero hashes\\n   * @return _current Calculated root of `_tree`\\n   **/\\n  function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\n    internal\\n    view\\n    returns (bytes32 _current)\\n  {\\n    uint256 _index = _tree.count;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _tree.branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculates and returns`_tree`'s current root\\n  function root(Tree storage _tree) internal view returns (bytes32) {\\n    return rootWithCtx(_tree, zeroHashes());\\n  }\\n\\n  /// @notice Returns array of TREE_DEPTH zero hashes\\n  /// @return _zeroes Array of TREE_DEPTH zero hashes\\n  function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\\n    _zeroes[0] = Z_0;\\n    _zeroes[1] = Z_1;\\n    _zeroes[2] = Z_2;\\n    _zeroes[3] = Z_3;\\n    _zeroes[4] = Z_4;\\n    _zeroes[5] = Z_5;\\n    _zeroes[6] = Z_6;\\n    _zeroes[7] = Z_7;\\n    _zeroes[8] = Z_8;\\n    _zeroes[9] = Z_9;\\n    _zeroes[10] = Z_10;\\n    _zeroes[11] = Z_11;\\n    _zeroes[12] = Z_12;\\n    _zeroes[13] = Z_13;\\n    _zeroes[14] = Z_14;\\n    _zeroes[15] = Z_15;\\n    _zeroes[16] = Z_16;\\n    _zeroes[17] = Z_17;\\n    _zeroes[18] = Z_18;\\n    _zeroes[19] = Z_19;\\n    _zeroes[20] = Z_20;\\n    _zeroes[21] = Z_21;\\n    _zeroes[22] = Z_22;\\n    _zeroes[23] = Z_23;\\n    _zeroes[24] = Z_24;\\n    _zeroes[25] = Z_25;\\n    _zeroes[26] = Z_26;\\n    _zeroes[27] = Z_27;\\n    _zeroes[28] = Z_28;\\n    _zeroes[29] = Z_29;\\n    _zeroes[30] = Z_30;\\n    _zeroes[31] = Z_31;\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the merkle root for the given leaf\\n   * `_item`, a merkle branch, and the index of `_item` in the tree.\\n   * @param _item Merkle leaf\\n   * @param _branch Merkle proof\\n   * @param _index Index of `_item` in tree\\n   * @return _current Calculated merkle root\\n   **/\\n  function branchRoot(\\n    bytes32 _item,\\n    bytes32[TREE_DEPTH] memory _branch,\\n    uint256 _index\\n  ) internal pure returns (bytes32 _current) {\\n    _current = _item;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _next));\\n      }\\n    }\\n  }\\n\\n  // keccak256 zero hashes\\n  bytes32 internal constant Z_0 = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n  bytes32 internal constant Z_1 = hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n  bytes32 internal constant Z_2 = hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n  bytes32 internal constant Z_3 = hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n  bytes32 internal constant Z_4 = hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n  bytes32 internal constant Z_5 = hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n  bytes32 internal constant Z_6 = hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n  bytes32 internal constant Z_7 = hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n  bytes32 internal constant Z_8 = hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n  bytes32 internal constant Z_9 = hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n  bytes32 internal constant Z_10 = hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n  bytes32 internal constant Z_11 = hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n  bytes32 internal constant Z_12 = hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n  bytes32 internal constant Z_13 = hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n  bytes32 internal constant Z_14 = hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n  bytes32 internal constant Z_15 = hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n  bytes32 internal constant Z_16 = hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n  bytes32 internal constant Z_17 = hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n  bytes32 internal constant Z_18 = hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n  bytes32 internal constant Z_19 = hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n  bytes32 internal constant Z_20 = hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n  bytes32 internal constant Z_21 = hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n  bytes32 internal constant Z_22 = hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n  bytes32 internal constant Z_23 = hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n  bytes32 internal constant Z_24 = hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n  bytes32 internal constant Z_25 = hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n  bytes32 internal constant Z_26 = hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n  bytes32 internal constant Z_27 = hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n  bytes32 internal constant Z_28 = hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n  bytes32 internal constant Z_29 = hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n  bytes32 internal constant Z_30 = hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n  bytes32 internal constant Z_31 = hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n}\\n\",\"keccak256\":\"0x6930854c41562abb58038f736a23324454364e8ff394d86a2d807500d77ee296\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\n\\nimport \\\"./TypedMemView.sol\\\";\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @author Illusory Systems Inc.\\n * @notice Library for formatted messages used by Home and Replica.\\n **/\\nlibrary Message {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // Number of bytes in formatted message before `body` field\\n  uint256 internal constant PREFIX_LENGTH = 76;\\n\\n  /**\\n   * @notice Returns formatted (packed) message with provided fields\\n   * @param _originDomain Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes of message body\\n   * @return Formatted message\\n   **/\\n  function formatMessage(\\n    uint32 _originDomain,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destinationDomain,\\n    bytes32 _recipient,\\n    bytes memory _messageBody\\n  ) internal pure returns (bytes memory) {\\n    return abi.encodePacked(_originDomain, _sender, _nonce, _destinationDomain, _recipient, _messageBody);\\n  }\\n\\n  /**\\n   * @notice Returns leaf of formatted message with provided fields.\\n   * @param _origin Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce number\\n   * @param _destination Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _body Raw bytes of message body\\n   * @return Leaf (hash) of formatted message\\n   **/\\n  function messageHash(\\n    uint32 _origin,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bytes memory _body\\n  ) internal pure returns (bytes32) {\\n    return keccak256(formatMessage(_origin, _sender, _nonce, _destination, _recipient, _body));\\n  }\\n\\n  /// @notice Returns message's origin field\\n  function origin(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(0, 4));\\n  }\\n\\n  /// @notice Returns message's sender field\\n  function sender(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(4, 32);\\n  }\\n\\n  /// @notice Returns message's nonce field\\n  function nonce(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(36, 4));\\n  }\\n\\n  /// @notice Returns message's destination field\\n  function destination(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(40, 4));\\n  }\\n\\n  /// @notice Returns message's recipient field as bytes32\\n  function recipient(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(44, 32);\\n  }\\n\\n  /// @notice Returns message's recipient field as an address\\n  function recipientAddress(bytes29 _message) internal pure returns (address) {\\n    return TypeCasts.bytes32ToAddress(recipient(_message));\\n  }\\n\\n  /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\n  function body(bytes29 _message) internal pure returns (bytes29) {\\n    return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\n  }\\n\\n  function leaf(bytes29 _message) internal view returns (bytes32) {\\n    return\\n      messageHash(\\n        origin(_message),\\n        sender(_message),\\n        nonce(_message),\\n        destination(_message),\\n        recipient(_message),\\n        TypedMemView.clone(body(_message))\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x3590b97ecefc801807a68f7aa6cb15c27d5bf825a677ffbe70df0bf255d4c86b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title QueueLib\\n * @author Illusory Systems Inc.\\n * @notice Library containing queue struct and operations for queue used by\\n * Home and Replica.\\n **/\\nlibrary QueueLib {\\n  /**\\n   * @notice Queue struct\\n   * @dev Internally keeps track of the `first` and `last` elements through\\n   * indices and a mapping of indices to enqueued elements.\\n   **/\\n  struct Queue {\\n    uint128 first;\\n    uint128 last;\\n    mapping(uint256 => bytes32) queue;\\n  }\\n\\n  /**\\n   * @notice Initializes the queue\\n   * @dev Empty state denoted by _q.first > q._last. Queue initialized\\n   * with _q.first = 1 and _q.last = 0.\\n   **/\\n  function initialize(Queue storage _q) internal {\\n    if (_q.first == 0) {\\n      _q.first = 1;\\n    }\\n  }\\n\\n  /**\\n   * @notice Enqueues a single new element\\n   * @param _item New element to be enqueued\\n   * @return _last Index of newly enqueued element\\n   **/\\n  function enqueue(Queue storage _q, bytes32 _item) internal returns (uint128 _last) {\\n    _last = _q.last + 1;\\n    _q.last = _last;\\n    if (_item != bytes32(0)) {\\n      // saves gas if we're queueing 0\\n      _q.queue[_last] = _item;\\n    }\\n  }\\n\\n  /**\\n   * @notice Dequeues element at front of queue\\n   * @dev Removes dequeued element from storage\\n   * @return _item Dequeued element\\n   **/\\n  function dequeue(Queue storage _q) internal returns (bytes32 _item) {\\n    uint128 _last = _q.last;\\n    uint128 _first = _q.first;\\n    require(_length(_last, _first) != 0, \\\"Empty\\\");\\n    _item = _q.queue[_first];\\n    if (_item != bytes32(0)) {\\n      // saves gas if we're dequeuing 0\\n      delete _q.queue[_first];\\n    }\\n    _q.first = _first + 1;\\n  }\\n\\n  /**\\n   * @notice Batch enqueues several elements\\n   * @param _items Array of elements to be enqueued\\n   * @return _last Index of last enqueued element\\n   **/\\n  function enqueue(Queue storage _q, bytes32[] memory _items) internal returns (uint128 _last) {\\n    _last = _q.last;\\n    for (uint256 i = 0; i < _items.length; i += 1) {\\n      _last += 1;\\n      bytes32 _item = _items[i];\\n      if (_item != bytes32(0)) {\\n        _q.queue[_last] = _item;\\n      }\\n    }\\n    _q.last = _last;\\n  }\\n\\n  /**\\n   * @notice Batch dequeues `_number` elements\\n   * @dev Reverts if `_number` > queue length\\n   * @param _number Number of elements to dequeue\\n   * @return Array of dequeued elements\\n   **/\\n  function dequeue(Queue storage _q, uint256 _number) internal returns (bytes32[] memory) {\\n    uint128 _last = _q.last;\\n    uint128 _first = _q.first;\\n    // Cannot underflow unless state is corrupted\\n    require(_length(_last, _first) >= _number, \\\"Insufficient\\\");\\n\\n    bytes32[] memory _items = new bytes32[](_number);\\n\\n    for (uint256 i = 0; i < _number; i++) {\\n      _items[i] = _q.queue[_first];\\n      delete _q.queue[_first];\\n      _first++;\\n    }\\n    _q.first = _first;\\n    return _items;\\n  }\\n\\n  /**\\n   * @notice Returns true if `_item` is in the queue and false if otherwise\\n   * @dev Linearly scans from _q.first to _q.last looking for `_item`\\n   * @param _item Item being searched for in queue\\n   * @return True if `_item` currently exists in queue, false if otherwise\\n   **/\\n  function contains(Queue storage _q, bytes32 _item) internal view returns (bool) {\\n    for (uint256 i = _q.first; i <= _q.last; i++) {\\n      if (_q.queue[i] == _item) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /// @notice Returns last item in queue\\n  /// @dev Returns bytes32(0) if queue empty\\n  function lastItem(Queue storage _q) internal view returns (bytes32) {\\n    return _q.queue[_q.last];\\n  }\\n\\n  /// @notice Returns element at front of queue without removing element\\n  /// @dev Reverts if queue is empty\\n  function peek(Queue storage _q) internal view returns (bytes32 _item) {\\n    require(!isEmpty(_q), \\\"Empty\\\");\\n    _item = _q.queue[_q.first];\\n  }\\n\\n  /// @notice Returns true if queue is empty and false if otherwise\\n  function isEmpty(Queue storage _q) internal view returns (bool) {\\n    return _q.last < _q.first;\\n  }\\n\\n  /// @notice Returns number of elements in queue\\n  function length(Queue storage _q) internal view returns (uint256) {\\n    uint128 _last = _q.last;\\n    uint128 _first = _q.first;\\n    // Cannot underflow unless state is corrupted\\n    return _length(_last, _first);\\n  }\\n\\n  /// @notice Returns number of elements between `_last` and `_first` (used internally)\\n  function _length(uint128 _last, uint128 _first) internal pure returns (uint256) {\\n    return uint256(_last + 1 - _first);\\n  }\\n}\\n\",\"keccak256\":\"0xf5bddefb821a87796831d4086cdef8f7c0fd23fab0398caa0b74fb8ab6a6e28b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\nimport \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\\n    _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n  }\\n\\n  // treat it as a null-terminated string of max 32 bytes\\n  function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\\n    uint8 _slen = 0;\\n    while (_slen < 32 && _buf[_slen] != 0) {\\n      _slen++;\\n    }\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _newStr := mload(0x40)\\n      mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n      mstore(_newStr, _slen)\\n      mstore(add(_newStr, 0x20), _buf)\\n    }\\n  }\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x101289ff51094ca377befea24799db5eacfc457d5607cd9aa0ebdd4fdcf32d3f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.11;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint8 constant TWELVE_BYTES = 96;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint8 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint8 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 32) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the sha2 digest of the underlying memory.\\n   * @dev             We explicitly deallocate memory afterwards.\\n   * @param memView   The view\\n   * @return          digest - The sha2 hash of the underlying memory\\n   */\\n  function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n   * @param memView   The pre-image\\n   * @return          digest - the Digest\\n   */\\n  function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n      pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n      digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash256 (double sha2)\\n   * @param memView   A view of the preimage\\n   * @return          digest - the Digest\\n   */\\n  function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n    }\\n\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The sha256 digest\\n   */\\n  function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return sha2(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa1169b30c3351a66a434d68adbe824f1142adedcf679c0974c1a304af52aa0f5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {XAppConnectionClient} from \\\"./XAppConnectionClient.sol\\\";\\n// ============ External Imports ============\\nimport {IMessageRecipient} from \\\"../../nomad-core/interfaces/IMessageRecipient.sol\\\";\\n\\nabstract contract Router is XAppConnectionClient, IMessageRecipient {\\n  // ============ Mutable Storage ============\\n\\n  mapping(uint32 => bytes32) public remotes;\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from a remote Router contract\\n   * @param _origin The domain the message is coming from\\n   * @param _router The address the message is coming from\\n   */\\n  modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\\n    require(_isRemoteRouter(_origin, _router), \\\"!remote router\\\");\\n    _;\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Register the address of a Router contract for the same xApp on a remote chain\\n   * @param _domain The domain of the remote xApp Router\\n   * @param _router The address of the remote xApp Router\\n   */\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwner {\\n    remotes[_domain] = _router;\\n  }\\n\\n  // ============ Virtual functions ============\\n\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external virtual override;\\n\\n  // ============ Internal functions ============\\n  /**\\n   * @notice Return true if the given domain / router is the address of a remote xApp Router\\n   * @param _domain The domain of the potential remote xApp Router\\n   * @param _router The address of the potential remote xApp Router\\n   */\\n  function _isRemoteRouter(uint32 _domain, bytes32 _router) internal view returns (bool) {\\n    return remotes[_domain] == _router;\\n  }\\n\\n  /**\\n   * @notice Assert that the given domain has a xApp Router registered and return its address\\n   * @param _domain The domain of the chain for which to get the xApp Router\\n   * @return _remote The address of the remote xApp Router on _domain\\n   */\\n  function _mustHaveRemote(uint32 _domain) internal view returns (bytes32 _remote) {\\n    _remote = remotes[_domain];\\n    require(_remote != bytes32(0), \\\"!remote\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x75de92357895aae04d168dd86d8a160838534e5b62d80441c85090a711ef42b8\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/XAppConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ External Imports ============\\n// import {Home} from \\\"../../../../nomad-core-sol/contracts/Home.sol\\\";\\nimport {Home} from \\\"../../nomad-core/contracts/Home.sol\\\";\\nimport {XAppConnectionManager} from \\\"../../nomad-core/contracts/XAppConnectionManager.sol\\\";\\n\\n// TODO: refactor proposed ownable to be one basic + one router/asset\\nimport {ProposedOwnableUpgradeable} from \\\"../../ProposedOwnableUpgradeable.sol\\\";\\n\\nabstract contract XAppConnectionClient is ProposedOwnableUpgradeable {\\n  // ============ Mutable Storage ============\\n\\n  XAppConnectionManager public xAppConnectionManager;\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from an Nomad Replica contract\\n   */\\n  modifier onlyReplica() {\\n    require(_isReplica(msg.sender), \\\"!replica\\\");\\n    _;\\n  }\\n\\n  // ======== Initializer =========\\n\\n  function __XAppConnectionClient_initialize(address _xAppConnectionManager) internal initializer {\\n    xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\n    __ProposedOwnable_init();\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Modify the contract the xApp uses to validate Replica contracts\\n   * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\n   */\\n  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwner {\\n    xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @notice Get the local Home contract from the xAppConnectionManager\\n   * @return The local Home contract\\n   */\\n  function _home() internal view returns (Home) {\\n    return xAppConnectionManager.home();\\n  }\\n\\n  /**\\n   * @notice Determine whether _potentialReplcia is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function _isReplica(address _potentialReplica) internal view returns (bool) {\\n    return xAppConnectionManager.isReplica(_potentialReplica);\\n  }\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function _localDomain() internal view virtual returns (uint32) {\\n    return xAppConnectionManager.localDomain();\\n  }\\n}\\n\",\"keccak256\":\"0x9970f38ade398ae09e1bfc09119865003a0a62fb0bd553f93dde0f8ce04f55c2\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/connext/ConnextMessage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.11;\\n\\n// TODO: replace with nomad import\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\n\\nlibrary ConnextMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  enum Types {\\n    Invalid, // 0\\n    TokenId, // 1\\n    Message, // 2\\n    Transfer // 3\\n  }\\n\\n  // ============ Structs ============\\n\\n  // Tokens are identified by a TokenId:\\n  // domain - 4 byte chain ID of the chain from which the token originates\\n  // id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\n  struct TokenId {\\n    uint32 domain;\\n    bytes32 id;\\n  }\\n\\n  // ============ Constants ============\\n\\n  uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id\\n  uint256 private constant IDENTIFIER_LEN = 1;\\n  uint256 private constant TRANSFER_LEN = 129;\\n  // 1 byte identifier + 32 bytes recipient + 32 bytes amount + 32 bytes detailsHash + 32 bytes external hash\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Internal Functions: Validation ============\\n\\n  /**\\n   * @notice Checks that Action is valid type\\n   * @param _action The action\\n   * @return TRUE if action is valid\\n   */\\n  function isValidAction(bytes29 _action) internal pure returns (bool) {\\n    return isTransfer(_action);\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of the specified type\\n   * @param _type the type to check for\\n   * @param _action The message\\n   * @return True if the message is of the specified type\\n   */\\n  function isType(bytes29 _action, Types _type) internal pure returns (bool) {\\n    return actionType(_action) == uint8(_type) && messageType(_action) == _type;\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of type Transfer\\n   * @param _action The message\\n   * @return True if the message is of type Transfer\\n   */\\n  function isTransfer(bytes29 _action) internal pure returns (bool) {\\n    return isType(_action, Types.Transfer);\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidMessageLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    return _len == TOKEN_ID_LEN + TRANSFER_LEN;\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type Message\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsMessage(_view).assertValid();\\n  }\\n\\n  // ============ Internal Functions: Formatting ============\\n\\n  /**\\n   * @notice Formats an action message\\n   * @param _tokenId The token ID\\n   * @param _action The action\\n   * @return The formatted message\\n   */\\n  function formatMessage(bytes29 _tokenId, bytes29 _action)\\n    internal\\n    view\\n    typeAssert(_tokenId, Types.TokenId)\\n    returns (bytes memory)\\n  {\\n    require(isValidAction(_action), \\\"!action\\\");\\n    bytes29[] memory _views = new bytes29[](2);\\n    _views[0] = _tokenId;\\n    _views[1] = _action;\\n    return TypedMemView.join(_views);\\n  }\\n\\n  /**\\n   * @notice Formats Transfer\\n   * @param _to The recipient address as bytes32\\n   * @param _amnt The transfer amount\\n   * @param _detailsHash The token details hash\\n   * @param _transferId Unique identifier for transfer\\n   * @return\\n   */\\n  function formatTransfer(\\n    bytes32 _to,\\n    uint256 _amnt,\\n    bytes32 _detailsHash,\\n    bytes32 _transferId\\n  ) internal pure returns (bytes29) {\\n    return\\n      abi.encodePacked(Types.Transfer, _to, _amnt, _detailsHash, _transferId).ref(0).castTo(uint40(Types.Transfer));\\n  }\\n\\n  /**\\n   * @notice Serializes a Token ID struct\\n   * @param _tokenId The token id struct\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(TokenId memory _tokenId) internal pure returns (bytes29) {\\n    return formatTokenId(_tokenId.domain, _tokenId.id);\\n  }\\n\\n  /**\\n   * @notice Creates a serialized Token ID from components\\n   * @param _domain The domain\\n   * @param _id The ID\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(uint32 _domain, bytes32 _id) internal pure returns (bytes29) {\\n    return abi.encodePacked(_domain, _id).ref(0).castTo(uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Formats the keccak256 hash of the token details\\n   * Token Details Format:\\n   *      length of name cast to bytes - 32 bytes\\n   *      name - x bytes (variable)\\n   *      length of symbol cast to bytes - 32 bytes\\n   *      symbol - x bytes (variable)\\n   *      decimals - 1 byte\\n   * @param _name The name\\n   * @param _symbol The symbol\\n   * @param _decimals The decimals\\n   * @return The Details message\\n   */\\n  function formatDetailsHash(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(bytes(_name).length, _name, bytes(_symbol).length, _symbol, _decimals));\\n  }\\n\\n  /**\\n   * @notice Converts to a Message\\n   * @param _message The message\\n   * @return The newly typed message\\n   */\\n  function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {\\n    if (isValidMessageLength(_message)) {\\n      return _message.castTo(uint40(Types.Message));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  // ============ Internal Functions: Parsing msg ============\\n\\n  /**\\n   * @notice Returns the type of the message\\n   * @param _view The message\\n   * @return The type of the message\\n   */\\n  function messageType(bytes29 _view) internal pure returns (Types) {\\n    return Types(uint8(_view.typeOf()));\\n  }\\n\\n  /**\\n   * @notice Retrieves the token ID from a Message\\n   * @param _message The message\\n   * @return The ID\\n   */\\n  function tokenId(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Retrieves the action data from a Message\\n   * @param _message The message\\n   * @return The action\\n   */\\n  function action(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    uint256 _actionLen = _message.len() - TOKEN_ID_LEN;\\n    uint40 _type = uint40(msgType(_message));\\n    return _message.slice(TOKEN_ID_LEN, _actionLen, _type);\\n  }\\n\\n  // ============ Internal Functions: Parsing tokenId ============\\n\\n  /**\\n   * @notice Retrieves the domain from a TokenID\\n   * @param _tokenId The message\\n   * @return The domain\\n   */\\n  function domain(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (uint32) {\\n    return uint32(_tokenId.indexUint(0, 4));\\n  }\\n\\n  /**\\n   * @notice Retrieves the ID from a TokenID\\n   * @param _tokenId The message\\n   * @return The ID\\n   */\\n  function id(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (bytes32) {\\n    // before = 4 bytes domain\\n    return _tokenId.index(4, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM ID\\n   * @param _tokenId The message\\n   * @return The EVM ID\\n   */\\n  function evmId(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (address) {\\n    // before = 4 bytes domain + 12 bytes empty to trim for address\\n    return _tokenId.indexAddress(16);\\n  }\\n\\n  // ============ Internal Functions: Parsing action ============\\n\\n  /**\\n   * @notice Retrieves the action identifier from message\\n   * @param _message The action\\n   * @return The message type\\n   */\\n  function msgType(bytes29 _message) internal pure returns (uint8) {\\n    return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the identifier from action\\n   * @param _action The action\\n   * @return The action type\\n   */\\n  function actionType(bytes29 _action) internal pure returns (uint8) {\\n    return uint8(_action.indexUint(0, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the recipient from a Transfer\\n   * @param _transferAction The message\\n   * @return The recipient address as bytes32\\n   */\\n  function recipient(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier\\n    return _transferAction.index(1, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM Recipient from a Transfer\\n   * @param _transferAction The message\\n   * @return The EVM Recipient\\n   */\\n  function evmRecipient(bytes29 _transferAction) internal pure returns (address) {\\n    // before = 1 byte identifier + 12 bytes empty to trim for address = 13 bytes\\n    return _transferAction.indexAddress(13);\\n  }\\n\\n  /**\\n   * @notice Retrieves the amount from a Transfer\\n   * @param _transferAction The message\\n   * @return The amount\\n   */\\n  function amnt(bytes29 _transferAction) internal pure returns (uint256) {\\n    // before = 1 byte identifier + 32 bytes ID = 33 bytes\\n    return _transferAction.indexUint(33, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the unique identifier from a Transfer\\n   * @param _transferAction The message\\n   * @return The amount\\n   */\\n  function transferId(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier + 32 bytes ID + 32 bytes amount + 32 bytes detailsHash = 97 bytes\\n    return _transferAction.index(97, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the detailsHash from a Transfer\\n   * @param _transferAction The message\\n   * @return The detailsHash\\n   */\\n  function detailsHash(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier + 32 bytes ID + 32 bytes amount = 65 bytes\\n    return _transferAction.index(65, 32);\\n  }\\n}\\n\",\"keccak256\":\"0x519e96666af185c7bc2a72c4ad279f98e9f88575cc1cb9bfba530dc890c8fdfe\",\"license\":\"UNLICENSED\"},\"contracts/nomad-xapps/contracts/relayer-fee-router/RelayerFeeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.11;\\n\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\n\\nlibrary RelayerFeeMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  enum Types {\\n    Invalid, // 0\\n    ClaimFees // 1\\n  }\\n\\n  // ============ Constants ============\\n\\n  // before: 1 byte identifier + 20 bytes recipient + 32 bytes length + 32 bytes 1 transfer id = 85 bytes\\n  uint256 private constant MIN_CLAIM_LEN = 85;\\n  // before: 1 byte identifier + 20 bytes recipient = 21 bytes\\n  uint256 private constant LENGTH_ID_START = 21;\\n  uint8 private constant LENGTH_ID_LEN = 32;\\n  // before: 1 byte identifier\\n  uint256 private constant RECIPIENT_START = 1;\\n  // before: 1 byte identifier + 20 bytes recipient + 32 bytes length = 53 bytes\\n  uint256 private constant TRANSFER_IDS_START = 53;\\n  uint8 private constant TRANSFER_ID_LEN = 32;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Formatters ============\\n\\n  /**\\n   * @notice Formats an claim fees message\\n   * @param _recipient The address of the relayer\\n   * @param _transferIds A group of transfers ids to claim for fee bumps\\n   * @return The formatted message\\n   */\\n  function formatClaimFees(address _recipient, bytes32[] calldata _transferIds) internal pure returns (bytes memory) {\\n    return abi.encodePacked(uint8(Types.ClaimFees), _recipient, _transferIds.length, _transferIds);\\n  }\\n\\n  // ============ Getters ============\\n\\n  /**\\n   * @notice Parse the recipient address of the fees\\n   * @param _view The message\\n   * @return The recipient address\\n   */\\n  function recipient(bytes29 _view) internal pure typeAssert(_view, Types.ClaimFees) returns (address) {\\n    // before = 1 byte identifier\\n    return _view.indexAddress(1);\\n  }\\n\\n  /**\\n   * @notice Parse The group of transfers ids to claim for fee bumps\\n   * @param _view The message\\n   * @return The group of transfers ids to claim for fee bumps\\n   */\\n  function transferIds(bytes29 _view) internal pure typeAssert(_view, Types.ClaimFees) returns (bytes32[] memory) {\\n    uint256 length = _view.indexUint(LENGTH_ID_START, LENGTH_ID_LEN);\\n\\n    bytes32[] memory ids = new bytes32[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      ids[i] = _view.index(TRANSFER_IDS_START + i * TRANSFER_ID_LEN, TRANSFER_ID_LEN);\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidClaimFeesLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    // at least 1 transfer id where the excess is multiplier of transfer id length\\n    return _len >= MIN_CLAIM_LEN && (_len - TRANSFER_IDS_START) % TRANSFER_ID_LEN == 0;\\n  }\\n\\n  /**\\n   * @notice Converts to a ClaimFees\\n   * @param _view The message\\n   * @return The newly typed message\\n   */\\n  function tryAsClaimFees(bytes29 _view) internal pure returns (bytes29) {\\n    if (isValidClaimFeesLength(_view)) {\\n      return _view.castTo(uint40(Types.ClaimFees));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type ClaimFees\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeClaimFees(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsClaimFees(_view).assertValid();\\n  }\\n}\\n\",\"keccak256\":\"0x86e96fc7a07953c8b3b66739d7de2465e19e49aa7f39d2ffe39ff8d974eaeabd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/relayer-fee-router/RelayerFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.11;\\n\\n// ============ Internal Imports ============\\nimport {IConnextHandler} from \\\"../../../interfaces/IConnextHandler.sol\\\";\\nimport {Router} from \\\"../Router.sol\\\";\\nimport {XAppConnectionClient} from \\\"../XAppConnectionClient.sol\\\";\\nimport {RelayerFeeMessage} from \\\"./RelayerFeeMessage.sol\\\";\\nimport {IBridgeToken} from \\\"../../interfaces/bridge/IBridgeToken.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Home} from \\\"../../../nomad-core/contracts/Home.sol\\\";\\nimport {Version0} from \\\"../../../nomad-core/contracts/Version0.sol\\\";\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\n\\n/**\\n * @title RelayerFeeRouter\\n */\\ncontract RelayerFeeRouter is Version0, Router {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using RelayerFeeMessage for bytes29;\\n\\n  // ========== Custom Errors ===========\\n\\n  error RelayerFeeRouter__onlyConnext_notConnext();\\n  error RelayerFeeRouter__send_claimEmpty();\\n  error RelayerFeeRouter__send_recipientEmpty();\\n\\n  // ============ Public Storage ============\\n\\n  IConnextHandler public connext;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ======== Events =========\\n\\n  /**\\n   * @notice Emitted when a fees claim has been initialized in this domain\\n   * @param domain The domain where to claim the fees\\n   * @param recipient The address of the relayer\\n   * @param transferIds A group of transaction ids to claim for fee bumps\\n   * @param remote Remote RelayerFeeRouter address\\n   * @param message The message sent to the destination domain\\n   */\\n  event Send(uint32 domain, address recipient, bytes32[] transferIds, bytes32 remote, bytes message);\\n\\n  /**\\n   * @notice Emitted when the a fees claim message has arrived to this domain\\n   * @param originAndNonce Domain where the transfer originated and the unique identifier\\n   * for the message from origin to destination, combined in a single field ((origin << 32) & nonce)\\n   * @param origin Domain where the transfer originated\\n   * @param recipient The address of the relayer\\n   * @param transferIds A group of transaction ids to claim for fee bumps\\n   */\\n  event Receive(uint64 indexed originAndNonce, uint32 indexed origin, address indexed recipient, bytes32[] transferIds);\\n\\n  /**\\n   * @notice Emitted when a new Connext address is set\\n   * @param connext The new connext address\\n   */\\n  event SetConnext(address indexed connext);\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Restricts the caller to the local bridge router\\n   */\\n  modifier onlyConnext() {\\n    if (msg.sender != address(connext)) revert RelayerFeeRouter__onlyConnext_notConnext();\\n    _;\\n  }\\n\\n  // ======== Initializer ========\\n\\n  function initialize(address _xAppConnectionManager) public initializer {\\n    __XAppConnectionClient_initialize(_xAppConnectionManager);\\n  }\\n\\n  /**\\n   * @notice Sets the Connext.\\n   * @dev Connext and relayer fee router store references to each other\\n   * @param _connext The address of the Connext implementation\\n   */\\n  function setConnext(address _connext) external onlyOwner {\\n    connext = IConnextHandler(_connext);\\n    emit SetConnext(_connext);\\n  }\\n\\n  // ======== External: Send Claim =========\\n\\n  /**\\n   * @notice Sends a request to claim the fees in the originated domain\\n   * @param _domain The domain where to claim the fees\\n   * @param _recipient The address of the relayer\\n   * @param _transferIds A group of transfer ids to claim for fee bumps\\n   */\\n  function send(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds\\n  ) external onlyConnext {\\n    if (_transferIds.length == 0) revert RelayerFeeRouter__send_claimEmpty();\\n    if (_recipient == address(0)) revert RelayerFeeRouter__send_recipientEmpty();\\n\\n    // get remote RelayerFeeRouter address; revert if not found\\n    bytes32 remote = _mustHaveRemote(_domain);\\n\\n    bytes memory message = RelayerFeeMessage.formatClaimFees(_recipient, _transferIds);\\n\\n    xAppConnectionManager.home().dispatch(_domain, remote, message);\\n\\n    // emit Send event\\n    emit Send(_domain, _recipient, _transferIds, remote, message);\\n  }\\n\\n  // ======== External: Handle =========\\n\\n  /**\\n   * @notice Handles an incoming message\\n   * @param _origin The origin domain\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @param _sender The sender address\\n   * @param _message The message\\n   */\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {\\n    // parse recipient and transferIds from message\\n    bytes29 _msg = _message.ref(0).mustBeClaimFees();\\n\\n    address recipient = _msg.recipient();\\n    bytes32[] memory transferIds = _msg.transferIds();\\n\\n    connext.claim(recipient, transferIds);\\n\\n    // emit Receive event\\n    emit Receive(_originAndNonce(_origin, _nonce), _origin, recipient, transferIds);\\n  }\\n\\n  /**\\n   * @dev explicit override for compiler inheritance\\n   * @dev explicit override for compiler inheritance\\n   * @return domain of chain on which the contract is deployed\\n   */\\n  function _localDomain() internal view override(XAppConnectionClient) returns (uint32) {\\n    return XAppConnectionClient._localDomain();\\n  }\\n\\n  /**\\n   * @notice Internal utility function that combines\\n   * `_origin` and `_nonce`.\\n   * @dev Both origin and nonce should be less than 2^32 - 1\\n   * @param _origin Domain of chain where the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @return Returns (`_origin` << 32) & `_nonce`\\n   */\\n  function _originAndNonce(uint32 _origin, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_origin) << 32) | _nonce;\\n  }\\n}\\n\",\"keccak256\":\"0xaecb43384ffc78352724647ac3df6cb6d48d16f47a12d494386f8cd76fdc4279\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/interfaces/bridge/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IBridgeToken {\\n  function initialize() external;\\n\\n  function name() external returns (string memory);\\n\\n  function balanceOf(address _account) external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function detailsHash() external view returns (bytes32);\\n\\n  function burn(address _from, uint256 _amnt) external;\\n\\n  function mint(address _to, uint256 _amnt) external;\\n\\n  function setDetailsHash(bytes32 _detailsHash) external;\\n\\n  function setDetails(\\n    string calldata _name,\\n    string calldata _symbol,\\n    uint8 _decimals\\n  ) external;\\n\\n  // inherited from ownable\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x34bebd9472b217fe32d662cf3f3c91fe7395b85b8c33d5337904a1dd78d20881\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/interfaces/bridge/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IBridgeToken} from \\\"./IBridgeToken.sol\\\";\\n\\n// ============ External Imports ============\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenRegistry {\\n  function isLocalOrigin(address _token) external view returns (bool);\\n\\n  function ensureLocalToken(uint32 _domain, bytes32 _id) external returns (address _local);\\n\\n  function mustHaveLocalToken(uint32 _domain, bytes32 _id) external view returns (IERC20);\\n\\n  function getLocalAddress(uint32 _domain, bytes32 _id) external view returns (address _local);\\n\\n  function getTokenId(address _token) external view returns (uint32, bytes32);\\n\\n  function enrollCustom(\\n    uint32 _domain,\\n    bytes32 _id,\\n    address _custom\\n  ) external;\\n\\n  function oldReprToCurrentRepr(address _oldRepr) external view returns (address _currentRepr);\\n}\\n\",\"keccak256\":\"0x383d50b1a262d95a975868f77c07b198a9d879d1c7791cb34bd81e70b46ab0a6\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x614c4a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f35760003560e01c806361aa25e6116100965780637683c95c116100705780637683c95c146102625780637d3d8886146102825780638003f5a8146102a2578063ec7856ba146102c257600080fd5b806361aa25e61461020257806373b8255314610222578063767f70c01461024257600080fd5b80633d0e0fb5116100d25780633d0e0fb51461015a57806345b049e91461017a5780634772eb6d146101ad5780635f751e20146101e257600080fd5b8062968b79146100f85780630f5229531461011a578063271b32211461013a575b600080fd5b81801561010457600080fd5b50610118610113366004613b02565b6102e2565b005b81801561012657600080fd5b50610118610135366004613b2e565b61037b565b81801561014657600080fd5b50610118610155366004613beb565b610429565b81801561016657600080fd5b50610118610175366004613c6f565b610571565b81801561018657600080fd5b5061019a610195366004613c91565b6105d0565b6040519081526020015b60405180910390f35b8180156101b957600080fd5b506101cd6101c8366004613d0d565b6106af565b604080519283526020830191909152016101a4565b8180156101ee57600080fd5b506101186101fd366004613c6f565b610761565b81801561020e57600080fd5b5061011861021d366004613d77565b6107f1565b81801561022e57600080fd5b5061011861023d366004613b02565b610923565b81801561024e57600080fd5b5061011861025d366004613ddb565b6109b0565b81801561026e57600080fd5b5061011861027d366004613e1b565b610a43565b81801561028e57600080fd5b5061011861029d366004613e76565b610b17565b8180156102ae57600080fd5b506101186102bd366004613f42565b610c2b565b8180156102ce57600080fd5b506101186102dd366004614000565b610fcd565b6001600160a01b03821660009081526020829052604090205460ff161561031c57604051631cc7298f60e11b815260040160405180910390fd5b6001600160a01b03821660008181526020838152604091829020805460ff19166001179055815192835233908301527fd756b9aee10d6f2c80dc42c5031beb0e0847f6e1d6ba50199bdfc3f0de5cc0cc91015b60405180910390a15050565b60008061038b87896000866110ad565b6001600160a01b038089166000908152602089815260408083209386168352929052908120805493955091935083926103c5908490614072565b9091555050604080516001600160a01b03848116825260208201879052918101839052336060820152908716907fc30593c06911f2f2fc32a69df3a28e4a0b116d8d461b47a005ae4d28cd49282b9060800160405180910390a25050505050505050565b60005b838110156104b8573382600087878581811061044a5761044a61408a565b60209081029290920135835250810191909152604001600020546001600160a01b0316146104b0578484828181106104845761048461408a565b90506020020135604051635fe4e41360e01b81526004016104a791815260200190565b60405180910390fd5b60010161042c565b5060405163d7d680a360e01b81526001600160a01b0383169063d7d680a3906104eb9089908990899089906004016140d6565b600060405180830381600087803b15801561050557600080fd5b505af1158015610519573d6000803e3d6000fd5b50505050846001600160a01b03168663ffffffff167f68a0b54b1aeae4bd0cc4fabefe2e6c06c6197fbbcf2122402e017620bdf0b41c33878760405161056193929190614107565b60405180910390a3505050505050565b81158061057d57508082145b1561059b5760405163cc00a55960e01b815260040160405180910390fd5b604080518381523360208201527fa7fe33308fb33ae6f3259e3c7c954ae3d6cd7f428cd17f653413c2cdc691666d910161036f565b600080806105e08b858b88611131565b915091506000806105f78484158f8f8e8e8e611369565b915091506106088d8383878761150c565b600084815260208790526040902080546001600160a01b031916331790556106308d8061412c565b61063a908061414c565b610648906020810190614162565b6001600160a01b0316847fe94b741b2cb42c79ac5ce0c59b6431510f03014c15667107d71223354076c8aa8f8060000190610683919061412c565b8486336040516106969493929190614376565b60405180910390a350919b9a5050505050505050505050565b6000806106bb86611704565b60008060006106cb8989896117a1565b919450925090506106dc898061414c565b6000848152602088905260409020606091909101359055827f172e4c0e3b137e3bbad1e9e8c029743db7d7a013f735930a9edd574d5099c5fe61071f8b8061414c565b838c6040013586336040516107389594939291906144b3565b60405180910390a28261075060408b01356001614072565b945094505050505b94509492505050565b3461077f5760405163382766cf60e21b815260040160405180910390fd5b6000828152602082905260408120805434929061079d908490614072565b909155505060008281526020828152604091829020548251908152339181019190915283917feab1c093c8ba2224a2907cd9efb6ed51c233306ff5a66853b84e02a0bf95feab910160405180910390a25050565b602080870135600090815290849052604090205460ff1615610826576040516338199c5760e11b815260040160405180910390fd5b60208087013560009081529084905260408120805460ff191660011790556001600160a01b03861615610859578561085b565b845b6001600160a01b038116600090815260208590526040902090915087906108828282614569565b505060208781018035600081815292859052604090922080546001600160a01b0319166001600160a01b0385161790557f42e28d2d3431c24c3f3b6e2623a169bd4a31dd1f66780c4499af54a28632779b91906108df908a614596565b6040805192835263ffffffff9190911660208301526001600160a01b038981168383015284166060830152336080830152519081900360a00190a150505050505050565b6001600160a01b03821660009081526020829052604090205460ff1661095c57604051633bff81a160e11b815260040160405180910390fd5b6001600160a01b03821660008181526020838152604091829020805460ff19169055815192835233908301527f0bdcf1d6f29aa87af8131cc81dcbb295fcf98d71cfcdc79cc5d965317bae1d0a910161036f565b60208381018035600081815292849052604090922080546001600160a01b0319166001600160a01b0386161790557fd6f882d8fd8cc867bb57db3880bc4ad0b9b84689b57bba1b51feec7be397e3c29190610a0b9086614596565b6040805192835263ffffffff90911660208301526001600160a01b0385169082015233606082015260800160405180910390a1505050565b6000805b83811015610ac057826000868684818110610a6457610a6461408a565b9050602002013581526020019081526020016000205482610a859190614072565b91506000836000878785818110610a9e57610a9e61408a565b6020908102929092013583525081019190915260400160002055600101610a47565b50610acb8582611a12565b846001600160a01b03167f2bfaaa152bcd96bf9b286ad5528d510fe2a107a182c7e42aefb7f0e1130bb371828686604051610b08939291906145b3565b60405180910390a25050505050565b6001600160a01b038316610b3e5760405163e3ef9f4d60e01b815260040160405180910390fd5b84610b5c5760405163615af77160e01b815260040160405180910390fd5b336000908152602083815260408083206001600160a01b038816845290915290205485811015610b9f57604051638a380b3160e01b815260040160405180910390fd5b336000908152602084815260408083206001600160a01b038916845290915290208682039055610bd185858885611b30565b604080516001600160a01b03868116825287166020820152808201889052336060820181905291517f63b05915120b3d5a231e7c3625a411c15b2a79c35e3b1432a4f1ea95468cc6349181900360800190a2505050505050565b6000610c45610c3a8783611beb565b62ffffff1916611c0f565b90506000610c5862ffffff198316611c2e565b90506000610c6b62ffffff198416611c63565b9050610c7c62ffffff198216611cbb565b610c995760405163c752d82960e01b815260040160405180910390fd5b6000610caa62ffffff198316611cc8565b600081815260208a9052604090205490915060ff1615610cdd576040516301cc7ba960e01b815260040160405180910390fd5b60006001600160a01b03881663b869d89a610cfd62ffffff198716611cdd565b610d0c62ffffff198816611cff565b6040516001600160e01b031960e085901b16815263ffffffff92909216600483015260248201526044016020604051808303816000875af1158015610d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7991906145cd565b90506000610d8c62ffffff198516611d21565b90506000610d9f62ffffff198616611d36565b60405163c86415cb60e01b81526001600160a01b038581166004830152919250908b169063c86415cb90602401602060405180830381865afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d91906145f8565b610ecc576040516340c10f1960e01b8152306004820152602481018390526001600160a01b038416906340c10f1990604401600060405180830381600087803b158015610e5957600080fd5b505af1158015610e6d573d6000803e3d6000fd5b505060405163cc2ab7c760e01b8152600481018490526001600160a01b038616925063cc2ab7c79150602401600060405180830381600087803b158015610eb357600080fd5b505af1158015610ec7573d6000803e3d6000fd5b505050505b600084815260208c81526040808320805460ff19166001179055908b9052902080548015610f77576000610f008286614615565b905060005b82811015610f7457818c6000868481548110610f2357610f2361408a565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938c1682529290925281208054909190610f67908490614072565b9091555050600101610f05565b50505b8e63ffffffff16867f0e5f1128fa87ef75539a5e012b42695000db91072e7500fb2723ccbb37d0803c84888833604051610fb49493929190614637565b60405180910390a3505050505050505050505050505050565b60008681526020849052604090205460ff16610ffc57604051638fb4105f60e01b815260040160405180910390fd5b600086815260208481526040808320805460ff1916905590849052812080546001600160a01b031916905581906001600160a01b0387161561103e5786611040565b855b6001600160a01b0316815260208082019290925260409081016000908120805463ffffffff1916815560010155805188815233928101929092527f9d181adb70e733f5235f839c1eed929407ea8526e41d01f49b9fef703e78dddf910160405180910390a1505050505050565b600080846001600160a01b0387166110fa576110c98587614072565b34146110e85760405163024789fb60e21b815260040160405180910390fd5b6110f28685611d4b565b839650611127565b84341461111a5760405163eb9c265360e01b815260040160405180910390fd5b6111248787611d9a565b90505b9596945050505050565b6000808061113f878061412c565b61114d9060408101906146af565b915050604087013581111561117557604051631d3fc8eb60e31b815260040160405180910390fd5b600061118088611e89565b9050600081836040516020016111a0929190918252602082015260400190565b60405160208183030381529060405280519060200120905060005b83811015611310576111d360408b0160208c016146f8565b15801561123a57508660006111e88c8061412c565b6111f69060408101906146af565b848181106112065761120661408a565b905060200201602081019061121b9190614162565b6001600160a01b0316815260208101919091526040016000205460ff16155b1561125857604051633e0a9b4b60e11b815260040160405180910390fd5b61129b826112668c8061412c565b6112749060608101906146af565b848181106112845761128461408a565b90506020028101906112969190614715565b611fb3565b6001600160a01b03166112ae8b8061412c565b6112bc9060408101906146af565b838181106112cc576112cc61408a565b90506020020160208101906112e19190614162565b6001600160a01b031614611308576040516342f3355760e01b815260040160405180910390fd5b6001016111bb565b506000828152602089905260409020546001600160a01b03161561134757604051637716de0760e11b815260040160405180910390fd5b5060008181526020879052604090205490935060ff1691505094509492505050565b60008080611377888061412c565b6080013590506000611389898061412c565b6113979060408101906146af565b91505089156114c4576113c06113ad8a8061412c565b608001358a60c001358b60e00135612055565b91506113cc898061412c565b6113da9060408101906146af565b60008d815260208b9052604090206113f3929091613a6e565b5060006114008284614615565b905060005b828110156114c1578189600061141b8e8061412c565b6114299060408101906146af565b858181106114395761143961408a565b905060200201602081019061144e9190614162565b6001600160a01b0316815260208101919091526040016000908120906114748e8061412c565b611485906040810190602001614162565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114b4919061475b565b9091555050600101611405565b50505b6114fa85876114d960808d0160608e01614162565b6114e38d8061412c565b6114f4906040810190602001614162565b8661206c565b93509350505097509795505050505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470611537868061412c565b611541908061414c565b61154f906020810190614715565b60405161155d929190614772565b604051809103902014156115ac576115a783611579878061412c565b611583908061414c565b611591906020810190614162565b866115a260a08a0160808b01614162565b611b30565b6116fd565b6115c08361159160c0880160a08901614162565b6115d060c0860160a08701614162565b6001600160a01b0316631e29b44083866115ea898061412c565b6115f4908061414c565b611602906020810190614162565b8786611627576040518060400160405280601d815260200162ffffff1981525061166f565b61166f6116348c8061412c565b61163e908061414c565b61164f906060810190604001614596565b6116598d8061412c565b61166a9060e081019060c001614162565b6121c2565b6116798c8061412c565b611683908061414c565b611691906020810190614715565b6040518863ffffffff1660e01b81526004016116b39796959493929190614782565b6000604051808303816000875af11580156116d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116fa919081019061480c565b50505b5050505050565b6080810135611713828061414c565b61171d908061414c565b61172e906060810190604001614596565b63ffffffff161461175257604051632a5cab0560e11b815260040160405180910390fd5b600061175e828061414c565b611768908061414c565b611776906020810190614162565b6001600160a01b0316141561179e57604051633c9d0b4960e21b815260040160405180910390fd5b50565b604080516080810182526000808252602082018190529181018290526060818101839052906000806117d3888061414c565b6117e4906040810190602001614162565b6001600160a01b031614611812576117fc878061414c565b61180d906040810190602001614162565b611822565b6118226040880160208901614162565b6001600160a01b038116600090815260208881526040918290208251808401909352805463ffffffff1683526001015490820181905291925090611879576040516394ba466b60e01b815260040160405180910390fd5b60006118ca6118888a8061414c565b611899906040810190602001614162565b6118a38b8061414c565b604001356118b18c8061414c565b606001356118c560408e0160208f01614162565b6110ad565b915050600080611918848a60008760200151815260200190815260200160002060009054906101000a90046001600160a01b03168d60600160208101906119119190614162565b88876121f1565b9150915060006119288c86612351565b905060006119388d8484876123b7565b905061194a60c08e0160a08f01614162565b6001600160a01b031663fa31de016119628f8061414c565b61196c908061414c565b61197d906080810190606001614596565b8f60c00135846040518463ffffffff1660e01b81526004016119a193929190614870565b600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b5050604080516080810182526001600160a01b039a8b168152602081019890985287019590955250919095166060840152939a9399509097509195505050505050565b80471015611a625760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104a7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611aaf576040519150601f19603f3d011682016040523d82523d6000602084013e611ab4565b606091505b5050905080611b2b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016104a7565b505050565b6001600160a01b038416611b5757604051632b28b36d60e01b815260040160405180910390fd5b806001600160a01b0316846001600160a01b03161415611bda57604051632e1a7d4d60e01b8152600481018390526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b50505050611bd58383611a12565b611be5565b611be5848484612730565b50505050565b815160009060208401611c0664ffffffffff85168284612793565b95945050505050565b6000611c28611c1d836127d7565b62ffffff1916612809565b92915050565b6000816002611c45815b62ffffff19841690612864565b50611c5b62ffffff19851660006024600161293d565b949350505050565b6000816002611c7181611c38565b506000611c8c6024601887901c6001600160601b031661475b565b90506000611c99866129ad565b60ff169050611cb162ffffff1987166024848461293d565b9695505050505050565b6000611c288260036129c2565b6000611c2862ffffff19831660616020612a21565b6000816001611ceb81611c38565b50611c5b62ffffff19851660006004612b7a565b6000816001611d0d81611c38565b50611c5b62ffffff19851660046020612a21565b6000611c2862ffffff19831660216020612b7a565b6000611c2862ffffff19831660416020612a21565b806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d8657600080fd5b505af11580156116fa573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa158015611de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0791906148ab565b9050611e1584333086612baa565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a0823190602401602060405180830381865afa158015611e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7f91906148ab565b611c5b919061475b565b60008080611e9d6080850160608601614162565b6001600160a01b031663f1537686611eb5868061412c565b611ec6906040810190602001614162565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381865afa158015611f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2d91906148c4565b9092509050611f3c848061412c565b60a00135611f4a858061412c565b611f54908061414c565b611f5e868061412c565b611f6f9060e081019060c001614162565b8385611f7b898061412c565b60800135604051602001611f94969594939291906148f2565b6040516020818303038152906040528051906020012092505050919050565b600061204b61200f856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612be292505050565b90505b9392505050565b600081612062848661493f565b61204b9190614615565b6040516378a9bb4360e11b81526001600160a01b038381166004830152600091829182919087169063f1537686906024016040805180830381865afa1580156120b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120dd91906148c4565b600081815260208b905260409020549092506001600160a01b03908116915086168114156121125784869350935050506121b8565b6000828152602089905260409020546001600160a01b0316612135878288612c06565b60405163d5914c4560e01b8152600481018790526001600160a01b038881166024830152838116604483015282169063d5914c45906064016020604051808303816000875af115801561218c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b091906148ab565b945090925050505b9550959350505050565b6060600183836040516020016121da9392919061495e565b604051602081830303815290604052905092915050565b602085015160009081906122095750819050826121b8565b86516020880151604051631626cf1960e21b815263ffffffff909216600483015260248201526000906001600160a01b0387169063589b3c6490604401602060405180830381865afa158015612263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228791906145cd565b9050836122985783925090506121b8565b846001600160a01b0316816001600160a01b031614156122be57838592509250506121b8565b6122c9858886612c06565b60405163d5914c4560e01b8152600481018590526001600160a01b038681166024830152828116604483015288169063d5914c45906064016020604051808303816000875af1158015612320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234491906148ab565b9890975095505050505050565b60006040830135612362848061414c565b61236c908061414c565b60208401518451339190612380888061414c565b60400135604051602001612399969594939291906148f2565b60405160208183030381529060405280519060200120905092915050565b60608360006123cb60808801888501614162565b60405163c86415cb60e01b81526001600160a01b038881166004830152919091169063c86415cb90602401602060405180830381865afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243791906145f8565b1561257b57612574826001600160a01b03166306fdde036040518163ffffffff1660e01b81526004016000604051808303816000875af115801561247f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124a791908101906149ab565b836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156124e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261250d91908101906149ab565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561254b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256f91906149f3565b612d1b565b9050612647565b83156125e257604051632770a7eb60e21b8152336004820152602481018590526001600160a01b03831690639dc29fac90604401600060405180830381600087803b1580156125c957600080fd5b505af11580156125dd573d6000803e3d6000fd5b505050505b816001600160a01b0316634815fcb16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264491906148ab565b90505b600061268561267d6126598a8061414c565b612663908061414c565b612671906020810190614162565b6001600160a01b031690565b868489612d57565b905060008061269a60808b0160608c01614162565b6040516378a9bb4360e11b81526001600160a01b038b81166004830152919091169063f1537686906024016040805180830381865afa1580156126e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270591906148c4565b9150915060006127158383612da9565b90506127218185612ddd565b9b9a5050505050505050505050565b6040516001600160a01b038316602482015260448101829052611b2b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612eac565b6000806127a08385614072565b90506040518111156127b0575060005b806127c25762ffffff1991505061204e565b5050606092831b9190911790911b1760181b90565b60006127e282612f7e565b156127ff576301000000600160d81b038216600160d91b17611c28565b62ffffff19611c28565b600061281482612fa1565b6128605760405162461bcd60e51b815260206004820152601960248201527f56616c696469747920617373657274696f6e206661696c65640000000000000060448201526064016104a7565b5090565b60006128708383612fdf565b61293657600061288f6128838560d81c90565b64ffffffffff16613002565b91505060006128a48464ffffffffff16613002565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b81526004016104a79190614a16565b5090919050565b6000806129538660781c6001600160601b031690565b6001600160601b03169050612967866130b0565b846129728784614072565b61297c9190614072565b111561298f5762ffffff19915050611c5b565b6129998582614072565b9050611cb18364ffffffffff168286612793565b6000611c2862ffffff19831660246001612b7a565b60008160038111156129d6576129d6614895565b60ff166129e2846130e9565b60ff1614801561204e57508160038111156129ff576129ff614895565b612a08846130fd565b6003811115612a1957612a19614895565b149392505050565b600060ff8216612a335750600061204e565b612a468460181c6001600160601b031690565b6001600160601b0316612a5c60ff841685614072565b1115612ac057612aa7612a788560781c6001600160601b031690565b6001600160601b0316612a948660181c6001600160601b031690565b6001600160601b0316858560ff16613118565b60405162461bcd60e51b81526004016104a79190614a16565b60208260ff161115612b3a5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016104a7565b600882026000612b538660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000612b87826020614a29565b612b92906008614a4c565b60ff16612ba0858585612a21565b901c949350505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611be59085906323b872dd60e01b9060840161275c565b6000806000612bf18585613186565b91509150612bfe816131f6565b509392505050565b801580612c805750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7e91906148ab565b155b612ceb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104a7565b6040516001600160a01b038316602482015260448101829052611b2b90849063095ea7b360e01b9060640161275c565b600083518484518585604051602001612d38959493929190614a75565b6040516020818303038152906040528051906020012090509392505050565b6000611c066003612d936000600389898989604051602001612d7d959493929190614ad5565b60408051601f1981840301815291905290611beb565b6301000000600160d81b031660d89190911b1790565b600061204e60016040516001600160e01b031960e087901b16602082015260248101859052612d9390600090604401612d7d565b6060826001612deb81611c38565b50612df5846133b1565b612e2b5760405162461bcd60e51b815260206004820152600760248201526610b0b1ba34b7b760c91b60448201526064016104a7565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110612e6057612e6061408a565b602002602001019062ffffff1916908162ffffff1916815250508481600181518110612e8e57612e8e61408a565b62ffffff1990921660209283029190910190910152611cb1816133bc565b6000612f01826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134119092919063ffffffff16565b805190915015611b2b5780806020019051810190612f1f91906145f8565b611b2b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a7565b6000601882901c6001600160601b0316612f9a60816024614072565b1492915050565b6000612fad8260d81c90565b64ffffffffff1664ffffffffff1415612fc857506000919050565b6000612fd3836130b0565b60405110199392505050565b60008164ffffffffff16612ff38460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115613057576000613021826008614a4c565b60ff1685901c905061303281613420565b61ffff16841793508160ff1660101461304d57601084901b93505b5060001901613008565b50600f5b60ff8160ff1610156130aa576000613074826008614a4c565b60ff1685901c905061308581613420565b61ffff16831792508160ff166000146130a057601083901b92505b506000190161305b565b50915091565b60006130c58260181c6001600160601b031690565b6130d88360781c6001600160601b031690565b016001600160601b03169050919050565b6000611c2862ffffff198316826001612b7a565b600060d882901c60ff166003811115611c2857611c28614895565b6060600061312586613002565b915050600061313386613002565b915050600061314186613002565b915050600061314f86613002565b915050838383836040516020016131699493929190614b10565b604051602081830303815290604052945050505050949350505050565b6000808251604114156131bd5760208301516040840151606085015160001a6131b187828585613452565b945094505050506131ef565b8251604014156131e757602083015160408401516131dc86838361353c565b9350935050506131ef565b506000905060025b9250929050565b600081600481111561320a5761320a614895565b14156132135750565b600181600481111561322757613227614895565b14156132755760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104a7565b600281600481111561328957613289614895565b14156132d75760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104a7565b60038160048111156132eb576132eb614895565b14156133445760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104a7565b600481600481111561335857613358614895565b141561179e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104a7565b6000611c2882611cbb565b60405160609060006133d18460208401613575565b905060006133e88260181c6001600160601b031690565b6001600160601b0316905060006133fe83613605565b9184525082016020016040525092915050565b606061204b848460008561361b565b600061343260048360ff16901c61374c565b60ff1661ffff919091161760081b6134498261374c565b60ff1617919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156134895750600090506003610758565b8460ff16601b141580156134a157508460ff16601c14155b156134b25750600090506004610758565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613506573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661352f57600060019250925050610758565b9660009650945050505050565b6000806001600160ff1b0383168161355960ff86901c601b614072565b905061356787828885613452565b935093505050935093915050565b6000604051828111156135885760206060fd5b506000805b84518110156135f55760008582815181106135aa576135aa61408a565b602002602001015190506135c0818487016138a8565b506135d48160181c6001600160601b031690565b6001600160601b0316830192505080806135ed90614be7565b91505061358d565b50606083901b811760181b611c5b565b600061361082613a00565b611c2890602061493f565b60608247101561367c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a7565b6001600160a01b0385163b6136d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a7565b600080866001600160a01b031685876040516136ef9190614c02565b60006040518083038185875af1925050503d806000811461372c576040519150601f19603f3d011682016040523d82523d6000602084013e613731565b606091505b5091509150613741828286613a35565b979650505050505050565b600060f08083179060ff821614156137675750603092915050565b8060ff1660f1141561377c5750603192915050565b8060ff1660f214156137915750603292915050565b8060ff1660f314156137a65750603392915050565b8060ff1660f414156137bb5750603492915050565b8060ff1660f514156137d05750603592915050565b8060ff1660f614156137e55750603692915050565b8060ff1660f714156137fa5750603792915050565b8060ff1660f8141561380f5750603892915050565b8060ff1660f914156138245750603992915050565b8060ff1660fa14156138395750606192915050565b8060ff1660fb141561384e5750606292915050565b8060ff1660fc14156138635750606392915050565b8060ff1660fd14156138785750606492915050565b8060ff1660fe141561388d5750606592915050565b8060ff1660ff14156138a25750606692915050565b50919050565b600062ffffff1980841614156139115760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016104a7565b61391a83612fa1565b61397a5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016104a7565b600061398f8460181c6001600160601b031690565b6001600160601b0316905060006139af8560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156139cf5760206060fd5b8285848460045afa50611cb16139e58760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60006020613a178360181c6001600160601b031690565b613a2b906001600160601b03166020614072565b611c289190614615565b60608315613a4457508161204e565b825115613a545782518084602001fd5b8160405162461bcd60e51b81526004016104a79190614a16565b828054828255906000526020600020908101928215613ac1579160200282015b82811115613ac15781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613a8e565b506128609291505b808211156128605760008155600101613ac9565b6001600160a01b038116811461179e57600080fd5b8035613afd81613add565b919050565b60008060408385031215613b1557600080fd5b8235613b2081613add565b946020939093013593505050565b60008060008060008060c08789031215613b4757600080fd5b863595506020870135613b5981613add565b94506040870135613b6981613add565b9350606087013592506080870135915060a0870135613b8781613add565b809150509295509295509295565b63ffffffff8116811461179e57600080fd5b60008083601f840112613bb957600080fd5b5081356001600160401b03811115613bd057600080fd5b6020830191508360208260051b85010111156131ef57600080fd5b60008060008060008060a08789031215613c0457600080fd5b8635613c0f81613b95565b95506020870135613c1f81613add565b945060408701356001600160401b03811115613c3a57600080fd5b613c4689828a01613ba7565b9095509350506060870135613c5a81613add565b80925050608087013590509295509295509295565b60008060408385031215613c8257600080fd5b50508035926020909101359150565b600080600080600080600080610100808a8c031215613caf57600080fd5b89356001600160401b03811115613cc557600080fd5b8a01808c03821315613cd657600080fd5b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e0013595509350505050565b60008060008060808587031215613d2357600080fd5b84356001600160401b03811115613d3957600080fd5b850160e08188031215613d4b57600080fd5b966020860135965060408601359560600135945092505050565b6000604082840312156138a257600080fd5b60008060008060008060e08789031215613d9057600080fd5b613d9a8888613d65565b95506040870135613daa81613add565b94506060870135613dba81613add565b959894975094956080810135955060a08101359460c0909101359350915050565b600080600060808486031215613df057600080fd5b613dfa8585613d65565b92506040840135613e0a81613add565b929592945050506060919091013590565b60008060008060608587031215613e3157600080fd5b8435613e3c81613add565b935060208501356001600160401b03811115613e5757600080fd5b613e6387828801613ba7565b9598909750949560400135949350505050565b600080600080600060a08688031215613e8e57600080fd5b853594506020860135613ea081613add565b93506040860135613eb081613add565b9250606086013591506080860135613ec781613add565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613f1357613f13613ed5565b604052919050565b60006001600160401b03821115613f3457613f34613ed5565b50601f01601f191660200190565b60008060008060008060c08789031215613f5b57600080fd5b8635613f6681613b95565b955060208701356001600160401b03811115613f8157600080fd5b8701601f81018913613f9257600080fd5b8035613fa5613fa082613f1b565b613eeb565b8181528a6020838501011115613fba57600080fd5b8160208401602083013760006020838301015280975050505060408701359350613fe660608801613af2565b92506080870135915060a087013590509295509295509295565b60008060008060008060c0878903121561401957600080fd5b86359550602087013561402b81613add565b9450604087013561403b81613add565b959894975094956060810135955060808101359460a0909101359350915050565b634e487b7160e01b600052601160045260246000fd5b600082198211156140855761408561405c565b500190565b634e487b7160e01b600052603260045260246000fd5b81835260006001600160fb1b038311156140b957600080fd5b8260051b8083602087013760009401602001938452509192915050565b63ffffffff851681526001600160a01b0384166020820152606060408201819052600090611cb190830184866140a0565b6001600160a01b0384168152604060208201819052600090611c0690830184866140a0565b6000823560de1983360301811261414257600080fd5b9190910192915050565b60008235607e1983360301811261414257600080fd5b60006020828403121561417457600080fd5b813561204e81613add565b60008235607e1983360301811261419557600080fd5b90910192915050565b6000808335601e198436030181126141b557600080fd5b83016020810192503590506001600160401b038111156141d457600080fd5b8036038313156131ef57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000813561421981613add565b6001600160a01b03168352614231602083018361419e565b608060208601526142466080860182846141e3565b915050604083013561425781613b95565b63ffffffff908116604086015260608401359061427382613b95565b16606094909401939093525090919050565b6000808335601e1984360301811261429c57600080fd5b83016020810192503590506001600160401b038111156142bb57600080fd5b8060051b36038313156131ef57600080fd5b8183526000602080850194508260005b8581101561430b5781356142f081613add565b6001600160a01b0316875295820195908201906001016142dd565b509495945050505050565b60008383855260208086019550808560051b8301018460005b8781101561436957848303601f1901895261434a828861419e565b6143558582846141e3565b9a86019a945050509083019060010161432f565b5090979650505050505050565b608081526000614386868761417f565b60e0608084015261439b61016084018261420c565b905060208701356143ab81613add565b6001600160a01b031660a08401526143c66040880188614285565b607f19808685030160c08701526143de8483856142cd565b93506143ed60608b018b614285565b93509150808685030160e087015250614407838383614316565b92505050608087013561010084015260a087013561012084015261442d60c08801613af2565b6001600160a01b03908116610140850152868116602085015260408401869052841660608401529050611c06565b60005b8381101561447657818101518382015260200161445e565b83811115611be55750506000910152565b6000815180845261449f81602086016020860161445b565b601f01601f19169290920160200192915050565b60006101008083526144c5888961417f565b6080828501526144d961018085018261420c565b91505060208801356144ea81613add565b6001600160a01b039081166101208501526040898101356101408601526060808b0135610160870152895183166020808801919091528a015182870152908901518186015288015116608084015260a0830186905282810360c08401526145518186614487565b915050611cb160e08301846001600160a01b03169052565b813561457481613b95565b63ffffffff811663ffffffff1983541617825550602082013560018201555050565b6000602082840312156145a857600080fd5b813561204e81613b95565b838152604060208201526000611c066040830184866140a0565b6000602082840312156145df57600080fd5b815161204e81613add565b801515811461179e57600080fd5b60006020828403121561460a57600080fd5b815161204e816145ea565b60008261463257634e487b7160e01b600052601260045260246000fd5b500490565b6000608082016080835280875480835260a08501915088600052602092508260002060005b828110156146815781546001600160a01b03168452928401926001918201910161465c565b5050506001600160a01b03968716918401919091526040830194909452509216606090920191909152919050565b6000808335601e198436030181126146c657600080fd5b8301803591506001600160401b038211156146e057600080fd5b6020019150600581901b36038213156131ef57600080fd5b60006020828403121561470a57600080fd5b813561204e816145ea565b6000808335601e1984360301811261472c57600080fd5b8301803591506001600160401b0382111561474657600080fd5b6020019150368190038213156131ef57600080fd5b60008282101561476d5761476d61405c565b500390565b8183823760009101908152919050565b878152602081018790526001600160a01b0386811660408301528516606082015260c0608082018190526000906147bb90830186614487565b82810360a08401526147ce8185876141e3565b9a9950505050505050505050565b60006147ea613fa084613f1b565b90508281528383830111156147fe57600080fd5b61204e83602083018461445b565b6000806040838503121561481f57600080fd5b825161482a816145ea565b60208401519092506001600160401b0381111561484657600080fd5b8301601f8101851361485757600080fd5b614866858251602084016147dc565b9150509250929050565b63ffffffff84168152826020820152606060408201526000611c066060830184614487565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156148bd57600080fd5b5051919050565b600080604083850312156148d757600080fd5b82516148e281613b95565b6020939093015192949293505050565b86815260c06020820152600061490b60c083018861420c565b6001600160a01b0396909616604083015250606081019390935263ffffffff91909116608083015260a09091015292915050565b60008160001904831182151516156149595761495961405c565b500290565b60006002851061497057614970614895565b5060f89390931b835260e09190911b6001600160e01b031916600183015260601b6bffffffffffffffffffffffff1916600582015260190190565b6000602082840312156149bd57600080fd5b81516001600160401b038111156149d357600080fd5b8201601f810184136149e457600080fd5b611c5b848251602084016147dc565b600060208284031215614a0557600080fd5b815160ff8116811461204e57600080fd5b60208152600061204e6020830184614487565b600060ff821660ff841680821015614a4357614a4361405c565b90039392505050565b600060ff821660ff84168160ff0481118215151615614a6d57614a6d61405c565b029392505050565b85815260008551614a8d816020850160208a0161445b565b80830190508560208201528451614aab81604084016020890161445b565b60f89490941b6001600160f81b031916604091909401908101939093525050604101949350505050565b600060048710614ae757614ae7614895565b5060f89590951b8552600185019390935260218401919091526041830152606182015260810190565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d8201611cb1565b6000600019821415614bfb57614bfb61405c565b5060010190565b6000825161414281846020870161445b56fea26469706673582212204a5afb7f080a6c5461b0bec5b02f6cfb39697b8a687517668a32e99b13787b2564736f6c634300080b0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f35760003560e01c806361aa25e6116100965780637683c95c116100705780637683c95c146102625780637d3d8886146102825780638003f5a8146102a2578063ec7856ba146102c257600080fd5b806361aa25e61461020257806373b8255314610222578063767f70c01461024257600080fd5b80633d0e0fb5116100d25780633d0e0fb51461015a57806345b049e91461017a5780634772eb6d146101ad5780635f751e20146101e257600080fd5b8062968b79146100f85780630f5229531461011a578063271b32211461013a575b600080fd5b81801561010457600080fd5b50610118610113366004613b02565b6102e2565b005b81801561012657600080fd5b50610118610135366004613b2e565b61037b565b81801561014657600080fd5b50610118610155366004613beb565b610429565b81801561016657600080fd5b50610118610175366004613c6f565b610571565b81801561018657600080fd5b5061019a610195366004613c91565b6105d0565b6040519081526020015b60405180910390f35b8180156101b957600080fd5b506101cd6101c8366004613d0d565b6106af565b604080519283526020830191909152016101a4565b8180156101ee57600080fd5b506101186101fd366004613c6f565b610761565b81801561020e57600080fd5b5061011861021d366004613d77565b6107f1565b81801561022e57600080fd5b5061011861023d366004613b02565b610923565b81801561024e57600080fd5b5061011861025d366004613ddb565b6109b0565b81801561026e57600080fd5b5061011861027d366004613e1b565b610a43565b81801561028e57600080fd5b5061011861029d366004613e76565b610b17565b8180156102ae57600080fd5b506101186102bd366004613f42565b610c2b565b8180156102ce57600080fd5b506101186102dd366004614000565b610fcd565b6001600160a01b03821660009081526020829052604090205460ff161561031c57604051631cc7298f60e11b815260040160405180910390fd5b6001600160a01b03821660008181526020838152604091829020805460ff19166001179055815192835233908301527fd756b9aee10d6f2c80dc42c5031beb0e0847f6e1d6ba50199bdfc3f0de5cc0cc91015b60405180910390a15050565b60008061038b87896000866110ad565b6001600160a01b038089166000908152602089815260408083209386168352929052908120805493955091935083926103c5908490614072565b9091555050604080516001600160a01b03848116825260208201879052918101839052336060820152908716907fc30593c06911f2f2fc32a69df3a28e4a0b116d8d461b47a005ae4d28cd49282b9060800160405180910390a25050505050505050565b60005b838110156104b8573382600087878581811061044a5761044a61408a565b60209081029290920135835250810191909152604001600020546001600160a01b0316146104b0578484828181106104845761048461408a565b90506020020135604051635fe4e41360e01b81526004016104a791815260200190565b60405180910390fd5b60010161042c565b5060405163d7d680a360e01b81526001600160a01b0383169063d7d680a3906104eb9089908990899089906004016140d6565b600060405180830381600087803b15801561050557600080fd5b505af1158015610519573d6000803e3d6000fd5b50505050846001600160a01b03168663ffffffff167f68a0b54b1aeae4bd0cc4fabefe2e6c06c6197fbbcf2122402e017620bdf0b41c33878760405161056193929190614107565b60405180910390a3505050505050565b81158061057d57508082145b1561059b5760405163cc00a55960e01b815260040160405180910390fd5b604080518381523360208201527fa7fe33308fb33ae6f3259e3c7c954ae3d6cd7f428cd17f653413c2cdc691666d910161036f565b600080806105e08b858b88611131565b915091506000806105f78484158f8f8e8e8e611369565b915091506106088d8383878761150c565b600084815260208790526040902080546001600160a01b031916331790556106308d8061412c565b61063a908061414c565b610648906020810190614162565b6001600160a01b0316847fe94b741b2cb42c79ac5ce0c59b6431510f03014c15667107d71223354076c8aa8f8060000190610683919061412c565b8486336040516106969493929190614376565b60405180910390a350919b9a5050505050505050505050565b6000806106bb86611704565b60008060006106cb8989896117a1565b919450925090506106dc898061414c565b6000848152602088905260409020606091909101359055827f172e4c0e3b137e3bbad1e9e8c029743db7d7a013f735930a9edd574d5099c5fe61071f8b8061414c565b838c6040013586336040516107389594939291906144b3565b60405180910390a28261075060408b01356001614072565b945094505050505b94509492505050565b3461077f5760405163382766cf60e21b815260040160405180910390fd5b6000828152602082905260408120805434929061079d908490614072565b909155505060008281526020828152604091829020548251908152339181019190915283917feab1c093c8ba2224a2907cd9efb6ed51c233306ff5a66853b84e02a0bf95feab910160405180910390a25050565b602080870135600090815290849052604090205460ff1615610826576040516338199c5760e11b815260040160405180910390fd5b60208087013560009081529084905260408120805460ff191660011790556001600160a01b03861615610859578561085b565b845b6001600160a01b038116600090815260208590526040902090915087906108828282614569565b505060208781018035600081815292859052604090922080546001600160a01b0319166001600160a01b0385161790557f42e28d2d3431c24c3f3b6e2623a169bd4a31dd1f66780c4499af54a28632779b91906108df908a614596565b6040805192835263ffffffff9190911660208301526001600160a01b038981168383015284166060830152336080830152519081900360a00190a150505050505050565b6001600160a01b03821660009081526020829052604090205460ff1661095c57604051633bff81a160e11b815260040160405180910390fd5b6001600160a01b03821660008181526020838152604091829020805460ff19169055815192835233908301527f0bdcf1d6f29aa87af8131cc81dcbb295fcf98d71cfcdc79cc5d965317bae1d0a910161036f565b60208381018035600081815292849052604090922080546001600160a01b0319166001600160a01b0386161790557fd6f882d8fd8cc867bb57db3880bc4ad0b9b84689b57bba1b51feec7be397e3c29190610a0b9086614596565b6040805192835263ffffffff90911660208301526001600160a01b0385169082015233606082015260800160405180910390a1505050565b6000805b83811015610ac057826000868684818110610a6457610a6461408a565b9050602002013581526020019081526020016000205482610a859190614072565b91506000836000878785818110610a9e57610a9e61408a565b6020908102929092013583525081019190915260400160002055600101610a47565b50610acb8582611a12565b846001600160a01b03167f2bfaaa152bcd96bf9b286ad5528d510fe2a107a182c7e42aefb7f0e1130bb371828686604051610b08939291906145b3565b60405180910390a25050505050565b6001600160a01b038316610b3e5760405163e3ef9f4d60e01b815260040160405180910390fd5b84610b5c5760405163615af77160e01b815260040160405180910390fd5b336000908152602083815260408083206001600160a01b038816845290915290205485811015610b9f57604051638a380b3160e01b815260040160405180910390fd5b336000908152602084815260408083206001600160a01b038916845290915290208682039055610bd185858885611b30565b604080516001600160a01b03868116825287166020820152808201889052336060820181905291517f63b05915120b3d5a231e7c3625a411c15b2a79c35e3b1432a4f1ea95468cc6349181900360800190a2505050505050565b6000610c45610c3a8783611beb565b62ffffff1916611c0f565b90506000610c5862ffffff198316611c2e565b90506000610c6b62ffffff198416611c63565b9050610c7c62ffffff198216611cbb565b610c995760405163c752d82960e01b815260040160405180910390fd5b6000610caa62ffffff198316611cc8565b600081815260208a9052604090205490915060ff1615610cdd576040516301cc7ba960e01b815260040160405180910390fd5b60006001600160a01b03881663b869d89a610cfd62ffffff198716611cdd565b610d0c62ffffff198816611cff565b6040516001600160e01b031960e085901b16815263ffffffff92909216600483015260248201526044016020604051808303816000875af1158015610d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7991906145cd565b90506000610d8c62ffffff198516611d21565b90506000610d9f62ffffff198616611d36565b60405163c86415cb60e01b81526001600160a01b038581166004830152919250908b169063c86415cb90602401602060405180830381865afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d91906145f8565b610ecc576040516340c10f1960e01b8152306004820152602481018390526001600160a01b038416906340c10f1990604401600060405180830381600087803b158015610e5957600080fd5b505af1158015610e6d573d6000803e3d6000fd5b505060405163cc2ab7c760e01b8152600481018490526001600160a01b038616925063cc2ab7c79150602401600060405180830381600087803b158015610eb357600080fd5b505af1158015610ec7573d6000803e3d6000fd5b505050505b600084815260208c81526040808320805460ff19166001179055908b9052902080548015610f77576000610f008286614615565b905060005b82811015610f7457818c6000868481548110610f2357610f2361408a565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938c1682529290925281208054909190610f67908490614072565b9091555050600101610f05565b50505b8e63ffffffff16867f0e5f1128fa87ef75539a5e012b42695000db91072e7500fb2723ccbb37d0803c84888833604051610fb49493929190614637565b60405180910390a3505050505050505050505050505050565b60008681526020849052604090205460ff16610ffc57604051638fb4105f60e01b815260040160405180910390fd5b600086815260208481526040808320805460ff1916905590849052812080546001600160a01b031916905581906001600160a01b0387161561103e5786611040565b855b6001600160a01b0316815260208082019290925260409081016000908120805463ffffffff1916815560010155805188815233928101929092527f9d181adb70e733f5235f839c1eed929407ea8526e41d01f49b9fef703e78dddf910160405180910390a1505050505050565b600080846001600160a01b0387166110fa576110c98587614072565b34146110e85760405163024789fb60e21b815260040160405180910390fd5b6110f28685611d4b565b839650611127565b84341461111a5760405163eb9c265360e01b815260040160405180910390fd5b6111248787611d9a565b90505b9596945050505050565b6000808061113f878061412c565b61114d9060408101906146af565b915050604087013581111561117557604051631d3fc8eb60e31b815260040160405180910390fd5b600061118088611e89565b9050600081836040516020016111a0929190918252602082015260400190565b60405160208183030381529060405280519060200120905060005b83811015611310576111d360408b0160208c016146f8565b15801561123a57508660006111e88c8061412c565b6111f69060408101906146af565b848181106112065761120661408a565b905060200201602081019061121b9190614162565b6001600160a01b0316815260208101919091526040016000205460ff16155b1561125857604051633e0a9b4b60e11b815260040160405180910390fd5b61129b826112668c8061412c565b6112749060608101906146af565b848181106112845761128461408a565b90506020028101906112969190614715565b611fb3565b6001600160a01b03166112ae8b8061412c565b6112bc9060408101906146af565b838181106112cc576112cc61408a565b90506020020160208101906112e19190614162565b6001600160a01b031614611308576040516342f3355760e01b815260040160405180910390fd5b6001016111bb565b506000828152602089905260409020546001600160a01b03161561134757604051637716de0760e11b815260040160405180910390fd5b5060008181526020879052604090205490935060ff1691505094509492505050565b60008080611377888061412c565b6080013590506000611389898061412c565b6113979060408101906146af565b91505089156114c4576113c06113ad8a8061412c565b608001358a60c001358b60e00135612055565b91506113cc898061412c565b6113da9060408101906146af565b60008d815260208b9052604090206113f3929091613a6e565b5060006114008284614615565b905060005b828110156114c1578189600061141b8e8061412c565b6114299060408101906146af565b858181106114395761143961408a565b905060200201602081019061144e9190614162565b6001600160a01b0316815260208101919091526040016000908120906114748e8061412c565b611485906040810190602001614162565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114b4919061475b565b9091555050600101611405565b50505b6114fa85876114d960808d0160608e01614162565b6114e38d8061412c565b6114f4906040810190602001614162565b8661206c565b93509350505097509795505050505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470611537868061412c565b611541908061414c565b61154f906020810190614715565b60405161155d929190614772565b604051809103902014156115ac576115a783611579878061412c565b611583908061414c565b611591906020810190614162565b866115a260a08a0160808b01614162565b611b30565b6116fd565b6115c08361159160c0880160a08901614162565b6115d060c0860160a08701614162565b6001600160a01b0316631e29b44083866115ea898061412c565b6115f4908061414c565b611602906020810190614162565b8786611627576040518060400160405280601d815260200162ffffff1981525061166f565b61166f6116348c8061412c565b61163e908061414c565b61164f906060810190604001614596565b6116598d8061412c565b61166a9060e081019060c001614162565b6121c2565b6116798c8061412c565b611683908061414c565b611691906020810190614715565b6040518863ffffffff1660e01b81526004016116b39796959493929190614782565b6000604051808303816000875af11580156116d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116fa919081019061480c565b50505b5050505050565b6080810135611713828061414c565b61171d908061414c565b61172e906060810190604001614596565b63ffffffff161461175257604051632a5cab0560e11b815260040160405180910390fd5b600061175e828061414c565b611768908061414c565b611776906020810190614162565b6001600160a01b0316141561179e57604051633c9d0b4960e21b815260040160405180910390fd5b50565b604080516080810182526000808252602082018190529181018290526060818101839052906000806117d3888061414c565b6117e4906040810190602001614162565b6001600160a01b031614611812576117fc878061414c565b61180d906040810190602001614162565b611822565b6118226040880160208901614162565b6001600160a01b038116600090815260208881526040918290208251808401909352805463ffffffff1683526001015490820181905291925090611879576040516394ba466b60e01b815260040160405180910390fd5b60006118ca6118888a8061414c565b611899906040810190602001614162565b6118a38b8061414c565b604001356118b18c8061414c565b606001356118c560408e0160208f01614162565b6110ad565b915050600080611918848a60008760200151815260200190815260200160002060009054906101000a90046001600160a01b03168d60600160208101906119119190614162565b88876121f1565b9150915060006119288c86612351565b905060006119388d8484876123b7565b905061194a60c08e0160a08f01614162565b6001600160a01b031663fa31de016119628f8061414c565b61196c908061414c565b61197d906080810190606001614596565b8f60c00135846040518463ffffffff1660e01b81526004016119a193929190614870565b600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b5050604080516080810182526001600160a01b039a8b168152602081019890985287019590955250919095166060840152939a9399509097509195505050505050565b80471015611a625760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104a7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611aaf576040519150601f19603f3d011682016040523d82523d6000602084013e611ab4565b606091505b5050905080611b2b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016104a7565b505050565b6001600160a01b038416611b5757604051632b28b36d60e01b815260040160405180910390fd5b806001600160a01b0316846001600160a01b03161415611bda57604051632e1a7d4d60e01b8152600481018390526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b50505050611bd58383611a12565b611be5565b611be5848484612730565b50505050565b815160009060208401611c0664ffffffffff85168284612793565b95945050505050565b6000611c28611c1d836127d7565b62ffffff1916612809565b92915050565b6000816002611c45815b62ffffff19841690612864565b50611c5b62ffffff19851660006024600161293d565b949350505050565b6000816002611c7181611c38565b506000611c8c6024601887901c6001600160601b031661475b565b90506000611c99866129ad565b60ff169050611cb162ffffff1987166024848461293d565b9695505050505050565b6000611c288260036129c2565b6000611c2862ffffff19831660616020612a21565b6000816001611ceb81611c38565b50611c5b62ffffff19851660006004612b7a565b6000816001611d0d81611c38565b50611c5b62ffffff19851660046020612a21565b6000611c2862ffffff19831660216020612b7a565b6000611c2862ffffff19831660416020612a21565b806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d8657600080fd5b505af11580156116fa573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa158015611de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0791906148ab565b9050611e1584333086612baa565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a0823190602401602060405180830381865afa158015611e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7f91906148ab565b611c5b919061475b565b60008080611e9d6080850160608601614162565b6001600160a01b031663f1537686611eb5868061412c565b611ec6906040810190602001614162565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381865afa158015611f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2d91906148c4565b9092509050611f3c848061412c565b60a00135611f4a858061412c565b611f54908061414c565b611f5e868061412c565b611f6f9060e081019060c001614162565b8385611f7b898061412c565b60800135604051602001611f94969594939291906148f2565b6040516020818303038152906040528051906020012092505050919050565b600061204b61200f856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612be292505050565b90505b9392505050565b600081612062848661493f565b61204b9190614615565b6040516378a9bb4360e11b81526001600160a01b038381166004830152600091829182919087169063f1537686906024016040805180830381865afa1580156120b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120dd91906148c4565b600081815260208b905260409020549092506001600160a01b03908116915086168114156121125784869350935050506121b8565b6000828152602089905260409020546001600160a01b0316612135878288612c06565b60405163d5914c4560e01b8152600481018790526001600160a01b038881166024830152838116604483015282169063d5914c45906064016020604051808303816000875af115801561218c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b091906148ab565b945090925050505b9550959350505050565b6060600183836040516020016121da9392919061495e565b604051602081830303815290604052905092915050565b602085015160009081906122095750819050826121b8565b86516020880151604051631626cf1960e21b815263ffffffff909216600483015260248201526000906001600160a01b0387169063589b3c6490604401602060405180830381865afa158015612263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228791906145cd565b9050836122985783925090506121b8565b846001600160a01b0316816001600160a01b031614156122be57838592509250506121b8565b6122c9858886612c06565b60405163d5914c4560e01b8152600481018590526001600160a01b038681166024830152828116604483015288169063d5914c45906064016020604051808303816000875af1158015612320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234491906148ab565b9890975095505050505050565b60006040830135612362848061414c565b61236c908061414c565b60208401518451339190612380888061414c565b60400135604051602001612399969594939291906148f2565b60405160208183030381529060405280519060200120905092915050565b60608360006123cb60808801888501614162565b60405163c86415cb60e01b81526001600160a01b038881166004830152919091169063c86415cb90602401602060405180830381865afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243791906145f8565b1561257b57612574826001600160a01b03166306fdde036040518163ffffffff1660e01b81526004016000604051808303816000875af115801561247f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124a791908101906149ab565b836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156124e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261250d91908101906149ab565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561254b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256f91906149f3565b612d1b565b9050612647565b83156125e257604051632770a7eb60e21b8152336004820152602481018590526001600160a01b03831690639dc29fac90604401600060405180830381600087803b1580156125c957600080fd5b505af11580156125dd573d6000803e3d6000fd5b505050505b816001600160a01b0316634815fcb16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264491906148ab565b90505b600061268561267d6126598a8061414c565b612663908061414c565b612671906020810190614162565b6001600160a01b031690565b868489612d57565b905060008061269a60808b0160608c01614162565b6040516378a9bb4360e11b81526001600160a01b038b81166004830152919091169063f1537686906024016040805180830381865afa1580156126e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270591906148c4565b9150915060006127158383612da9565b90506127218185612ddd565b9b9a5050505050505050505050565b6040516001600160a01b038316602482015260448101829052611b2b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612eac565b6000806127a08385614072565b90506040518111156127b0575060005b806127c25762ffffff1991505061204e565b5050606092831b9190911790911b1760181b90565b60006127e282612f7e565b156127ff576301000000600160d81b038216600160d91b17611c28565b62ffffff19611c28565b600061281482612fa1565b6128605760405162461bcd60e51b815260206004820152601960248201527f56616c696469747920617373657274696f6e206661696c65640000000000000060448201526064016104a7565b5090565b60006128708383612fdf565b61293657600061288f6128838560d81c90565b64ffffffffff16613002565b91505060006128a48464ffffffffff16613002565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b81526004016104a79190614a16565b5090919050565b6000806129538660781c6001600160601b031690565b6001600160601b03169050612967866130b0565b846129728784614072565b61297c9190614072565b111561298f5762ffffff19915050611c5b565b6129998582614072565b9050611cb18364ffffffffff168286612793565b6000611c2862ffffff19831660246001612b7a565b60008160038111156129d6576129d6614895565b60ff166129e2846130e9565b60ff1614801561204e57508160038111156129ff576129ff614895565b612a08846130fd565b6003811115612a1957612a19614895565b149392505050565b600060ff8216612a335750600061204e565b612a468460181c6001600160601b031690565b6001600160601b0316612a5c60ff841685614072565b1115612ac057612aa7612a788560781c6001600160601b031690565b6001600160601b0316612a948660181c6001600160601b031690565b6001600160601b0316858560ff16613118565b60405162461bcd60e51b81526004016104a79190614a16565b60208260ff161115612b3a5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016104a7565b600882026000612b538660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000612b87826020614a29565b612b92906008614a4c565b60ff16612ba0858585612a21565b901c949350505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611be59085906323b872dd60e01b9060840161275c565b6000806000612bf18585613186565b91509150612bfe816131f6565b509392505050565b801580612c805750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7e91906148ab565b155b612ceb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104a7565b6040516001600160a01b038316602482015260448101829052611b2b90849063095ea7b360e01b9060640161275c565b600083518484518585604051602001612d38959493929190614a75565b6040516020818303038152906040528051906020012090509392505050565b6000611c066003612d936000600389898989604051602001612d7d959493929190614ad5565b60408051601f1981840301815291905290611beb565b6301000000600160d81b031660d89190911b1790565b600061204e60016040516001600160e01b031960e087901b16602082015260248101859052612d9390600090604401612d7d565b6060826001612deb81611c38565b50612df5846133b1565b612e2b5760405162461bcd60e51b815260206004820152600760248201526610b0b1ba34b7b760c91b60448201526064016104a7565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110612e6057612e6061408a565b602002602001019062ffffff1916908162ffffff1916815250508481600181518110612e8e57612e8e61408a565b62ffffff1990921660209283029190910190910152611cb1816133bc565b6000612f01826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134119092919063ffffffff16565b805190915015611b2b5780806020019051810190612f1f91906145f8565b611b2b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a7565b6000601882901c6001600160601b0316612f9a60816024614072565b1492915050565b6000612fad8260d81c90565b64ffffffffff1664ffffffffff1415612fc857506000919050565b6000612fd3836130b0565b60405110199392505050565b60008164ffffffffff16612ff38460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115613057576000613021826008614a4c565b60ff1685901c905061303281613420565b61ffff16841793508160ff1660101461304d57601084901b93505b5060001901613008565b50600f5b60ff8160ff1610156130aa576000613074826008614a4c565b60ff1685901c905061308581613420565b61ffff16831792508160ff166000146130a057601083901b92505b506000190161305b565b50915091565b60006130c58260181c6001600160601b031690565b6130d88360781c6001600160601b031690565b016001600160601b03169050919050565b6000611c2862ffffff198316826001612b7a565b600060d882901c60ff166003811115611c2857611c28614895565b6060600061312586613002565b915050600061313386613002565b915050600061314186613002565b915050600061314f86613002565b915050838383836040516020016131699493929190614b10565b604051602081830303815290604052945050505050949350505050565b6000808251604114156131bd5760208301516040840151606085015160001a6131b187828585613452565b945094505050506131ef565b8251604014156131e757602083015160408401516131dc86838361353c565b9350935050506131ef565b506000905060025b9250929050565b600081600481111561320a5761320a614895565b14156132135750565b600181600481111561322757613227614895565b14156132755760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104a7565b600281600481111561328957613289614895565b14156132d75760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104a7565b60038160048111156132eb576132eb614895565b14156133445760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104a7565b600481600481111561335857613358614895565b141561179e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104a7565b6000611c2882611cbb565b60405160609060006133d18460208401613575565b905060006133e88260181c6001600160601b031690565b6001600160601b0316905060006133fe83613605565b9184525082016020016040525092915050565b606061204b848460008561361b565b600061343260048360ff16901c61374c565b60ff1661ffff919091161760081b6134498261374c565b60ff1617919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156134895750600090506003610758565b8460ff16601b141580156134a157508460ff16601c14155b156134b25750600090506004610758565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613506573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661352f57600060019250925050610758565b9660009650945050505050565b6000806001600160ff1b0383168161355960ff86901c601b614072565b905061356787828885613452565b935093505050935093915050565b6000604051828111156135885760206060fd5b506000805b84518110156135f55760008582815181106135aa576135aa61408a565b602002602001015190506135c0818487016138a8565b506135d48160181c6001600160601b031690565b6001600160601b0316830192505080806135ed90614be7565b91505061358d565b50606083901b811760181b611c5b565b600061361082613a00565b611c2890602061493f565b60608247101561367c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a7565b6001600160a01b0385163b6136d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a7565b600080866001600160a01b031685876040516136ef9190614c02565b60006040518083038185875af1925050503d806000811461372c576040519150601f19603f3d011682016040523d82523d6000602084013e613731565b606091505b5091509150613741828286613a35565b979650505050505050565b600060f08083179060ff821614156137675750603092915050565b8060ff1660f1141561377c5750603192915050565b8060ff1660f214156137915750603292915050565b8060ff1660f314156137a65750603392915050565b8060ff1660f414156137bb5750603492915050565b8060ff1660f514156137d05750603592915050565b8060ff1660f614156137e55750603692915050565b8060ff1660f714156137fa5750603792915050565b8060ff1660f8141561380f5750603892915050565b8060ff1660f914156138245750603992915050565b8060ff1660fa14156138395750606192915050565b8060ff1660fb141561384e5750606292915050565b8060ff1660fc14156138635750606392915050565b8060ff1660fd14156138785750606492915050565b8060ff1660fe141561388d5750606592915050565b8060ff1660ff14156138a25750606692915050565b50919050565b600062ffffff1980841614156139115760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016104a7565b61391a83612fa1565b61397a5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016104a7565b600061398f8460181c6001600160601b031690565b6001600160601b0316905060006139af8560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156139cf5760206060fd5b8285848460045afa50611cb16139e58760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60006020613a178360181c6001600160601b031690565b613a2b906001600160601b03166020614072565b611c289190614615565b60608315613a4457508161204e565b825115613a545782518084602001fd5b8160405162461bcd60e51b81526004016104a79190614a16565b828054828255906000526020600020908101928215613ac1579160200282015b82811115613ac15781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613a8e565b506128609291505b808211156128605760008155600101613ac9565b6001600160a01b038116811461179e57600080fd5b8035613afd81613add565b919050565b60008060408385031215613b1557600080fd5b8235613b2081613add565b946020939093013593505050565b60008060008060008060c08789031215613b4757600080fd5b863595506020870135613b5981613add565b94506040870135613b6981613add565b9350606087013592506080870135915060a0870135613b8781613add565b809150509295509295509295565b63ffffffff8116811461179e57600080fd5b60008083601f840112613bb957600080fd5b5081356001600160401b03811115613bd057600080fd5b6020830191508360208260051b85010111156131ef57600080fd5b60008060008060008060a08789031215613c0457600080fd5b8635613c0f81613b95565b95506020870135613c1f81613add565b945060408701356001600160401b03811115613c3a57600080fd5b613c4689828a01613ba7565b9095509350506060870135613c5a81613add565b80925050608087013590509295509295509295565b60008060408385031215613c8257600080fd5b50508035926020909101359150565b600080600080600080600080610100808a8c031215613caf57600080fd5b89356001600160401b03811115613cc557600080fd5b8a01808c03821315613cd657600080fd5b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e0013595509350505050565b60008060008060808587031215613d2357600080fd5b84356001600160401b03811115613d3957600080fd5b850160e08188031215613d4b57600080fd5b966020860135965060408601359560600135945092505050565b6000604082840312156138a257600080fd5b60008060008060008060e08789031215613d9057600080fd5b613d9a8888613d65565b95506040870135613daa81613add565b94506060870135613dba81613add565b959894975094956080810135955060a08101359460c0909101359350915050565b600080600060808486031215613df057600080fd5b613dfa8585613d65565b92506040840135613e0a81613add565b929592945050506060919091013590565b60008060008060608587031215613e3157600080fd5b8435613e3c81613add565b935060208501356001600160401b03811115613e5757600080fd5b613e6387828801613ba7565b9598909750949560400135949350505050565b600080600080600060a08688031215613e8e57600080fd5b853594506020860135613ea081613add565b93506040860135613eb081613add565b9250606086013591506080860135613ec781613add565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613f1357613f13613ed5565b604052919050565b60006001600160401b03821115613f3457613f34613ed5565b50601f01601f191660200190565b60008060008060008060c08789031215613f5b57600080fd5b8635613f6681613b95565b955060208701356001600160401b03811115613f8157600080fd5b8701601f81018913613f9257600080fd5b8035613fa5613fa082613f1b565b613eeb565b8181528a6020838501011115613fba57600080fd5b8160208401602083013760006020838301015280975050505060408701359350613fe660608801613af2565b92506080870135915060a087013590509295509295509295565b60008060008060008060c0878903121561401957600080fd5b86359550602087013561402b81613add565b9450604087013561403b81613add565b959894975094956060810135955060808101359460a0909101359350915050565b634e487b7160e01b600052601160045260246000fd5b600082198211156140855761408561405c565b500190565b634e487b7160e01b600052603260045260246000fd5b81835260006001600160fb1b038311156140b957600080fd5b8260051b8083602087013760009401602001938452509192915050565b63ffffffff851681526001600160a01b0384166020820152606060408201819052600090611cb190830184866140a0565b6001600160a01b0384168152604060208201819052600090611c0690830184866140a0565b6000823560de1983360301811261414257600080fd5b9190910192915050565b60008235607e1983360301811261414257600080fd5b60006020828403121561417457600080fd5b813561204e81613add565b60008235607e1983360301811261419557600080fd5b90910192915050565b6000808335601e198436030181126141b557600080fd5b83016020810192503590506001600160401b038111156141d457600080fd5b8036038313156131ef57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000813561421981613add565b6001600160a01b03168352614231602083018361419e565b608060208601526142466080860182846141e3565b915050604083013561425781613b95565b63ffffffff908116604086015260608401359061427382613b95565b16606094909401939093525090919050565b6000808335601e1984360301811261429c57600080fd5b83016020810192503590506001600160401b038111156142bb57600080fd5b8060051b36038313156131ef57600080fd5b8183526000602080850194508260005b8581101561430b5781356142f081613add565b6001600160a01b0316875295820195908201906001016142dd565b509495945050505050565b60008383855260208086019550808560051b8301018460005b8781101561436957848303601f1901895261434a828861419e565b6143558582846141e3565b9a86019a945050509083019060010161432f565b5090979650505050505050565b608081526000614386868761417f565b60e0608084015261439b61016084018261420c565b905060208701356143ab81613add565b6001600160a01b031660a08401526143c66040880188614285565b607f19808685030160c08701526143de8483856142cd565b93506143ed60608b018b614285565b93509150808685030160e087015250614407838383614316565b92505050608087013561010084015260a087013561012084015261442d60c08801613af2565b6001600160a01b03908116610140850152868116602085015260408401869052841660608401529050611c06565b60005b8381101561447657818101518382015260200161445e565b83811115611be55750506000910152565b6000815180845261449f81602086016020860161445b565b601f01601f19169290920160200192915050565b60006101008083526144c5888961417f565b6080828501526144d961018085018261420c565b91505060208801356144ea81613add565b6001600160a01b039081166101208501526040898101356101408601526060808b0135610160870152895183166020808801919091528a015182870152908901518186015288015116608084015260a0830186905282810360c08401526145518186614487565b915050611cb160e08301846001600160a01b03169052565b813561457481613b95565b63ffffffff811663ffffffff1983541617825550602082013560018201555050565b6000602082840312156145a857600080fd5b813561204e81613b95565b838152604060208201526000611c066040830184866140a0565b6000602082840312156145df57600080fd5b815161204e81613add565b801515811461179e57600080fd5b60006020828403121561460a57600080fd5b815161204e816145ea565b60008261463257634e487b7160e01b600052601260045260246000fd5b500490565b6000608082016080835280875480835260a08501915088600052602092508260002060005b828110156146815781546001600160a01b03168452928401926001918201910161465c565b5050506001600160a01b03968716918401919091526040830194909452509216606090920191909152919050565b6000808335601e198436030181126146c657600080fd5b8301803591506001600160401b038211156146e057600080fd5b6020019150600581901b36038213156131ef57600080fd5b60006020828403121561470a57600080fd5b813561204e816145ea565b6000808335601e1984360301811261472c57600080fd5b8301803591506001600160401b0382111561474657600080fd5b6020019150368190038213156131ef57600080fd5b60008282101561476d5761476d61405c565b500390565b8183823760009101908152919050565b878152602081018790526001600160a01b0386811660408301528516606082015260c0608082018190526000906147bb90830186614487565b82810360a08401526147ce8185876141e3565b9a9950505050505050505050565b60006147ea613fa084613f1b565b90508281528383830111156147fe57600080fd5b61204e83602083018461445b565b6000806040838503121561481f57600080fd5b825161482a816145ea565b60208401519092506001600160401b0381111561484657600080fd5b8301601f8101851361485757600080fd5b614866858251602084016147dc565b9150509250929050565b63ffffffff84168152826020820152606060408201526000611c066060830184614487565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156148bd57600080fd5b5051919050565b600080604083850312156148d757600080fd5b82516148e281613b95565b6020939093015192949293505050565b86815260c06020820152600061490b60c083018861420c565b6001600160a01b0396909616604083015250606081019390935263ffffffff91909116608083015260a09091015292915050565b60008160001904831182151516156149595761495961405c565b500290565b60006002851061497057614970614895565b5060f89390931b835260e09190911b6001600160e01b031916600183015260601b6bffffffffffffffffffffffff1916600582015260190190565b6000602082840312156149bd57600080fd5b81516001600160401b038111156149d357600080fd5b8201601f810184136149e457600080fd5b611c5b848251602084016147dc565b600060208284031215614a0557600080fd5b815160ff8116811461204e57600080fd5b60208152600061204e6020830184614487565b600060ff821660ff841680821015614a4357614a4361405c565b90039392505050565b600060ff821660ff84168160ff0481118215151615614a6d57614a6d61405c565b029392505050565b85815260008551614a8d816020850160208a0161445b565b80830190508560208201528451614aab81604084016020890161445b565b60f89490941b6001600160f81b031916604091909401908101939093525050604101949350505050565b600060048710614ae757614ae7614895565b5060f89590951b8552600185019390935260218401919091526041830152606182015260810190565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d8201611cb1565b6000600019821415614bfb57614bfb61405c565b5060010190565b6000825161414281846020870161445b56fea26469706673582212204a5afb7f080a6c5461b0bec5b02f6cfb39697b8a687517668a32e99b13787b2564736f6c634300080b0033",
  "devdoc": {
    "events": {
      "AssetAdded(bytes32,uint32,address,address,address)": {
        "params": {
          "adoptedAsset": "- The address of the adopted (user-expected) asset",
          "caller": "- The account that called the function",
          "canonicalId": "- The canonical identifier of the token the local <> adopted AMM is for",
          "domain": "- The domain of the canonical token for the local <> adopted amm",
          "supportedAsset": "- The address of the whitelisted asset. If the native asset is to be whitelisted, the address of the wrapped version will be stored"
        }
      },
      "AssetRemoved(bytes32,address)": {
        "params": {
          "caller": "- The account that called the function",
          "canonicalId": "- The canonical identifier of the token removed"
        }
      },
      "Claimed(address,uint256,bytes32[])": {
        "params": {
          "recipient": "- Address on origin chain to send claimed funds to",
          "total": "- Total amount claimed",
          "transferIds": "- TransferIds to claim"
        }
      },
      "Executed(bytes32,address,((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address),address,uint256,address)": {
        "details": "`execute` may be called when providing fast liquidity *or* when processing a reconciled transfer",
        "params": {
          "args": "- The ExecuteArgs provided to the function",
          "caller": "- The account that called the function",
          "to": "- The CallParams.to provided, created as indexed parameter",
          "transactingAmount": "- The amount of transferring asset the to address receives or the external call is executed with",
          "transactingAsset": "- The asset the to gets or the external call is executed with. Should be the adopted asset on that chain.",
          "transferId": "- The unique identifier of the crosschain transfer"
        }
      },
      "InitiatedClaim(uint32,address,address,bytes32[])": {
        "params": {
          "caller": "- The account that called the function",
          "domain": "- Domain to claim funds on",
          "recipient": "- Address on origin chain to send claimed funds to",
          "transferIds": "- TransferIds to claim"
        }
      },
      "LiquidityAdded(address,address,bytes32,uint256,address)": {
        "params": {
          "amount": "- The amount of liquidity added",
          "caller": "- The account that called the function",
          "local": "- The address of the token added (all liquidity held in local asset)",
          "router": "- The address of the router the funds were credited to"
        }
      },
      "LiquidityRemoved(address,address,address,uint256,address)": {
        "params": {
          "amount": "- The amount of liquidity withdrawn",
          "caller": "- The account that called the function",
          "local": "- The address of the token withdrawn",
          "router": "- The router you are removing liquidity from",
          "to": "- The address the funds were withdrawn to"
        }
      },
      "MaxRoutersPerTransferUpdated(uint256,address)": {
        "params": {
          "caller": "- The account that called the function",
          "maxRoutersPerTransfer": "- The maxRoutersPerTransfer new value"
        }
      },
      "Reconciled(bytes32,uint32,address[],address,uint256,address)": {
        "params": {
          "amount": "- The amount that was provided by the bridge",
          "asset": "- The asset that was provided by the bridge",
          "caller": "- The account that called the function",
          "origin": "- The origin domain of the transfer",
          "routers": "- The CallParams.recipient provided, created as indexed parameter",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "RelayerAdded(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "relayer": "- The relayer address to be added or removed"
        }
      },
      "RelayerRemoved(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "relayer": "- The relayer address to be added or removed"
        }
      },
      "StableSwapAdded(bytes32,uint32,address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "canonicalId": "- The canonical identifier of the token the local <> adopted AMM is for",
          "domain": "- The domain of the canonical token for the local <> adopted amm",
          "swapPool": "- The address of the AMM"
        }
      },
      "TransferRelayerFeesUpdated(bytes32,uint256,address)": {
        "params": {
          "caller": "- The account that called the function",
          "relayerFee": "- The updated amount of relayer fee in native asset",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addAssetId(ConnextMessage.TokenId,address,address,mapping(bytes32 => bool) storage,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => address) storage)": {
        "params": {
          "_adoptedAssetId": "- The used asset id for this domain (i.e. PoS USDC for polygon)",
          "_canonical": "- The canonical TokenId to add (domain and id)"
        }
      },
      "addLiquidityForRouter(uint256,address,address,mapping(address => mapping(address => uint256)) storage,bytes32,IWrapped)": {
        "details": "The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.",
        "params": {
          "_amount": "- The amount of liquidity to add for the router",
          "_canonicalId": "- Canonical asset id from the representation",
          "_local": "- The address of the nomad representation of the asset",
          "_router": "- The router you are adding liquidity on behalf of"
        }
      },
      "addRelayer(address,mapping(address => bool) storage)": {
        "params": {
          "_relayer": "- The relayer address to add"
        }
      },
      "addStableSwapPool(ConnextMessage.TokenId,address,mapping(bytes32 => IStableSwap) storage)": {
        "params": {
          "_canonical": "- The canonical TokenId to add (domain and id)",
          "_stableSwap": "- The address of the amm to add"
        }
      },
      "bumpTransfer(bytes32,mapping(bytes32 => uint256) storage)": {
        "params": {
          "_transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "claim(address,bytes32[],mapping(bytes32 => uint256) storage)": {
        "details": "Called by the RelayerFeeRouter.handle message. The validity of the transferIds is asserted before dispatching the message.",
        "params": {
          "_recipient": "- address on origin chain to send claimed funds to",
          "_relayerFees": "- Mapping of transactionIds to fee",
          "_transferIds": "- transferIds to claim"
        }
      },
      "execute(ConnextLogic.ExecuteLibArgs,mapping(bytes32 => address[]) storage,mapping(bytes32 => bool) storage,mapping(address => mapping(address => uint256)) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => address) storage,RouterPermissionsManagerInfo storage,mapping(bytes32 => address) storage)": {
        "details": "Can be called prior to or after `handle`, depending if fast liquidity is being used."
      },
      "initiateClaim(uint32,address,bytes32[],RelayerFeeRouter,mapping(bytes32 => address) storage)": {
        "details": "Domain should be the origin domain of all the transfer ids",
        "params": {
          "_domain": "- domain to claim funds on",
          "_recipient": "- address on origin chain to send claimed funds to",
          "_relayerFeeRouter": "- The local nomad relayer fee router",
          "_transferIds": "- transferIds to claim",
          "_transferRelayer": "- Mapping of transactionIds to relayer"
        }
      },
      "reconcile(uint32,bytes,mapping(bytes32 => bool) storage,ITokenRegistry,mapping(bytes32 => address[]) storage,mapping(address => mapping(address => uint256)) storage)": {
        "details": "Will either (a) credit router or (b) make funds available for execution. Don't include execution here"
      },
      "removeAssetId(bytes32,address,address,mapping(bytes32 => bool) storage,mapping(bytes32 => IStableSwap) storage,mapping(address => ConnextMessage.TokenId) storage)": {
        "params": {
          "_adoptedAssetId": "- Corresponding adopted asset to remove",
          "_canonicalId": "- Token id to remove"
        }
      },
      "removeLiquidity(uint256,address,address,mapping(address => mapping(address => uint256)) storage,IWrapped)": {
        "params": {
          "_amount": "- The amount of liquidity to remove for the router",
          "_local": "- The address of the asset you're removing liquidity from. If removing liquidity of the native asset, routers may use `address(0)` or the wrapped asset",
          "_recipient": "The address that will receive the liquidity being removed"
        }
      },
      "removeRelayer(address,mapping(address => bool) storage)": {
        "params": {
          "_relayer": "- The relayer address to remove"
        }
      },
      "setMaxRoutersPerTransfer(uint256,uint256)": {
        "params": {
          "_newMax": "The new max amount of routers"
        }
      },
      "xcall(ConnextLogic.XCallLibArgs,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => uint256) storage)": {
        "params": {
          "_adoptedToCanonical": "- Mapping of canonical to adopted assets on this domain",
          "_adoptedToLocalPools": "- Mapping holding the AMMs for swapping in and out of local assets",
          "_args": "- The XCallArgs",
          "_relayerFees": "- Mapping of relayer fee for a transfer"
        },
        "returns": {
          "_0": "The transfer id of the crosschain transfer"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(bytes32,uint32,address,address,address)": {
        "notice": "Emitted when a new asset is added"
      },
      "AssetRemoved(bytes32,address)": {
        "notice": "Emitted when an asset is removed from whitelists"
      },
      "Claimed(address,uint256,bytes32[])": {
        "notice": "Emitted when `claim` is called on the origin domain"
      },
      "Executed(bytes32,address,((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address),address,uint256,address)": {
        "notice": "Emitted when `execute` is called on the destination chain"
      },
      "InitiatedClaim(uint32,address,address,bytes32[])": {
        "notice": "Emitted when `initiateClaim` is called on the destination chain"
      },
      "LiquidityAdded(address,address,bytes32,uint256,address)": {
        "notice": "Emitted when a router adds liquidity to the contract"
      },
      "LiquidityRemoved(address,address,address,uint256,address)": {
        "notice": "Emitted when a router withdraws liquidity from the contract"
      },
      "MaxRoutersPerTransferUpdated(uint256,address)": {
        "notice": "Emitted when the maxRoutersPerTransfer variable is updated"
      },
      "Reconciled(bytes32,uint32,address[],address,uint256,address)": {
        "notice": "Emitted when `reconciled` is called by the bridge on the destination domain"
      },
      "RelayerAdded(address,address)": {
        "notice": "Emitted when a rlayer is added or removed from whitelists"
      },
      "RelayerRemoved(address,address)": {
        "notice": "Emitted when a rlayer is added or removed from whitelists"
      },
      "StableSwapAdded(bytes32,uint32,address,address)": {
        "notice": "Emitted when a new stable-swap AMM is added for the local <> adopted token"
      },
      "TransferRelayerFeesUpdated(bytes32,uint256,address)": {
        "notice": "Emitted when `bumpTransfer` is called by an user on the origin domain"
      },
      "XCalled(bytes32,((address,bytes,uint32,uint32),address,uint256,uint256),(address,uint256,uint256,address),uint256,bytes,address)": {
        "notice": "Emitted when `xcall` is called on the origin domain"
      }
    },
    "kind": "user",
    "methods": {
      "addAssetId(ConnextMessage.TokenId,address,address,mapping(bytes32 => bool) storage,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => address) storage)": {
        "notice": "Used to add assets on same chain as contract that can be transferred."
      },
      "addLiquidityForRouter(uint256,address,address,mapping(address => mapping(address => uint256)) storage,bytes32,IWrapped)": {
        "notice": "Contains the logic to verify + increment a given routers liquidity"
      },
      "addRelayer(address,mapping(address => bool) storage)": {
        "notice": "Used to add approved relayer"
      },
      "addStableSwapPool(ConnextMessage.TokenId,address,mapping(bytes32 => IStableSwap) storage)": {
        "notice": "Used to add an AMM for adopted <> local assets"
      },
      "bumpTransfer(bytes32,mapping(bytes32 => uint256) storage)": {
        "notice": "Anyone can call this function on the origin domain to increase the relayer fee for a transfer."
      },
      "claim(address,bytes32[],mapping(bytes32 => uint256) storage)": {
        "notice": "Pays out a relayer for the given fees"
      },
      "execute(ConnextLogic.ExecuteLibArgs,mapping(bytes32 => address[]) storage,mapping(bytes32 => bool) storage,mapping(address => mapping(address => uint256)) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => address) storage,RouterPermissionsManagerInfo storage,mapping(bytes32 => address) storage)": {
        "notice": "Called on the destination domain to disburse correct assets to end recipient and execute any included calldata"
      },
      "initiateClaim(uint32,address,bytes32[],RelayerFeeRouter,mapping(bytes32 => address) storage)": {
        "notice": "Called by relayer when they want to claim owed funds on a given domain"
      },
      "reconcile(uint32,bytes,mapping(bytes32 => bool) storage,ITokenRegistry,mapping(bytes32 => address[]) storage,mapping(address => mapping(address => uint256)) storage)": {
        "notice": "Called via `handle` to manage funds associated with a transaction"
      },
      "removeAssetId(bytes32,address,address,mapping(bytes32 => bool) storage,mapping(bytes32 => IStableSwap) storage,mapping(address => ConnextMessage.TokenId) storage)": {
        "notice": "Used to remove assets from the whitelist"
      },
      "removeLiquidity(uint256,address,address,mapping(address => mapping(address => uint256)) storage,IWrapped)": {
        "notice": "This is used by any router to decrease their available liquidity for a given asset."
      },
      "removeRelayer(address,mapping(address => bool) storage)": {
        "notice": "Used to remove approved relayer"
      },
      "setMaxRoutersPerTransfer(uint256,uint256)": {
        "notice": "Used to set the max amount of routers a payment can be routed through"
      },
      "xcall(ConnextLogic.XCallLibArgs,mapping(address => ConnextMessage.TokenId) storage,mapping(bytes32 => IStableSwap) storage,mapping(bytes32 => uint256) storage)": {
        "notice": "This function is called ConnextHandler when a user who is looking to bridge funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}