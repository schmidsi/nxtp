{
  "address": "0xC489df6568263F5F3bD4Dc1A4A8aa5438A1F285D",
  "abi": [
    {
      "inputs": [],
      "name": "ConnextHandler__addLiquidityForRouter_amountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextHandler__addLiquidityForRouter_badAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextHandler__addLiquidityForRouter_badRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextHandler__addLiquidityForRouter_routerEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextHandler__bumpTransfer_valueIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextHandler__execute_unapprovedRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextHandler__onlyRelayerFeeRouter_notRelayerFeeRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConnextHandler__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__acceptProposedOwner_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__acceptProposedOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__proposeAssetOwnershipRenunciation_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__proposeRouterOwnershipRenunciation_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceAssetOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceAssetOwnership_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceAssetOwnership_noProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceRouterOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceRouterOwnership_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnableUpgradeable__renounceRouterOwnership_noProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RouterPermissionsManagerLogic__setupRouter_amountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RouterPermissionsManagerLogic__setupRouter_routerEmpty",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "renounced",
          "type": "bool"
        }
      ],
      "name": "AssetOwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AssetOwnershipRenunciationProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "renounced",
          "type": "bool"
        }
      ],
      "name": "RouterOwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RouterOwnershipRenunciationProposed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_FEE_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "acceptProposedRouterOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_local",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_local",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "addLiquidityFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "addRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConnextMessage.TokenId",
          "name": "_canonical",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_stableSwapPool",
          "type": "address"
        }
      ],
      "name": "addStableSwapPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adoptedToCanonical",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "adoptedToLocalPools",
      "outputs": [
        {
          "internalType": "contract IStableSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "approvedAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedRelayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetOwnershipTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "bumpTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "canonicalToAdopted",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_transferIds",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IConnextHandler.CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "local",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "routers",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "routerSignatures",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            }
          ],
          "internalType": "struct IConnextHandler.ExecuteArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "contract IExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "getProposedRouterOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "getProposedRouterOwnerTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "getRouterApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "getRouterOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "getRouterRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_nonce",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayerFeeRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_transferIds",
          "type": "bytes32[]"
        }
      ],
      "name": "initiateClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAssetOwnershipRenounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRouterOwnershipRenounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRoutersPerTransfer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposeAssetOwnershipRenunciation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposed",
          "type": "address"
        }
      ],
      "name": "proposeRouterOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposeRouterOwnershipRenunciation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "reconciledTransfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerFeeRouter",
      "outputs": [
        {
          "internalType": "contract RelayerFeeRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "relayerFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "remotes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_canonicalId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_adoptedAssetId",
          "type": "address"
        }
      ],
      "name": "removeAssetId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_local",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "removeRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "removeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAssetOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceRouterOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routedTransfers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerOwnershipTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxRouters",
          "type": "uint256"
        }
      ],
      "name": "setMaxRoutersPerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "setRouterRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        }
      ],
      "name": "setXAppConnectionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConnextMessage.TokenId",
          "name": "_canonical",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_adoptedAssetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableSwapPool",
          "type": "address"
        }
      ],
      "name": "setupAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "setupRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "contract ITokenRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transferRelayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapper",
      "outputs": [
        {
          "internalType": "contract IWrapped",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xAppConnectionManager",
      "outputs": [
        {
          "internalType": "contract XAppConnectionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IConnextHandler.CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "transactingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relayerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IConnextHandler.XCallArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "xcall",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8d220d00235bb7ed8969eceffce526df1820f6dae8a4ce70b3712a07494fe60d",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0xC489df6568263F5F3bD4Dc1A4A8aa5438A1F285D",
    "transactionIndex": 0,
    "gasUsed": "4418652",
    "logsBloom": "0x
    "blockHash": "0x83d9e246eb2525e34100ff664c115b82ec383c146473627b8c68ca8bad3b578e",
    "transactionHash": "0x8d220d00235bb7ed8969eceffce526df1820f6dae8a4ce70b3712a07494fe60d",
    "logs": [],
    "blockNumber": 31270368,
    "cumulativeGasUsed": "4418652",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a533283e505337f2151e2443d6fef62f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ConnextHandler__addLiquidityForRouter_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextHandler__addLiquidityForRouter_badAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextHandler__addLiquidityForRouter_badRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextHandler__addLiquidityForRouter_routerEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextHandler__bumpTransfer_valueIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextHandler__execute_unapprovedRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextHandler__onlyRelayerFeeRouter_notRelayerFeeRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnextHandler__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__acceptProposedOwner_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__acceptProposedOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__proposeAssetOwnershipRenunciation_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__proposeRouterOwnershipRenunciation_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceAssetOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceAssetOwnership_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceAssetOwnership_noProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceRouterOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceRouterOwnership_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnableUpgradeable__renounceRouterOwnership_noProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsManagerLogic__setupRouter_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsManagerLogic__setupRouter_routerEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"renounced\",\"type\":\"bool\"}],\"name\":\"AssetOwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetOwnershipRenunciationProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"renounced\",\"type\":\"bool\"}],\"name\":\"RouterOwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RouterOwnershipRenunciationProposed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDITY_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"acceptProposedRouterOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_local\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_local\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"addLiquidityFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"addRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConnextMessage.TokenId\",\"name\":\"_canonical\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_stableSwapPool\",\"type\":\"address\"}],\"name\":\"addStableSwapPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adoptedToCanonical\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"adoptedToLocalPools\",\"outputs\":[{\"internalType\":\"contract IStableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRelayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetOwnershipTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"bumpTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"canonicalToAdopted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_transferIds\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"internalType\":\"struct IConnextHandler.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"routerSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"}],\"internalType\":\"struct IConnextHandler.ExecuteArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"contract IExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"getProposedRouterOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"getProposedRouterOwnerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"getRouterApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"getRouterOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"getRouterRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayerFeeRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_transferIds\",\"type\":\"bytes32[]\"}],\"name\":\"initiateClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAssetOwnershipRenounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRouterOwnershipRenounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoutersPerTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeAssetOwnershipRenunciation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"proposeRouterOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeRouterOwnershipRenunciation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"reconciledTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerFeeRouter\",\"outputs\":[{\"internalType\":\"contract RelayerFeeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"relayerFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"remotes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_canonicalId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_adoptedAssetId\",\"type\":\"address\"}],\"name\":\"removeAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_local\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"removeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAssetOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRouterOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routedTransfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerOwnershipTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxRouters\",\"type\":\"uint256\"}],\"name\":\"setMaxRoutersPerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setRouterRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"}],\"name\":\"setXAppConnectionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConnextMessage.TokenId\",\"name\":\"_canonical\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_adoptedAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableSwapPool\",\"type\":\"address\"}],\"name\":\"setupAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setupRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contract ITokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transferRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapper\",\"outputs\":[{\"internalType\":\"contract IWrapped\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xAppConnectionManager\",\"outputs\":[{\"internalType\":\"contract XAppConnectionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"internalType\":\"struct IConnextHandler.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IConnextHandler.XCallArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"xcall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Connext Labs\",\"details\":\"This contract primarily contains the storage used by the functions within the `ConnextLogic` contract, which contains the meaningful logic\",\"kind\":\"dev\",\"methods\":{\"acceptProposedRouterOwner(address)\":{\"params\":{\"router\":\"Router address to set recipient\"}},\"addLiquidity(uint256,address)\":{\"details\":\"The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.\",\"params\":{\"_amount\":\"- The amount of liquidity to add for the router\",\"_local\":\"- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset\"}},\"addLiquidityFor(uint256,address,address)\":{\"details\":\"The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.\",\"params\":{\"_amount\":\"- The amount of liquidity to add for the router\",\"_local\":\"- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset\",\"_router\":\"The router you are adding liquidity on behalf of\"}},\"addRelayer(address)\":{\"params\":{\"_relayer\":\"- The relayer address to add\"}},\"bumpTransfer(bytes32)\":{\"params\":{\"_transferId\":\"- The unique identifier of the crosschain transaction\"}},\"claim(address,bytes32[])\":{\"details\":\"Called by the RelayerFeeRouter.handle message. The validity of the transferIds is asserted before dispatching the message.\",\"params\":{\"_recipient\":\"- address on origin chain to send claimed funds to\",\"_transferIds\":\"- transferIds to claim\"}},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote xApp Router\",\"_router\":\"The address of the remote xApp Router\"}},\"execute(((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address))\":{\"details\":\"Can be called prior to or after `handle`, depending if fast liquidity is being used.\"},\"getProposedRouterOwner(address)\":{\"details\":\"All routers must wait for the delay timeout before accepting a new owner\",\"params\":{\"_router\":\"The relevant router address\"}},\"getProposedRouterOwnerTimestamp(address)\":{\"details\":\"All routers must wait for the delay timeout before accepting a new owner\",\"params\":{\"_router\":\"The relevant router address\"}},\"getRouterApproval(address)\":{\"params\":{\"_router\":\"The relevant router address\"}},\"getRouterOwner(address)\":{\"details\":\"Uses logic function here to handle the case where router owner is not set. Other getters within this interface use explicitly the stored value\",\"params\":{\"_router\":\"The relevant router address\"}},\"getRouterRecipient(address)\":{\"details\":\"The recipient (if set) receives all funds when router liquidity is removed\",\"params\":{\"_router\":\"The relevant router address\"}},\"handle(uint32,uint32,bytes32,bytes)\":{\"details\":\"This function relies on nomad relayers and should not consume arbitrary amounts of gas\",\"params\":{\"_message\":\"The message\",\"_nonce\":\"The unique identifier for the message from origin to destination\",\"_origin\":\"The origin domain\",\"_sender\":\"The sender address\"}},\"initiateClaim(uint32,address,bytes32[])\":{\"details\":\"Domain should be the origin domain of all the transfer ids\",\"params\":{\"_domain\":\"- domain to claim funds on\",\"_recipient\":\"- address on origin chain to send claimed funds to\",\"_transferIds\":\"- transferIds to claim\"}},\"proposeRouterOwner(address,address)\":{\"params\":{\"proposed\":\"Proposed owner Address to set to router\",\"router\":\"Router address to set recipient\"}},\"removeAssetId(bytes32,address)\":{\"params\":{\"_adoptedAssetId\":\"- Corresponding adopted asset to remove\",\"_canonicalId\":\"- Token id to remove\"}},\"removeLiquidity(uint256,address,address)\":{\"params\":{\"_amount\":\"- The amount of liquidity to remove for the router\",\"_local\":\"- The address of the asset you're removing liquidity from. If removing liquidity of the native asset, routers may use `address(0)` or the wrapped asset\",\"_to\":\"The address that will receive the liquidity being removed\"}},\"removeRelayer(address)\":{\"params\":{\"_relayer\":\"- The relayer address to remove\"}},\"removeRouter(address)\":{\"params\":{\"_router\":\"Router address to remove\"}},\"setMaxRoutersPerTransfer(uint256)\":{\"params\":{\"_newMaxRouters\":\"The new max amount of routers\"}},\"setRouterRecipient(address,address)\":{\"details\":\"Router should only be able to set this once otherwise if router key compromised, no problem is solved since attacker could just update recipient\",\"params\":{\"recipient\":\"Recipient Address to set to router\",\"router\":\"Router address to set recipient\"}},\"setXAppConnectionManager(address)\":{\"params\":{\"_xAppConnectionManager\":\"The address of the xAppConnectionManager contract\"}},\"setupAsset((uint32,bytes32),address,address)\":{\"details\":\"When whitelisting the canonical asset, all representational assets would be whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC on polygon), you should *not* whitelist the adopted asset. The stable swap pool address used should allow you to swap between the local <> adopted asset\",\"params\":{\"_adoptedAssetId\":\"- The used asset id for this domain (i.e. PoS USDC for polygon)\",\"_canonical\":\"- The canonical asset to add by id and domain. All representations will be whitelisted as well\"}},\"setupRouter(address,address,address)\":{\"params\":{\"_owner\":\"Initial Owner of router\",\"_recipient\":\"Initial Recipient of router\",\"_router\":\"Router address to setup\"}},\"xcall(((address,bytes,uint32,uint32),address,uint256,uint256))\":{\"details\":\"This contract must have approval to transfer the adopted assets. They are then swapped to the local nomad assets via the configured AMM and sent over the bridge router.\",\"params\":{\"_args\":\"- The XCallArgs\"},\"returns\":{\"_0\":\"The transfer id of the crosschain transfer\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"adoptedToCanonical\":{\"details\":\"If the adopted asset is the native asset, the keyed address will be the wrapped asset address\"},\"adoptedToLocalPools\":{\"details\":\"Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)\"},\"approvedAssets\":{\"details\":\"Mapping is keyed on the canonical token identifier matching what is stored in the token registry\"},\"approvedRelayers\":{\"details\":\"Send relayer fee if msg.sender is approvedRelayer. otherwise revert()\"},\"canonicalToAdopted\":{\"details\":\"If the adopted asset is the native asset, the stored address will be the wrapped asset address\"},\"domain\":{\"details\":\"Must match the nomad domain, which is distinct from the \\\"chainId\\\"\"},\"nonce\":{\"details\":\"Assigned at first interaction (xcall on origin domain);\"},\"relayerFees\":{\"details\":\"This will track all of the relayer fees assigned to a transfer by id, including any bumps made by the relayer\"},\"routerBalances\":{\"details\":\"Routers should always store liquidity that they can expect to receive via the bridge on this domain (the nomad local asset)\"},\"transferRelayer\":{\"details\":\"When relayer claims, must check that the msg.sender has forwarded transfer\"},\"wrapper\":{\"details\":\"Needed because the nomad only handles ERC20 assets\"}},\"title\":\"ConnextHandler\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"acceptProposedRouterOwner(address)\":{\"notice\":\"New router owner must accept role, or previous if proposed is 0x0\"},\"addLiquidity(uint256,address)\":{\"notice\":\"This is used by any router to increase their available liquidity for a given asset.\"},\"addLiquidityFor(uint256,address,address)\":{\"notice\":\"This is used by anyone to increase a router's available liquidity for a given asset.\"},\"addRelayer(address)\":{\"notice\":\"Used to add approved relayer\"},\"addStableSwapPool((uint32,bytes32),address)\":{\"notice\":\"Adds a stable swap pool for the local <> adopted asset.\"},\"adoptedToCanonical(address)\":{\"notice\":\"Mapping of canonical to adopted assets on this domain\"},\"adoptedToLocalPools(bytes32)\":{\"notice\":\"Mapping holding the AMMs for swapping in and out of local assets\"},\"approvedAssets(bytes32)\":{\"notice\":\"Mapping of whitelisted assets on same domain as contract\"},\"approvedRelayers(address)\":{\"notice\":\"Mapping of approved relayers\"},\"assetOwnershipTimestamp()\":{\"notice\":\"Returns the timestamp when asset ownership was last proposed to be renounced\"},\"bumpTransfer(bytes32)\":{\"notice\":\"Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\"},\"canonicalToAdopted(bytes32)\":{\"notice\":\"Mapping of adopted to canonical on this domain\"},\"claim(address,bytes32[])\":{\"notice\":\"Pays out a relayer for the given fees\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"domain()\":{\"notice\":\"The domain this contract exists on\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same xApp on a remote chain\"},\"execute(((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address))\":{\"notice\":\"Called on the destination domain to disburse correct assets to end recipient and execute any included calldata\"},\"executor()\":{\"notice\":\"The external contract that will execute crosschain calldata\"},\"getProposedRouterOwner(address)\":{\"notice\":\"Returns the currently proposed router owner\"},\"getProposedRouterOwnerTimestamp(address)\":{\"notice\":\"Returns the currently proposed router owner timestamp\"},\"getRouterApproval(address)\":{\"notice\":\"Returns the approved router for the given router address\"},\"getRouterOwner(address)\":{\"notice\":\"Returns the router owner if it is set, or the router itself if not\"},\"getRouterRecipient(address)\":{\"notice\":\"Returns the recipient for the specified router\"},\"handle(uint32,uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message\"},\"initiateClaim(uint32,address,bytes32[])\":{\"notice\":\"Called by relayer when they want to claim owed funds on a given domain\"},\"isAssetOwnershipRenounced()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"isRouterOwnershipRenounced()\":{\"notice\":\"Indicates if the ownership of the router whitelist has been renounced\"},\"maxRoutersPerTransfer()\":{\"notice\":\"The max amount of routers a payment can be routed through\"},\"nonce()\":{\"notice\":\"Nonce for the contract, used to keep unique transfer ids.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"proposeAssetOwnershipRenunciation()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposeRouterOwner(address,address)\":{\"notice\":\"Current owner or router may propose a new router owner\"},\"proposeRouterOwnershipRenunciation()\":{\"notice\":\"Indicates if the ownership of the router whitelist has been renounced\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"reconciledTransfers(bytes32)\":{\"notice\":\"Mapping to determine if transfer is reconciled\"},\"relayerFeeRouter()\":{\"notice\":\"The local nomad relayer fee router\"},\"relayerFees(bytes32)\":{\"notice\":\"Stores the relayer fee for a transfer. Updated on origin domain when a user calls xcall or bump\"},\"removeAssetId(bytes32,address)\":{\"notice\":\"Used to remove assets from the whitelist\"},\"removeLiquidity(uint256,address,address)\":{\"notice\":\"This is used by any router to decrease their available liquidity for a given asset.\"},\"removeRelayer(address)\":{\"notice\":\"Used to remove approved relayer\"},\"removeRouter(address)\":{\"notice\":\"Used to remove routers that can transact crosschain\"},\"renounceAssetOwnership()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounceRouterOwnership()\":{\"notice\":\"Indicates if the ownership of the asset whitelist has been renounced\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"routedTransfers(bytes32,uint256)\":{\"notice\":\"Mapping holding router address that provided fast liquidity\"},\"routerBalances(address,address)\":{\"notice\":\"Mapping of router to available balance of an asset\"},\"routerOwnershipTimestamp()\":{\"notice\":\"Returns the timestamp when router ownership was last proposed to be renounced\"},\"setMaxRoutersPerTransfer(uint256)\":{\"notice\":\"Used to set the max amount of routers a payment can be routed through\"},\"setRouterRecipient(address,address)\":{\"notice\":\"Sets the designated recipient for a router\"},\"setXAppConnectionManager(address)\":{\"notice\":\"Modify the contract the xApp uses to validate Replica contracts\"},\"setupAsset((uint32,bytes32),address,address)\":{\"notice\":\"Used to add supported assets. This is an admin only function\"},\"setupRouter(address,address,address)\":{\"notice\":\"Used to set router initial properties\"},\"tokenRegistry()\":{\"notice\":\"The local nomad token registry\"},\"transferRelayer(bytes32)\":{\"notice\":\"Stores the relayer of a transfer. Updated on the destination domain when a relayer calls execute for transfer\"},\"wrapper()\":{\"notice\":\"The address of the wrapper for the native asset on this domain\"},\"xcall(((address,bytes,uint32,uint32),address,uint256,uint256))\":{\"notice\":\"This function is called by a user who is looking to bridge funds\"}},\"notice\":\"Contains logic to facilitate bridging via nomad, including the provision of fast liquidity\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nomad-xapps/contracts/connext/ConnextHandler.sol\":\"ConnextHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/ProposedOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnableUpgradeable is Initializable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnableUpgradeable__onlyOwner_notOwner();\\n  error ProposedOwnableUpgradeable__onlyProposed_notProposedOwner();\\n  error ProposedOwnableUpgradeable__proposeRouterOwnershipRenunciation_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceRouterOwnership_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceRouterOwnership_noProposal();\\n  error ProposedOwnableUpgradeable__renounceRouterOwnership_delayNotElapsed();\\n  error ProposedOwnableUpgradeable__proposeAssetOwnershipRenunciation_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceAssetOwnership_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceAssetOwnership_noProposal();\\n  error ProposedOwnableUpgradeable__renounceAssetOwnership_delayNotElapsed();\\n  error ProposedOwnableUpgradeable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnableUpgradeable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__renounceOwnership_noProposal();\\n  error ProposedOwnableUpgradeable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnableUpgradeable__renounceOwnership_invalidProposal();\\n  error ProposedOwnableUpgradeable__acceptProposedOwner_noOwnershipChange();\\n  error ProposedOwnableUpgradeable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  bool private _routerOwnershipRenounced;\\n  uint256 private _routerOwnershipTimestamp;\\n\\n  bool private _assetOwnershipRenounced;\\n  uint256 private _assetOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  event RouterOwnershipRenunciationProposed(uint256 timestamp);\\n\\n  event RouterOwnershipRenounced(bool renounced);\\n\\n  event AssetOwnershipRenunciationProposed(uint256 timestamp);\\n\\n  event AssetOwnershipRenounced(bool renounced);\\n\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the timestamp when router ownership was last proposed to be renounced\\n   */\\n  function routerOwnershipTimestamp() public view virtual returns (uint256) {\\n    return _routerOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the timestamp when asset ownership was last proposed to be renounced\\n   */\\n  function assetOwnershipTimestamp() public view virtual returns (uint256) {\\n    return _assetOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnableUpgradeable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnableUpgradeable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the router whitelist has\\n   * been renounced\\n   */\\n  function isRouterOwnershipRenounced() public view returns (bool) {\\n    return _owner == address(0) || _routerOwnershipRenounced;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the router whitelist has\\n   * been renounced\\n   */\\n  function proposeRouterOwnershipRenunciation() public virtual onlyOwner {\\n    // Use contract as source of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_routerOwnershipRenounced)\\n      revert ProposedOwnableUpgradeable__proposeRouterOwnershipRenunciation_noOwnershipChange();\\n\\n    // Begin delay, emit event\\n    _setRouterOwnershipTimestamp();\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function renounceRouterOwnership() public virtual onlyOwner {\\n    // Contract as sournce of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_routerOwnershipRenounced) revert ProposedOwnableUpgradeable__renounceRouterOwnership_noOwnershipChange();\\n\\n    // Ensure there has been a proposal cycle started\\n    if (_routerOwnershipTimestamp == 0) revert ProposedOwnableUpgradeable__renounceRouterOwnership_noProposal();\\n\\n    // Delay has elapsed\\n    if ((block.timestamp - _routerOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__renounceRouterOwnership_delayNotElapsed();\\n\\n    // Set renounced, emit event, reset timestamp to 0\\n    _setRouterOwnership(true);\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function isAssetOwnershipRenounced() public view returns (bool) {\\n    return _owner == address(0) || _assetOwnershipRenounced;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function proposeAssetOwnershipRenunciation() public virtual onlyOwner {\\n    // Contract as sournce of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_assetOwnershipRenounced)\\n      revert ProposedOwnableUpgradeable__proposeAssetOwnershipRenunciation_noOwnershipChange();\\n\\n    // Start cycle, emit event\\n    _setAssetOwnershipTimestamp();\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership of the asset whitelist has\\n   * been renounced\\n   */\\n  function renounceAssetOwnership() public virtual onlyOwner {\\n    // Contract as sournce of truth\\n    // Will fail if all ownership is renounced by modifier\\n    if (_assetOwnershipRenounced) revert ProposedOwnableUpgradeable__renounceAssetOwnership_noOwnershipChange();\\n\\n    // Ensure there has been a proposal cycle started\\n    if (_assetOwnershipTimestamp == 0) revert ProposedOwnableUpgradeable__renounceAssetOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _assetOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__renounceAssetOwnership_delayNotElapsed();\\n\\n    // Set ownership, reset timestamp, emit event\\n    _setAssetOwnership(true);\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnableUpgradeable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnableUpgradeable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnableUpgradeable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnableUpgradeable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // Contract as source of truth\\n    if (_owner == _proposed) revert ProposedOwnableUpgradeable__acceptProposedOwner_noOwnershipChange();\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnableUpgradeable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  ////// INTERNAL //////\\n\\n  function _setRouterOwnershipTimestamp() private {\\n    _routerOwnershipTimestamp = block.timestamp;\\n    emit RouterOwnershipRenunciationProposed(_routerOwnershipTimestamp);\\n  }\\n\\n  function _setRouterOwnership(bool value) private {\\n    _routerOwnershipRenounced = value;\\n    _routerOwnershipTimestamp = 0;\\n    emit RouterOwnershipRenounced(value);\\n  }\\n\\n  function _setAssetOwnershipTimestamp() private {\\n    _assetOwnershipTimestamp = block.timestamp;\\n    emit AssetOwnershipRenunciationProposed(_assetOwnershipTimestamp);\\n  }\\n\\n  function _setAssetOwnership(bool value) private {\\n    _assetOwnershipRenounced = value;\\n    _assetOwnershipTimestamp = 0;\\n    emit AssetOwnershipRenounced(value);\\n  }\\n\\n  function _setOwner(address newOwner) private {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(_proposed);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x679e1a3bdc7dea956dfe0115277440407ca84d4e912330d3434014250d0406fd\",\"license\":\"UNLICENSED\"},\"contracts/RouterPermissionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {RouterPermissionsManagerLogic, RouterPermissionsManagerInfo} from \\\"./lib/Connext/RouterPermissionsManagerLogic.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice\\n * This contract is designed to manage router access, meaning it maintains the\\n * router recipients, owners, and the router whitelist itself. It does *not* manage router balances\\n * as asset management is out of scope of this contract.\\n *\\n * As a router, there are three important permissions:\\n * `router` - this is the address that will sign bids sent to the sequencer\\n * `routerRecipient` - this is the address that receives funds when liquidity is withdrawn\\n * `routerOwner` - this is the address permitted to update recipients and propose new owners\\n *\\n * In cases where the owner is not set, the caller should be the `router` itself. In cases where the\\n * `routerRecipient` is not set, the funds can be removed to anywhere.\\n *\\n * When setting a new `routerOwner`, the current owner (or router) must create a proposal, which\\n * can be accepted by the proposed owner after the delay period. If the proposed owner is the empty\\n * address, then it must be accepted by the current owner.\\n */\\nabstract contract RouterPermissionsManager is Initializable {\\n  // ============ Private storage =============\\n\\n  uint256 private _delay;\\n\\n  // ============ Public storage =============\\n\\n  RouterPermissionsManagerInfo internal routerInfo;\\n\\n  // ============ Initialize =============\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __RouterPermissionsManager_init() internal onlyInitializing {\\n    __RouterPermissionsManager_init_unchained();\\n  }\\n\\n  function __RouterPermissionsManager_init_unchained() internal onlyInitializing {\\n    _delay = 7 days;\\n  }\\n\\n  // ============ Public methods ==============\\n\\n  /**\\n   * @notice Returns the approved router for the given router address\\n   * @param _router The relevant router address\\n   */\\n  function getRouterApproval(address _router) public view returns (bool) {\\n    return routerInfo.approvedRouters[_router];\\n  }\\n\\n  /**\\n   * @notice Returns the recipient for the specified router\\n   * @dev The recipient (if set) receives all funds when router liquidity is removed\\n   * @param _router The relevant router address\\n   */\\n  function getRouterRecipient(address _router) public view returns (address) {\\n    return routerInfo.routerRecipients[_router];\\n  }\\n\\n  /**\\n   * @notice Returns the router owner if it is set, or the router itself if not\\n   * @dev Uses logic function here to handle the case where router owner is not set.\\n   * Other getters within this interface use explicitly the stored value\\n   * @param _router The relevant router address\\n   */\\n  function getRouterOwner(address _router) public view returns (address) {\\n    return RouterPermissionsManagerLogic.getRouterOwner(_router, routerInfo.routerOwners);\\n  }\\n\\n  /**\\n   * @notice Returns the currently proposed router owner\\n   * @dev All routers must wait for the delay timeout before accepting a new owner\\n   * @param _router The relevant router address\\n   */\\n  function getProposedRouterOwner(address _router) public view returns (address) {\\n    return routerInfo.proposedRouterOwners[_router];\\n  }\\n\\n  /**\\n   * @notice Returns the currently proposed router owner timestamp\\n   * @dev All routers must wait for the delay timeout before accepting a new owner\\n   * @param _router The relevant router address\\n   */\\n  function getProposedRouterOwnerTimestamp(address _router) public view returns (uint256) {\\n    return routerInfo.proposedRouterTimestamp[_router];\\n  }\\n\\n  /**\\n   * @notice Sets the designated recipient for a router\\n   * @dev Router should only be able to set this once otherwise if router key compromised,\\n   * no problem is solved since attacker could just update recipient\\n   * @param router Router address to set recipient\\n   * @param recipient Recipient Address to set to router\\n   */\\n  function setRouterRecipient(address router, address recipient) external {\\n    RouterPermissionsManagerLogic.setRouterRecipient(router, recipient, routerInfo);\\n  }\\n\\n  /**\\n   * @notice Current owner or router may propose a new router owner\\n   * @param router Router address to set recipient\\n   * @param proposed Proposed owner Address to set to router\\n   */\\n  function proposeRouterOwner(address router, address proposed) external {\\n    RouterPermissionsManagerLogic.proposeRouterOwner(router, proposed, routerInfo);\\n  }\\n\\n  /**\\n   * @notice New router owner must accept role, or previous if proposed is 0x0\\n   * @param router Router address to set recipient\\n   */\\n  function acceptProposedRouterOwner(address router) external {\\n    RouterPermissionsManagerLogic.acceptProposedRouterOwner(router, _delay, routerInfo);\\n  }\\n\\n  // ============ Private methods =============\\n\\n  /**\\n   * @notice Used to set router initial properties\\n   * @param router Router address to setup\\n   * @param owner Initial Owner of router\\n   * @param recipient Initial Recipient of router\\n   */\\n  function _setupRouter(\\n    address router,\\n    address owner,\\n    address recipient\\n  ) internal {\\n    RouterPermissionsManagerLogic.setupRouter(router, owner, recipient, routerInfo);\\n  }\\n\\n  /**\\n   * @notice Used to remove routers that can transact crosschain\\n   * @param router Router address to remove\\n   */\\n  function _removeRouter(address router) internal {\\n    RouterPermissionsManagerLogic.removeRouter(router, routerInfo);\\n  }\\n}\\n\",\"keccak256\":\"0xe4a2958d09383b1f7a45a99fb665b58e66c0ca84ae9a426fe75f5fc2d2e3b3a4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IConnextHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.11;\\n\\nimport \\\"../nomad-xapps/contracts/connext/ConnextMessage.sol\\\";\\n\\ninterface IConnextHandler {\\n  // ============= Structs =============\\n\\n  /**\\n   * @notice These are the call parameters that will remain constant between the\\n   * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n   * @property to - The account that receives funds, in the event of a crosschain call,\\n   * will receive funds if the call fails.\\n   * @param to - The address you are sending funds (and potentially data) to\\n   * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n   * @param originDomain - The originating domain (i.e. where `xcall` is called). Must match nomad domain schema\\n   * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called). Must match nomad domain schema\\n   */\\n  struct CallParams {\\n    address to;\\n    bytes callData;\\n    uint32 originDomain;\\n    uint32 destinationDomain;\\n  }\\n\\n  /**\\n   * @notice The arguments you supply to the `xcall` function called by user on origin domain\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\n   * @param transactingAssetId - The asset the caller sent with the transfer. Can be the adopted, canonical,\\n   * or the representational asset\\n   * @param amount - The amount of transferring asset the tx called xcall with\\n   * @param relayerFee - The amount of relayer fee the tx called xcall with\\n   */\\n  struct XCallArgs {\\n    CallParams params;\\n    address transactingAssetId; // Could be adopted, local, or wrapped\\n    uint256 amount;\\n    uint256 relayerFee;\\n  }\\n\\n  /**\\n   * @notice\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\n   * @param local - The local asset for the transfer, will be swapped to the adopted asset if\\n   * appropriate\\n   * @param routers - The routers who you are sending the funds on behalf of\\n   * @param amount - The amount of liquidity the router provided or the bridge forwarded, depending on\\n   * if fast liquidity was used\\n   * @param nonce - The nonce used to generate transfer id\\n   * @param originSender - The msg.sender of the xcall on origin domain\\n   */\\n  struct ExecuteArgs {\\n    CallParams params;\\n    address local; // local representation of canonical token\\n    address[] routers;\\n    bytes[] routerSignatures;\\n    uint256 amount;\\n    uint256 nonce;\\n    address originSender;\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  function initialize(\\n    uint256 _domain,\\n    address _xAppConnectionManager,\\n    address _tokenRegistry, // Nomad token registry\\n    address _wrappedNative,\\n    address _relayerFeeRouter\\n  ) external;\\n\\n  function setupRouter(\\n    address router,\\n    address owner,\\n    address recipient\\n  ) external;\\n\\n  function removeRouter(address router) external;\\n\\n  function addStableSwapPool(ConnextMessage.TokenId calldata canonical, address stableSwapPool) external;\\n\\n  function setupAsset(\\n    ConnextMessage.TokenId calldata canonical,\\n    address adoptedAssetId,\\n    address stableSwapPool\\n  ) external;\\n\\n  function removeAssetId(bytes32 canonicalId, address adoptedAssetId) external;\\n\\n  function setMaxRoutersPerTransfer(uint256 newMaxRouters) external;\\n\\n  function addRelayer(address relayer) external;\\n\\n  function removeRelayer(address relayer) external;\\n\\n  // ============ Public Functions ===========\\n\\n  function addLiquidityFor(\\n    uint256 amount,\\n    address local,\\n    address router\\n  ) external payable;\\n\\n  function addLiquidity(uint256 amount, address local) external payable;\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address local,\\n    address payable to\\n  ) external;\\n\\n  function xcall(XCallArgs calldata _args) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32);\\n\\n  function initiateClaim(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds\\n  ) external;\\n\\n  function claim(address _recipient, bytes32[] calldata _transferIds) external;\\n}\\n\",\"keccak256\":\"0x26fb107635decfaf51bfd16adcbada02ac603a90b3d0112a4c5c6fac56dc0018\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\ninterface IExecutor {\\n  event Executed(\\n    bytes32 indexed transferId,\\n    address indexed to,\\n    address assetId,\\n    uint256 amount,\\n    bytes _properties,\\n    bytes callData,\\n    bytes returnData,\\n    bool success\\n  );\\n\\n  function getConnext() external returns (address);\\n\\n  function originSender() external returns (address);\\n\\n  function origin() external returns (uint32);\\n\\n  function execute(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address payable _to,\\n    address _assetId,\\n    bytes memory _properties,\\n    bytes calldata _callData\\n  ) external payable returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0xca0a6e8f6d278467d12388b40963cca30ca3f598e40b5c8bd515fb7cd7211cd3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwap {\\n  /*** EVENTS ***/\\n\\n  // events replicated from SwapUtils to make the ABI easier for dumb\\n  // clients\\n  event TokenSwap(address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId);\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n  event NewWithdrawFee(uint256 newWithdrawFee);\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  function swapExact(\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut\\n  ) external payable returns (uint256);\\n\\n  function getA() external view returns (uint256);\\n\\n  function getToken(uint8 index) external view returns (IERC20);\\n\\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n  function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n    external\\n    view\\n    returns (uint256 availableTokenAmount);\\n\\n  // state modifying functions\\n  function initialize(\\n    IERC20[] memory pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 a,\\n    uint256 fee,\\n    uint256 adminFee,\\n    address lpTokenTargetAddress\\n  ) external;\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaf4774b94acb5fec49e836c647d49162503b86ad0d4f2be10b6f51aa30bb49f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n// TODO: need a correct interface here\\ninterface IWrapped {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd7d1bcdf3c4f5674b9c42e5a0edfd3e44ae7b361ca7d20a98bb6c4bba83c71cc\",\"license\":\"UNLICENSED\"},\"contracts/interpreters/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IExecutor} from \\\"../interfaces/IExecutor.sol\\\";\\n\\nimport {LibCrossDomainProperty, TypedMemView} from \\\"../lib/LibCrossDomainProperty.sol\\\";\\n\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable, IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Executor\\n * @author Connext <support@connext.network>\\n * @notice This library contains an `execute` function that is callabale by\\n * an associated Connext contract. This is used to execute\\n * arbitrary calldata on a receiving chain.\\n */\\ncontract Executor is IExecutor {\\n  // ============ Libraries =============\\n\\n  using TypedMemView for bytes29;\\n  using TypedMemView for bytes;\\n\\n  // ============ Properties =============\\n\\n  address private immutable connext;\\n  bytes private properties = LibCrossDomainProperty.EMPTY_BYTES;\\n\\n  // ============ Constructor =============\\n\\n  constructor(address _connext) {\\n    connext = _connext;\\n  }\\n\\n  // ============ Modifiers =============\\n\\n  /**\\n   * @notice Errors if the sender is not Connext\\n   */\\n  modifier onlyConnext() {\\n    require(msg.sender == connext, \\\"#OC:027\\\");\\n    _;\\n  }\\n\\n  // ============ Public Functions =============\\n\\n  /**\\n   * @notice Returns the connext contract address (only address that can\\n   * call the `execute` function)\\n   * @return The address of the associated connext contract\\n   */\\n  function getConnext() external view override returns (address) {\\n    return connext;\\n  }\\n\\n  /**\\n   * @notice Allows a `_to` contract to access origin domain sender (i.e. msg.sender of `xcall`)\\n   * @dev These properties are set via reentrancy a la L2CrossDomainMessenger from\\n   * optimism\\n   */\\n  function originSender() external view override returns (address) {\\n    // The following will revert if it is empty\\n    bytes29 _parsed = LibCrossDomainProperty.parseDomainAndSenderBytes(properties);\\n    return LibCrossDomainProperty.sender(_parsed);\\n  }\\n\\n  /**\\n   * @notice Allows a `_to` contract to access origin domain (i.e. domain of `xcall`)\\n   * @dev These properties are set via reentrancy a la L2CrossDomainMessenger from\\n   * optimism\\n   */\\n  function origin() external view override returns (uint32) {\\n    // The following will revert if it is empty\\n    bytes29 _parsed = LibCrossDomainProperty.parseDomainAndSenderBytes(properties);\\n    return LibCrossDomainProperty.domain(_parsed);\\n  }\\n\\n  /**\\n   * @notice Executes some arbitrary call data on a given address. The\\n   * call data executes can be payable, and will have `amount` sent\\n   * along with the function (or approved to the contract). If the\\n   * call fails, rather than reverting, funds are sent directly to\\n   * some provided fallback address\\n   * @param _transferId Unique identifier of transaction id that necessitated\\n   * calldata execution\\n   * @param _amount The amount to approve or send with the call\\n   * @param _to The address to execute the calldata on\\n   * @param _assetId The assetId of the funds to approve to the contract or\\n   * send along with the call\\n   * @param _properties The origin properties\\n   * @param _callData The data to execute\\n   */\\n  function execute(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address payable _to,\\n    address _assetId,\\n    bytes memory _properties,\\n    bytes calldata _callData\\n  ) external payable override onlyConnext returns (bool, bytes memory) {\\n    // If it is not ether, approve the callTo\\n    // We approve here rather than transfer since many external contracts\\n    // simply require an approval, and it is unclear if they can handle\\n    // funds transferred directly to them (i.e. Uniswap)\\n    bool isNative = _assetId == address(0);\\n    if (!isNative) {\\n      SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable(_assetId), _to, _amount);\\n    }\\n\\n    // Check if the callTo is a contract\\n    bool success;\\n    bytes memory returnData;\\n    require(AddressUpgradeable.isContract(_to), \\\"!contract\\\");\\n\\n    // If it should set the properties, set them.\\n    // NOTE: safe to set the properties always because modifier will revert if\\n    // it is the wrong type on conversion, and revert occurs with empty type as\\n    // well\\n    properties = _properties;\\n\\n    // Try to execute the callData\\n    // the low level call will return `false` if its execution reverts\\n    (success, returnData) = _to.call{value: isNative ? _amount : 0}(_callData);\\n\\n    // Unset properties\\n    properties = LibCrossDomainProperty.EMPTY_BYTES;\\n\\n    // Handle failure cases\\n    if (!success && !isNative) {\\n      // Decrease allowance\\n      SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable(_assetId), _to, _amount);\\n    }\\n\\n    // Emit event\\n    emit Executed(_transferId, _to, _assetId, _amount, _properties, _callData, returnData, success);\\n    return (success, returnData);\\n  }\\n}\\n\",\"keccak256\":\"0x632e701df139ed9e118af15c5813f45ce2dba27ed6864d1d33659370896a8c62\",\"license\":\"UNLICENSED\"},\"contracts/lib/Connext/AssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IWrapped} from \\\"../../interfaces/IWrapped.sol\\\";\\nimport {IStableSwap} from \\\"../../interfaces/IStableSwap.sol\\\";\\nimport {ConnextMessage} from \\\"../../nomad-xapps/contracts/connext/ConnextMessage.sol\\\";\\nimport {ITokenRegistry} from \\\"../../nomad-xapps/interfaces/bridge/ITokenRegistry.sol\\\";\\n\\nimport {SafeERC20Upgradeable, IERC20Upgradeable, AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary AssetLogic {\\n  error AssetLogic__handleIncomingAsset_notAmount();\\n  error AssetLogic__handleIncomingAsset_ethWithErcTransfer();\\n  error AssetLogic__transferAssetFromContract_notNative();\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev If using the native asset, will automatically wrap\\n   * @param _assetId - The address to transfer\\n   * @param _assetAmount - The specified amount to transfer. May not be the\\n   * actual amount transferred (i.e. fee on transfer tokens)\\n   * @param _fee - The fee amount in native asset included as part of the transaction that\\n   * should not be considered for the transfer amount.\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   * @return The assetId of the transferred asset\\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\\n   * if the token is a fee-on-transfer token)\\n   */\\n  function handleIncomingAsset(\\n    address _assetId,\\n    uint256 _assetAmount,\\n    uint256 _fee,\\n    IWrapped _wrapper\\n  ) internal returns (address, uint256) {\\n    uint256 trueAmount = _assetAmount;\\n\\n    if (_assetId == address(0)) {\\n      if (msg.value != _assetAmount + _fee) revert AssetLogic__handleIncomingAsset_notAmount();\\n\\n      // When transferring native asset to the contract, always make sure that the\\n      // asset is properly wrapped\\n      wrapNativeAsset(_assetAmount, _wrapper);\\n      _assetId = address(_wrapper);\\n    } else {\\n      if (msg.value != _fee) revert AssetLogic__handleIncomingAsset_ethWithErcTransfer();\\n\\n      // Transfer asset to contract\\n      trueAmount = transferAssetToContract(_assetId, _assetAmount);\\n    }\\n\\n    return (_assetId, trueAmount);\\n  }\\n\\n  /**\\n   * @notice Wrap the native asset\\n   * @param _amount - The specified amount to wrap\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   */\\n  function wrapNativeAsset(uint256 _amount, IWrapped _wrapper) internal {\\n    _wrapper.deposit{value: _amount}();\\n  }\\n\\n  /**\\n   * @notice Transfer asset funds from msg.sender to the Connext contract.\\n   * @param _assetId - The address to transfer\\n   * @param _amount - The specified amount to transfer\\n   * @return The amount of the asset that was seen by the contract\\n   */\\n  function transferAssetToContract(address _assetId, uint256 _amount) internal returns (uint256) {\\n    // Validate correct amounts are transferred\\n    uint256 starting = IERC20Upgradeable(_assetId).balanceOf(address(this));\\n\\n    SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_assetId), msg.sender, address(this), _amount);\\n    // Calculate the *actual* amount that was sent here\\n    return IERC20Upgradeable(_assetId).balanceOf(address(this)) - starting;\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev If using the native asset, will automatically unwrap\\n   * @param _assetId - The address to transfer\\n   * @param _to - The account that will receive the withdrawn funds\\n   * @param _amount - The amount to withdraw from contract\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   */\\n  function transferAssetFromContract(\\n    address _assetId,\\n    address _to,\\n    uint256 _amount,\\n    IWrapped _wrapper\\n  ) internal {\\n    // No native assets should ever be stored on this contract\\n    if (_assetId == address(0)) revert AssetLogic__transferAssetFromContract_notNative();\\n\\n    if (_assetId == address(_wrapper)) {\\n      // If dealing with wrapped assets, make sure they are properly unwrapped\\n      // before sending from contract\\n      _wrapper.withdraw(_amount);\\n      AddressUpgradeable.sendValue(payable(_to), _amount);\\n    } else {\\n      // Transfer ERC20 asset\\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _to, _amount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Swaps an adopted asset to the local (representation or canonical) nomad asset\\n   * @dev Will not swap if the asset passed in is the local asset\\n   * @param _canonical - The canonical token\\n   * @param _pool - The StableSwap pool\\n   * @param _tokenRegistry - The local nomad token registry\\n   * @param _asset - The address of the adopted asset to swap into the local asset\\n   * @param _amount - The amount of the adopted asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapToLocalAssetIfNeeded(\\n    ConnextMessage.TokenId memory _canonical,\\n    IStableSwap _pool,\\n    ITokenRegistry _tokenRegistry,\\n    address _asset,\\n    uint256 _amount\\n  ) internal returns (uint256, address) {\\n    // Check to see if the asset must be swapped because it is not the local asset\\n    if (_canonical.id == bytes32(0)) {\\n      // This is *not* the adopted asset, meaning it must be the local asset\\n      return (_amount, _asset);\\n    }\\n\\n    // Get the local token for this domain (may return canonical or representation)\\n    address local = _tokenRegistry.getLocalAddress(_canonical.domain, _canonical.id);\\n\\n    // if theres no amount, no need to swap\\n    if (_amount == 0) {\\n      return (_amount, local);\\n    }\\n\\n    // Check the case where the adopted asset *is* the local asset\\n    if (local == _asset) {\\n      // No need to swap\\n      return (_amount, _asset);\\n    }\\n\\n    // Approve pool\\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), address(_pool), _amount);\\n\\n    // Swap the asset to the proper local asset\\n    return (_pool.swapExact(_amount, _asset, local), local);\\n  }\\n\\n  /**\\n   * @notice Swaps a local nomad asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _canonicalToAdopted - Mapping of adopted to canonical on this domain\\n   * @param _adoptedToLocalPools - Mapping holding the AMMs for swapping in and out of local assets\\n   * @param _tokenRegistry - The local nomad token registry\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @return The amount of adopted asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeeded(\\n    mapping(bytes32 => address) storage _canonicalToAdopted,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    ITokenRegistry _tokenRegistry,\\n    address _asset,\\n    uint256 _amount\\n  ) internal returns (uint256, address) {\\n    // Get the token id\\n    (, bytes32 id) = _tokenRegistry.getTokenId(_asset);\\n\\n    // If the adopted asset is the local asset, no need to swap\\n    address adopted = _canonicalToAdopted[id];\\n    if (adopted == _asset) {\\n      return (_amount, _asset);\\n    }\\n\\n    // Approve pool\\n    IStableSwap pool = _adoptedToLocalPools[id];\\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), address(pool), _amount);\\n\\n    // Otherwise, swap to adopted asset\\n    return (pool.swapExact(_amount, _asset, adopted), adopted);\\n  }\\n}\\n\",\"keccak256\":\"0x4a6896ea9639aef2131592b11f198cb0431794ff99a7d050375fb6ac8f94052a\",\"license\":\"UNLICENSED\"},\"contracts/lib/Connext/ConnextLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IConnextHandler} from \\\"../../interfaces/IConnextHandler.sol\\\";\\nimport {IStableSwap} from \\\"../../interfaces/IStableSwap.sol\\\";\\nimport {IWrapped} from \\\"../../interfaces/IWrapped.sol\\\";\\nimport {IExecutor} from \\\"../../interfaces/IExecutor.sol\\\";\\nimport {LibCrossDomainProperty} from \\\"../LibCrossDomainProperty.sol\\\";\\nimport {RouterPermissionsManagerInfo} from \\\"./RouterPermissionsManagerLogic.sol\\\";\\nimport {AssetLogic} from \\\"./AssetLogic.sol\\\";\\n\\nimport {RelayerFeeRouter} from \\\"../../nomad-xapps/contracts/relayer-fee-router/RelayerFeeRouter.sol\\\";\\nimport {ITokenRegistry, IBridgeToken} from \\\"../../nomad-xapps/interfaces/bridge/ITokenRegistry.sol\\\";\\nimport {ConnextMessage} from \\\"../../nomad-xapps/contracts/connext/ConnextMessage.sol\\\";\\nimport {TypedMemView} from \\\"../../nomad-core/libs/TypedMemView.sol\\\";\\nimport {TypeCasts} from \\\"../../nomad-core/contracts/XAppConnectionManager.sol\\\";\\nimport {Home} from \\\"../../nomad-core/contracts/Home.sol\\\";\\n\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable, AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary ConnextLogic {\\n  // ============ Libraries ============\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using ConnextMessage for bytes29;\\n\\n  bytes32 internal constant EMPTY = hex\\\"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\\\";\\n\\n  // ============ Errors ============\\n\\n  error ConnextLogic__addAssetId_alreadyAdded();\\n  error ConnextLogic__removeAssetId_notAdded();\\n  error ConnextLogic__addRelayer_alreadyApproved();\\n  error ConnextLogic__removeRelayer_notApproved();\\n  error ConnextLogic__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer();\\n  error ConnextLogic__reconcile_invalidAction();\\n  error ConnextLogic__reconcile_alreadyReconciled();\\n  error ConnextLogic__removeLiquidity_recipientEmpty();\\n  error ConnextLogic__removeLiquidity_amountIsZero();\\n  error ConnextLogic__removeLiquidity_insufficientFunds();\\n  error ConnextLogic__xcall_wrongDomain();\\n  error ConnextLogic__xcall_emptyTo();\\n  error ConnextLogic__xcall_notSupportedAsset();\\n  error ConnextLogic__xcall_relayerFeeIsZero();\\n  error ConnextLogic__execute_unapprovedRelayer();\\n  error ConnextLogic__execute_maxRoutersExceeded();\\n  error ConnextLogic__execute_alreadyExecuted();\\n  error ConnextLogic__execute_notSupportedRouter();\\n  error ConnextLogic__execute_invalidRouterSignature();\\n  error ConnextLogic__initiateClaim_notRelayer(bytes32 transferId);\\n  error ConnextLogic__bumpTransfer_invalidTransfer();\\n  error ConnextLogic__bumpTransfer_valueIsZero();\\n\\n  // ============ Structs ============\\n\\n  struct XCallLibArgs {\\n    IConnextHandler.XCallArgs xCallArgs;\\n    IWrapped wrapper;\\n    uint256 nonce;\\n    ITokenRegistry tokenRegistry;\\n    uint256 domain;\\n    Home home;\\n    bytes32 remote;\\n  }\\n\\n  struct XCalledEventArgs {\\n    address transactingAssetId;\\n    uint256 amount;\\n    uint256 bridgedAmt;\\n    address bridged;\\n  }\\n\\n  struct ExecuteLibArgs {\\n    IConnextHandler.ExecuteArgs executeArgs;\\n    bool isRouterOwnershipRenounced;\\n    uint256 maxRoutersPerTransfer;\\n    ITokenRegistry tokenRegistry;\\n    IWrapped wrapper;\\n    IExecutor executor;\\n    uint256 liquidityFeeNumerator;\\n    uint256 liquidityFeeDenominator;\\n  }\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when a new stable-swap AMM is added for the local <> adopted token\\n   * @param canonicalId - The canonical identifier of the token the local <> adopted AMM is for\\n   * @param domain - The domain of the canonical token for the local <> adopted amm\\n   * @param swapPool - The address of the AMM\\n   * @param caller - The account that called the function\\n   */\\n  event StableSwapAdded(bytes32 canonicalId, uint32 domain, address swapPool, address caller);\\n\\n  /**\\n   * @notice Emitted when a new asset is added\\n   * @param canonicalId - The canonical identifier of the token the local <> adopted AMM is for\\n   * @param domain - The domain of the canonical token for the local <> adopted amm\\n   * @param adoptedAsset - The address of the adopted (user-expected) asset\\n   * @param supportedAsset - The address of the whitelisted asset. If the native asset is to be whitelisted,\\n   * the address of the wrapped version will be stored\\n   * @param caller - The account that called the function\\n   */\\n  event AssetAdded(bytes32 canonicalId, uint32 domain, address adoptedAsset, address supportedAsset, address caller);\\n\\n  /**\\n   * @notice Emitted when an asset is removed from whitelists\\n   * @param canonicalId - The canonical identifier of the token removed\\n   * @param caller - The account that called the function\\n   */\\n  event AssetRemoved(bytes32 canonicalId, address caller);\\n\\n  /**\\n   * @notice Emitted when a rlayer is added or removed from whitelists\\n   * @param relayer - The relayer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event RelayerAdded(address relayer, address caller);\\n\\n  /**\\n   * @notice Emitted when a rlayer is added or removed from whitelists\\n   * @param relayer - The relayer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event RelayerRemoved(address relayer, address caller);\\n\\n  /**\\n   * @notice Emitted when a router withdraws liquidity from the contract\\n   * @param router - The router you are removing liquidity from\\n   * @param to - The address the funds were withdrawn to\\n   * @param local - The address of the token withdrawn\\n   * @param amount - The amount of liquidity withdrawn\\n   * @param caller - The account that called the function\\n   */\\n  event LiquidityRemoved(address indexed router, address to, address local, uint256 amount, address caller);\\n\\n  /**\\n   * @notice Emitted when a router adds liquidity to the contract\\n   * @param router - The address of the router the funds were credited to\\n   * @param local - The address of the token added (all liquidity held in local asset)\\n   * @param amount - The amount of liquidity added\\n   * @param caller - The account that called the function\\n   */\\n  event LiquidityAdded(address indexed router, address local, bytes32 canonicalId, uint256 amount, address caller);\\n\\n  /**\\n   * @notice Emitted when the maxRoutersPerTransfer variable is updated\\n   * @param maxRoutersPerTransfer - The maxRoutersPerTransfer new value\\n   * @param caller - The account that called the function\\n   */\\n  event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller);\\n\\n  /**\\n   * @notice Emitted when `xcall` is called on the origin domain\\n   */\\n  event XCalled(\\n    bytes32 indexed transferId,\\n    IConnextHandler.XCallArgs xcallArgs,\\n    XCalledEventArgs args,\\n    uint256 nonce,\\n    bytes message,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `execute` is called on the destination chain\\n   * @dev `execute` may be called when providing fast liquidity *or* when processing a reconciled transfer\\n   * @param transferId - The unique identifier of the crosschain transfer\\n   * @param to - The CallParams.to provided, created as indexed parameter\\n   * @param args - The ExecuteArgs provided to the function\\n   * @param transactingAsset - The asset the to gets or the external call is executed with. Should be the\\n   * adopted asset on that chain.\\n   * @param transactingAmount - The amount of transferring asset the to address receives or the external call is\\n   * executed with\\n   * @param caller - The account that called the function\\n   */\\n  event Executed(\\n    bytes32 indexed transferId,\\n    address indexed to,\\n    IConnextHandler.ExecuteArgs args,\\n    address transactingAsset,\\n    uint256 transactingAmount,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `reconciled` is called by the bridge on the destination domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param origin - The origin domain of the transfer\\n   * @param routers - The CallParams.recipient provided, created as indexed parameter\\n   * @param asset - The asset that was provided by the bridge\\n   * @param amount - The amount that was provided by the bridge\\n   * @param caller - The account that called the function\\n   */\\n  event Reconciled(\\n    bytes32 indexed transferId,\\n    uint32 indexed origin,\\n    address[] routers,\\n    address asset,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `bumpTransfer` is called by an user on the origin domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param relayerFee - The updated amount of relayer fee in native asset\\n   * @param caller - The account that called the function\\n   */\\n  event TransferRelayerFeesUpdated(bytes32 indexed transferId, uint256 relayerFee, address caller);\\n\\n  /**\\n   * @notice Emitted when `initiateClaim` is called on the destination chain\\n   * @param domain - Domain to claim funds on\\n   * @param recipient - Address on origin chain to send claimed funds to\\n   * @param caller - The account that called the function\\n   * @param transferIds - TransferIds to claim\\n   */\\n  event InitiatedClaim(uint32 indexed domain, address indexed recipient, address caller, bytes32[] transferIds);\\n\\n  /**\\n   * @notice Emitted when `claim` is called on the origin domain\\n   * @param recipient - Address on origin chain to send claimed funds to\\n   * @param total - Total amount claimed\\n   * @param transferIds - TransferIds to claim\\n   */\\n  event Claimed(address indexed recipient, uint256 total, bytes32[] transferIds);\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Used to add an AMM for adopted <> local assets\\n   * @param _canonical - The canonical TokenId to add (domain and id)\\n   * @param _stableSwap - The address of the amm to add\\n   */\\n  function addStableSwapPool(\\n    ConnextMessage.TokenId calldata _canonical,\\n    address _stableSwap,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools\\n  ) external {\\n    // Update the pool mapping\\n    _adoptedToLocalPools[_canonical.id] = IStableSwap(_stableSwap);\\n\\n    emit StableSwapAdded(_canonical.id, _canonical.domain, _stableSwap, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to add assets on same chain as contract that can be transferred.\\n   * @param _canonical - The canonical TokenId to add (domain and id)\\n   * @param _adoptedAssetId - The used asset id for this domain (i.e. PoS USDC for\\n   * polygon)\\n   */\\n  function addAssetId(\\n    ConnextMessage.TokenId calldata _canonical,\\n    address _adoptedAssetId,\\n    address _wrapper,\\n    mapping(bytes32 => bool) storage _approvedAssets,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical,\\n    mapping(bytes32 => address) storage _canonicalToAdopted\\n  ) external {\\n    // Sanity check: needs approval\\n    if (_approvedAssets[_canonical.id]) revert ConnextLogic__addAssetId_alreadyAdded();\\n\\n    // Update approved assets mapping\\n    _approvedAssets[_canonical.id] = true;\\n\\n    address supported = _adoptedAssetId == address(0) ? _wrapper : _adoptedAssetId;\\n\\n    // Update the adopted mapping\\n    _adoptedToCanonical[supported] = _canonical;\\n\\n    // Update the canonical mapping\\n    _canonicalToAdopted[_canonical.id] = supported;\\n\\n    // Emit event\\n    emit AssetAdded(_canonical.id, _canonical.domain, _adoptedAssetId, supported, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove assets from the whitelist\\n   * @param _canonicalId - Token id to remove\\n   * @param _adoptedAssetId - Corresponding adopted asset to remove\\n   */\\n  function removeAssetId(\\n    bytes32 _canonicalId,\\n    address _adoptedAssetId,\\n    address _wrapper,\\n    mapping(bytes32 => bool) storage _approvedAssets,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical\\n  ) external {\\n    // Sanity check: already approval\\n    if (!_approvedAssets[_canonicalId]) revert ConnextLogic__removeAssetId_notAdded();\\n\\n    // Update mapping\\n    delete _approvedAssets[_canonicalId];\\n\\n    // Update pools\\n    delete _adoptedToLocalPools[_canonicalId];\\n\\n    // Update adopted mapping\\n    delete _adoptedToCanonical[_adoptedAssetId == address(0) ? _wrapper : _adoptedAssetId];\\n\\n    // Emit event\\n    emit AssetRemoved(_canonicalId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to add approved relayer\\n   * @param _relayer - The relayer address to add\\n   */\\n  function addRelayer(address _relayer, mapping(address => bool) storage _approvedRelayers) external {\\n    if (_approvedRelayers[_relayer]) revert ConnextLogic__addRelayer_alreadyApproved();\\n    _approvedRelayers[_relayer] = true;\\n\\n    emit RelayerAdded(_relayer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove approved relayer\\n   * @param _relayer - The relayer address to remove\\n   */\\n  function removeRelayer(address _relayer, mapping(address => bool) storage _approvedRelayers) external {\\n    if (!_approvedRelayers[_relayer]) revert ConnextLogic__removeRelayer_notApproved();\\n    delete _approvedRelayers[_relayer];\\n\\n    emit RelayerRemoved(_relayer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to set the max amount of routers a payment can be routed through\\n   * @param _newMax The new max amount of routers\\n   */\\n  function setMaxRoutersPerTransfer(uint256 _newMax, uint256 _currentMax) external {\\n    if (_newMax == 0 || _newMax == _currentMax)\\n      revert ConnextLogic__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer();\\n\\n    emit MaxRoutersPerTransferUpdated(_newMax, msg.sender);\\n  }\\n\\n  // ============ Functions ============\\n\\n  /**\\n   * @notice Contains the logic to verify + increment a given routers liquidity\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\n   * @param _amount - The amount of liquidity to add for the router\\n   * @param _local - The address of the nomad representation of the asset\\n   * @param _router - The router you are adding liquidity on behalf of\\n   * @param _canonicalId - Canonical asset id from the representation\\n   */\\n  function addLiquidityForRouter(\\n    uint256 _amount,\\n    address _local,\\n    address _router,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    bytes32 _canonicalId,\\n    IWrapped _wrapper\\n  ) external {\\n    // Transfer funds to contract\\n    (address asset, uint256 received) = AssetLogic.handleIncomingAsset(_local, _amount, 0, _wrapper);\\n\\n    // Update the router balances. Happens after pulling funds to account for\\n    // the fee on transfer tokens\\n    _routerBalances[_router][asset] += received;\\n\\n    // Emit event\\n    emit LiquidityAdded(_router, asset, _canonicalId, received, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This is used by any router to decrease their available liquidity for a given asset.\\n   * @param _amount - The amount of liquidity to remove for the router\\n   * @param _local - The address of the asset you're removing liquidity from. If removing liquidity of the\\n   * native asset, routers may use `address(0)` or the wrapped asset\\n   * @param _recipient The address that will receive the liquidity being removed\\n   */\\n  function removeLiquidity(\\n    uint256 _amount,\\n    address _local,\\n    address _recipient,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    IWrapped _wrapper\\n  ) external {\\n    // Sanity check: to is sensible\\n    if (_recipient == address(0)) revert ConnextLogic__removeLiquidity_recipientEmpty();\\n\\n    // Sanity check: nonzero amounts\\n    if (_amount == 0) revert ConnextLogic__removeLiquidity_amountIsZero();\\n\\n    uint256 routerBalance = _routerBalances[msg.sender][_local];\\n    // Sanity check: amount can be deducted for the router\\n    if (routerBalance < _amount) revert ConnextLogic__removeLiquidity_insufficientFunds();\\n\\n    // Update router balances\\n    unchecked {\\n      _routerBalances[msg.sender][_local] = routerBalance - _amount;\\n    }\\n\\n    // Transfer from contract to specified to\\n    AssetLogic.transferAssetFromContract(_local, _recipient, _amount, _wrapper);\\n\\n    // Emit event\\n    emit LiquidityRemoved(msg.sender, _recipient, _local, _amount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This function is called ConnextHandler when a user who is looking to bridge funds\\n   * @param _args - The XCallArgs\\n   * @param _adoptedToCanonical - Mapping of canonical to adopted assets on this domain\\n   * @param _adoptedToLocalPools - Mapping holding the AMMs for swapping in and out of local assets\\n   * @param _relayerFees - Mapping of relayer fee for a transfer\\n   * @return The transfer id of the crosschain transfer\\n   */\\n  function xcall(\\n    XCallLibArgs calldata _args,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(bytes32 => uint256) storage _relayerFees\\n  ) external returns (bytes32, uint256) {\\n    _xcallSanityChecks(_args);\\n\\n    // get the true transacting asset id (using wrapped native instead native)\\n    (bytes32 transferId, bytes memory message, XCalledEventArgs memory eventArgs) = _xcallProcess(\\n      _args,\\n      _adoptedToCanonical,\\n      _adoptedToLocalPools\\n    );\\n\\n    // Store the relayer fee\\n    _relayerFees[transferId] = _args.xCallArgs.relayerFee;\\n\\n    // emit event\\n    emit XCalled(transferId, _args.xCallArgs, eventArgs, _args.nonce, message, msg.sender);\\n\\n    return (transferId, _args.nonce + 1);\\n  }\\n\\n  /**\\n   * @notice Called via `handle` to manage funds associated with a transaction\\n   * @dev Will either (a) credit router or (b) make funds available for execution. Don't\\n   * include execution here\\n   */\\n  function reconcile(\\n    uint32 _origin,\\n    bytes memory _message,\\n    mapping(bytes32 => bool) storage _reconciledTransfers,\\n    ITokenRegistry _tokenRegistry,\\n    mapping(bytes32 => address[]) storage _routedTransfers,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances\\n  ) external {\\n    // parse tokenId and action from message\\n    bytes29 msg_ = _message.ref(0).mustBeMessage();\\n    bytes29 tokenId = msg_.tokenId();\\n    bytes29 action = msg_.action();\\n\\n    // assert the action is valid\\n    if (!action.isTransfer()) {\\n      revert ConnextLogic__reconcile_invalidAction();\\n    }\\n\\n    // load the transferId\\n    bytes32 transferId = action.transferId();\\n\\n    // ensure the transaction has not been handled\\n    if (_reconciledTransfers[transferId]) {\\n      revert ConnextLogic__reconcile_alreadyReconciled();\\n    }\\n\\n    // get the token contract for the given tokenId on this chain\\n    // (if the token is of remote origin and there is\\n    // no existing representation token contract, the TokenRegistry will\\n    // deploy a new one)\\n    address token = _tokenRegistry.ensureLocalToken(tokenId.domain(), tokenId.id());\\n\\n    // load amount once\\n    uint256 amount = action.amnt();\\n\\n    // NOTE: tokenId + amount must be in plaintext in message so funds can\\n    // *only* be minted by `handle`. They are still used in the generation of\\n    // the transferId so routers must provide them correctly to be reimbursed\\n\\n    // TODO: do we need to keep this\\n    bytes32 details = action.detailsHash();\\n\\n    // if the token is of remote origin, mint the tokens. will either\\n    // - be credited to router (fast liquidity)\\n    // - be reserved for execution (slow liquidity)\\n    if (!_tokenRegistry.isLocalOrigin(token)) {\\n      IBridgeToken(token).mint(address(this), amount);\\n      // Tell the token what its detailsHash is\\n      IBridgeToken(token).setDetailsHash(details);\\n    }\\n    // NOTE: if the token is of local origin, it means it was escrowed\\n    // in this contract at xcall\\n\\n    // mark the transfer as reconciled\\n    _reconciledTransfers[transferId] = true;\\n\\n    // get the transfer\\n    address[] storage routers = _routedTransfers[transferId];\\n\\n    uint256 pathLen = routers.length;\\n    if (pathLen != 0) {\\n      // fast liquidity path\\n      // credit the router the asset\\n      uint256 routerAmt = amount / pathLen;\\n      for (uint256 i; i < pathLen; ) {\\n        _routerBalances[routers[i]][token] += routerAmt;\\n        unchecked {\\n          i++;\\n        }\\n      }\\n    }\\n\\n    emit Reconciled(transferId, _origin, routers, token, amount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Called on the destination domain to disburse correct assets to end recipient\\n   * and execute any included calldata\\n   * @dev Can be called prior to or after `handle`, depending if fast liquidity is being\\n   * used.\\n   */\\n  function execute(\\n    ExecuteLibArgs calldata _args,\\n    mapping(bytes32 => address[]) storage _routedTransfers,\\n    mapping(bytes32 => bool) storage _reconciledTransfers,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(bytes32 => address) storage _canonicalToAdopted,\\n    RouterPermissionsManagerInfo storage _routerInfo,\\n    mapping(bytes32 => address) storage _transferRelayer\\n  ) external returns (bytes32) {\\n    (bytes32 transferId, bool reconciled) = _executeSanityChecks(\\n      _args,\\n      _transferRelayer,\\n      _reconciledTransfers,\\n      _routerInfo.approvedRouters\\n    );\\n\\n    // execute router liquidity when this is a fast transfer\\n    (uint256 amount, address adopted) = _handleExecuteLiquidity(\\n      transferId,\\n      !reconciled,\\n      _args,\\n      _routedTransfers,\\n      _routerBalances,\\n      _adoptedToLocalPools,\\n      _canonicalToAdopted\\n    );\\n\\n    // execute the transaction\\n    _handleExecuteTransaction(_args, amount, adopted, transferId, reconciled);\\n\\n    // Set the relayer for this transaction to allow for future claim\\n    _transferRelayer[transferId] = msg.sender;\\n\\n    // emit event\\n    emit Executed(transferId, _args.executeArgs.params.to, _args.executeArgs, adopted, amount, msg.sender);\\n\\n    return transferId;\\n  }\\n\\n  /**\\n   * @notice Called by relayer when they want to claim owed funds on a given domain\\n   * @dev Domain should be the origin domain of all the transfer ids\\n   * @param _domain - domain to claim funds on\\n   * @param _recipient - address on origin chain to send claimed funds to\\n   * @param _transferIds - transferIds to claim\\n   * @param _relayerFeeRouter - The local nomad relayer fee router\\n   * @param _transferRelayer - Mapping of transactionIds to relayer\\n   */\\n  function initiateClaim(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds,\\n    RelayerFeeRouter _relayerFeeRouter,\\n    mapping(bytes32 => address) storage _transferRelayer\\n  ) external {\\n    // Ensure the relayer can claim all transfers specified\\n    for (uint256 i; i < _transferIds.length; ) {\\n      if (_transferRelayer[_transferIds[i]] != msg.sender)\\n        revert ConnextLogic__initiateClaim_notRelayer(_transferIds[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // Send transferIds via nomad\\n    _relayerFeeRouter.send(_domain, _recipient, _transferIds);\\n\\n    emit InitiatedClaim(_domain, _recipient, msg.sender, _transferIds);\\n  }\\n\\n  /**\\n   * @notice Pays out a relayer for the given fees\\n   * @dev Called by the RelayerFeeRouter.handle message. The validity of the transferIds is\\n   * asserted before dispatching the message.\\n   * @param _recipient - address on origin chain to send claimed funds to\\n   * @param _transferIds - transferIds to claim\\n   * @param _relayerFees - Mapping of transactionIds to fee\\n   */\\n  function claim(\\n    address _recipient,\\n    bytes32[] calldata _transferIds,\\n    mapping(bytes32 => uint256) storage _relayerFees\\n  ) external {\\n    // Tally amounts owed\\n    uint256 total;\\n    for (uint256 i; i < _transferIds.length; ) {\\n      total += _relayerFees[_transferIds[i]];\\n      _relayerFees[_transferIds[i]] = 0;\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    AddressUpgradeable.sendValue(payable(_recipient), total);\\n\\n    emit Claimed(_recipient, total, _transferIds);\\n  }\\n\\n  /**\\n   * @notice Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\\n   * @param _transferId - The unique identifier of the crosschain transaction\\n   */\\n  function bumpTransfer(bytes32 _transferId, mapping(bytes32 => uint256) storage relayerFees) external {\\n    if (msg.value == 0) revert ConnextLogic__bumpTransfer_valueIsZero();\\n\\n    relayerFees[_transferId] += msg.value;\\n\\n    emit TransferRelayerFeesUpdated(_transferId, relayerFees[_transferId], msg.sender);\\n  }\\n\\n  // ============ Private Functions ============\\n\\n  /**\\n   * @notice Performs some sanity checks for `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _executeSanityChecks(\\n    ExecuteLibArgs calldata _args,\\n    mapping(bytes32 => address) storage _transferRelayer,\\n    mapping(bytes32 => bool) storage _reconciledTransfers,\\n    mapping(address => bool) storage _approvedRouters\\n  ) private returns (bytes32, bool) {\\n    // get number of facilitating routers\\n    uint256 pathLength = _args.executeArgs.routers.length;\\n\\n    // make sure number of routers is valid\\n    if (pathLength > _args.maxRoutersPerTransfer) revert ConnextLogic__execute_maxRoutersExceeded();\\n\\n    // get transfer id\\n    bytes32 transferId = _getTransferId(_args);\\n\\n    // get the payload the router should have signed\\n    bytes32 routerHash = keccak256(abi.encode(transferId, pathLength));\\n\\n    // make sure routers are all approved if needed\\n    for (uint256 i; i < pathLength; ) {\\n      if (!_args.isRouterOwnershipRenounced && !_approvedRouters[_args.executeArgs.routers[i]]) {\\n        revert ConnextLogic__execute_notSupportedRouter();\\n      }\\n      if (_args.executeArgs.routers[i] != _recoverSignature(routerHash, _args.executeArgs.routerSignatures[i])) {\\n        revert ConnextLogic__execute_invalidRouterSignature();\\n      }\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // require this transfer has not already been executed\\n    if (_transferRelayer[transferId] != address(0)) {\\n      revert ConnextLogic__execute_alreadyExecuted();\\n    }\\n\\n    // get reconciled record\\n    bool reconciled = _reconciledTransfers[transferId];\\n\\n    return (transferId, reconciled);\\n  }\\n\\n  /**\\n   * @notice Calculates fast transfer amount.\\n   * @param _amount Transfer amount\\n   * @param _liquidityFeeNum Liquidity fee numerator\\n   * @param _liquidityFeeDen Liquidity fee denominator\\n   */\\n  function _getFastTransferAmount(\\n    uint256 _amount,\\n    uint256 _liquidityFeeNum,\\n    uint256 _liquidityFeeDen\\n  ) private pure returns (uint256) {\\n    return (_amount * _liquidityFeeNum) / _liquidityFeeDen;\\n  }\\n\\n  /**\\n   * @notice Performs some sanity checks for `xcall`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _xcallSanityChecks(XCallLibArgs calldata _args) private {\\n    // ensure this is the right domain\\n    if (_args.xCallArgs.params.originDomain != _args.domain) {\\n      revert ConnextLogic__xcall_wrongDomain();\\n    }\\n\\n    // ensure theres a recipient defined\\n    if (_args.xCallArgs.params.to == address(0)) {\\n      revert ConnextLogic__xcall_emptyTo();\\n    }\\n  }\\n\\n  /**\\n   * @notice Processes an `xcall`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _xcallProcess(\\n    XCallLibArgs calldata _args,\\n    mapping(address => ConnextMessage.TokenId) storage _adoptedToCanonical,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools\\n  )\\n    private\\n    returns (\\n      bytes32,\\n      bytes memory,\\n      XCalledEventArgs memory\\n    )\\n  {\\n    address transactingAssetId = _args.xCallArgs.transactingAssetId == address(0)\\n      ? address(_args.wrapper)\\n      : _args.xCallArgs.transactingAssetId;\\n\\n    // check that the asset is supported -- can be either adopted or local\\n    ConnextMessage.TokenId memory canonical = _adoptedToCanonical[transactingAssetId];\\n    if (canonical.id == bytes32(0)) {\\n      revert ConnextLogic__xcall_notSupportedAsset();\\n    }\\n\\n    // transfer funds of transacting asset to the contract from user\\n    // NOTE: will wrap any native asset transferred to wrapped-native automatically\\n    (, uint256 amount) = AssetLogic.handleIncomingAsset(\\n      _args.xCallArgs.transactingAssetId,\\n      _args.xCallArgs.amount,\\n      _args.xCallArgs.relayerFee,\\n      _args.wrapper\\n    );\\n\\n    // swap to the local asset from adopted\\n    (uint256 bridgedAmt, address bridged) = AssetLogic.swapToLocalAssetIfNeeded(\\n      canonical,\\n      _adoptedToLocalPools[canonical.id],\\n      _args.tokenRegistry,\\n      transactingAssetId,\\n      amount\\n    );\\n\\n    bytes32 transferId = _getTransferId(_args, canonical);\\n\\n    bytes memory message = _formatMessage(_args, bridged, transferId, bridgedAmt);\\n    _args.home.dispatch(_args.xCallArgs.params.destinationDomain, _args.remote, message);\\n\\n    return (\\n      transferId,\\n      message,\\n      XCalledEventArgs({\\n        transactingAssetId: transactingAssetId,\\n        amount: amount,\\n        bridgedAmt: bridgedAmt,\\n        bridged: bridged\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Calculates a transferId based on `execute` arguments\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _getTransferId(ExecuteLibArgs calldata _args) private view returns (bytes32) {\\n    (uint32 tokenDomain, bytes32 tokenId) = _args.tokenRegistry.getTokenId(_args.executeArgs.local);\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          _args.executeArgs.nonce,\\n          _args.executeArgs.params,\\n          _args.executeArgs.originSender,\\n          tokenId,\\n          tokenDomain,\\n          _args.executeArgs.amount\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Calculates a transferId based on `xcall` arguments\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _getTransferId(XCallLibArgs calldata _args, ConnextMessage.TokenId memory _canonical)\\n    private\\n    view\\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encode(\\n          _args.nonce,\\n          _args.xCallArgs.params,\\n          msg.sender,\\n          _canonical.id,\\n          _canonical.domain,\\n          _args.xCallArgs.amount\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Formats a nomad message generated by `xcall`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _formatMessage(\\n    XCallLibArgs calldata _args,\\n    address _asset,\\n    bytes32 _transferId,\\n    uint256 _amount\\n  ) private returns (bytes memory) {\\n    // get token\\n    IBridgeToken token = IBridgeToken(_asset);\\n\\n    // declare details\\n    bytes32 detailsHash;\\n\\n    if (_args.tokenRegistry.isLocalOrigin(_asset)) {\\n      // TODO: do we want to store a mapping of custodied token balances here?\\n\\n      // token is local, custody token on this chain\\n      // query token contract for details and calculate detailsHash\\n      detailsHash = ConnextMessage.formatDetailsHash(token.name(), token.symbol(), token.decimals());\\n    } else {\\n      // if the token originates on a remote chain,\\n      // burn the representation tokens on this chain\\n      if (_amount > 0) {\\n        token.burn(msg.sender, _amount);\\n      }\\n      detailsHash = token.detailsHash();\\n    }\\n\\n    // format action\\n    bytes29 action = ConnextMessage.formatTransfer(\\n      TypeCasts.addressToBytes32(_args.xCallArgs.params.to),\\n      _amount,\\n      detailsHash,\\n      _transferId\\n    );\\n\\n    // get the tokenID\\n    (uint32 domain, bytes32 id) = _args.tokenRegistry.getTokenId(_asset);\\n\\n    // format token id\\n    bytes29 tokenId = ConnextMessage.formatTokenId(domain, id);\\n\\n    // send message\\n    return ConnextMessage.formatMessage(tokenId, action);\\n  }\\n\\n  /**\\n   * @notice Process the transfer, and calldata if needed, when calling `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _handleExecuteTransaction(\\n    ExecuteLibArgs calldata _args,\\n    uint256 _amount,\\n    address _adopted,\\n    bytes32 _transferId,\\n    bool _reconciled\\n  ) private {\\n    // execute the the transaction\\n    if (keccak256(_args.executeArgs.params.callData) == EMPTY) {\\n      // no call data, send funds to the user\\n      AssetLogic.transferAssetFromContract(_adopted, _args.executeArgs.params.to, _amount, _args.wrapper);\\n    } else {\\n      // execute calldata w/funds\\n      AssetLogic.transferAssetFromContract(_adopted, address(_args.executor), _amount, _args.wrapper);\\n      _args.executor.execute(\\n        _transferId,\\n        _amount,\\n        payable(_args.executeArgs.params.to),\\n        _adopted,\\n        _reconciled\\n          ? LibCrossDomainProperty.formatDomainAndSenderBytes(\\n            _args.executeArgs.params.originDomain,\\n            _args.executeArgs.originSender\\n          )\\n          : LibCrossDomainProperty.EMPTY_BYTES,\\n        _args.executeArgs.params.callData\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Execute liquidity process used when calling `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _handleExecuteLiquidity(\\n    bytes32 _transferId,\\n    bool _isFast,\\n    ExecuteLibArgs calldata _args,\\n    mapping(bytes32 => address[]) storage _routedTransfers,\\n    mapping(address => mapping(address => uint256)) storage _routerBalances,\\n    mapping(bytes32 => IStableSwap) storage _adoptedToLocalPools,\\n    mapping(bytes32 => address) storage _canonicalToAdopted\\n  ) private returns (uint256, address) {\\n    uint256 toSwap = _args.executeArgs.amount;\\n    uint256 pathLen = _args.executeArgs.routers.length;\\n    if (_isFast) {\\n      // this is the fast liquidity path\\n      // ensure the router is whitelisted\\n\\n      // calculate amount with fast liquidity fee\\n      toSwap = _getFastTransferAmount(\\n        _args.executeArgs.amount,\\n        _args.liquidityFeeNumerator,\\n        _args.liquidityFeeDenominator\\n      );\\n\\n      // TODO: validate routers signature on path / transferId\\n\\n      // store the routers address\\n      _routedTransfers[_transferId] = _args.executeArgs.routers;\\n\\n      // for each router, assert they are approved, and deduct liquidity\\n      uint256 routerAmount = toSwap / pathLen;\\n      for (uint256 i; i < pathLen; ) {\\n        // decrement routers liquidity\\n        _routerBalances[_args.executeArgs.routers[i]][_args.executeArgs.local] -= routerAmount;\\n\\n        unchecked {\\n          i++;\\n        }\\n      }\\n    }\\n\\n    // swap out of mad* asset into adopted asset if needed\\n    return\\n      AssetLogic.swapFromLocalAssetIfNeeded(\\n        _canonicalToAdopted,\\n        _adoptedToLocalPools,\\n        _args.tokenRegistry,\\n        _args.executeArgs.local,\\n        toSwap\\n      );\\n  }\\n\\n  /**\\n   * @notice Holds the logic to recover the signer from an encoded payload.\\n   * @dev Will hash and convert to an eth signed message.\\n   * @param _signed The hash that was signed\\n   * @param _sig The signature you are recovering the signer from\\n   */\\n  function _recoverSignature(bytes32 _signed, bytes calldata _sig) internal pure returns (address) {\\n    // Recover\\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(_signed), _sig);\\n  }\\n}\\n\",\"keccak256\":\"0xd7f6bc9cab6ded4001a7c661fa335c9fd529e7b1241f222e13c1624a5dda233b\",\"license\":\"UNLICENSED\"},\"contracts/lib/Connext/RouterPermissionsManagerLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/**\\n * @notice Contains RouterPermissionsManager related state\\n * @param approvedRouters - Mapping of whitelisted router addresses\\n * @param routerRecipients - Mapping of router withdraw recipient addresses.\\n * If set, all liquidity is withdrawn only to this address. Must be set by routerOwner\\n * (if configured) or the router itself\\n * @param routerOwners - Mapping of router owners\\n * If set, can update the routerRecipient\\n * @param proposedRouterOwners - Mapping of proposed router owners\\n * Must wait timeout to set the\\n * @param proposedRouterTimestamp - Mapping of proposed router owners timestamps\\n * When accepting a proposed owner, must wait for delay to elapse\\n */\\nstruct RouterPermissionsManagerInfo {\\n  mapping(address => bool) approvedRouters;\\n  mapping(address => address) routerRecipients;\\n  mapping(address => address) routerOwners;\\n  mapping(address => address) proposedRouterOwners;\\n  mapping(address => uint256) proposedRouterTimestamp;\\n}\\n\\nlibrary RouterPermissionsManagerLogic {\\n  // ========== Custom Errors ===========\\n  error RouterPermissionsManagerLogic__acceptProposedRouterOwner_notElapsed();\\n  error RouterPermissionsManagerLogic__setRouterRecipient_notNewRecipient();\\n  error RouterPermissionsManagerLogic__onlyRouterOwner_notRouterOwner();\\n  error RouterPermissionsManagerLogic__onlyProposedRouterOwner_notRouterOwner();\\n  error RouterPermissionsManagerLogic__onlyProposedRouterOwner_notProposedRouterOwner();\\n  error RouterPermissionsManagerLogic__removeRouter_routerEmpty();\\n  error RouterPermissionsManagerLogic__removeRouter_notAdded();\\n  error RouterPermissionsManagerLogic__setupRouter_routerEmpty();\\n  error RouterPermissionsManagerLogic__setupRouter_amountIsZero();\\n  error RouterPermissionsManagerLogic__proposeRouterOwner_notNewOwner();\\n  error RouterPermissionsManagerLogic__proposeRouterOwner_badRouter();\\n\\n  /**\\n   * @notice Emitted when a new router is added\\n   * @param router - The address of the added router\\n   * @param caller - The account that called the function\\n   */\\n  event RouterAdded(address indexed router, address caller);\\n\\n  /**\\n   * @notice Emitted when an existing router is removed\\n   * @param router - The address of the removed router\\n   * @param caller - The account that called the function\\n   */\\n  event RouterRemoved(address indexed router, address caller);\\n\\n  /**\\n   * @notice Emitted when the recipient of router is updated\\n   * @param router - The address of the added router\\n   * @param prevRecipient  - The address of the previous recipient of the router\\n   * @param newRecipient  - The address of the new recipient of the router\\n   */\\n  event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient);\\n\\n  /**\\n   * @notice Emitted when the owner of router is proposed\\n   * @param router - The address of the added router\\n   * @param prevProposed  - The address of the previous proposed\\n   * @param newProposed  - The address of the new proposed\\n   */\\n  event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed);\\n\\n  /**\\n   * @notice Emitted when the owner of router is accepted\\n   * @param router - The address of the added router\\n   * @param prevOwner  - The address of the previous owner of the router\\n   * @param newOwner  - The address of the new owner of the router\\n   */\\n  event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Asserts caller is the router owner (if set) or the router itself\\n   */\\n  function _onlyRouterOwner(address _router, address _owner) internal view {\\n    if (!((_owner == address(0) && msg.sender == _router) || _owner == msg.sender))\\n      revert RouterPermissionsManagerLogic__onlyRouterOwner_notRouterOwner();\\n  }\\n\\n  /**\\n   * @notice Asserts caller is the proposed router. If proposed router is address(0), then asserts\\n   * the owner is calling the function (if set), or the router itself is calling the function\\n   */\\n  function _onlyProposedRouterOwner(\\n    address _router,\\n    address _owner,\\n    address _proposed\\n  ) internal view {\\n    if (_proposed == address(0)) {\\n      if (!((_owner == address(0) && msg.sender == _router) || _owner == msg.sender))\\n        revert RouterPermissionsManagerLogic__onlyProposedRouterOwner_notRouterOwner();\\n    } else {\\n      if (msg.sender != _proposed)\\n        revert RouterPermissionsManagerLogic__onlyProposedRouterOwner_notProposedRouterOwner();\\n    }\\n  }\\n\\n  // ============ Public methods =============\\n\\n  /**\\n   * @notice Sets the designated recipient for a router\\n   * @dev Router should only be able to set this once otherwise if router key compromised,\\n   * no problem is solved since attacker could just update recipient\\n   * @param router Router address to set recipient\\n   * @param recipient Recipient Address to set to router\\n   */\\n  function setRouterRecipient(\\n    address router,\\n    address recipient,\\n    RouterPermissionsManagerInfo storage routerInfo // mapping(address => address) storage routerOwners, // mapping(address => address) storage routerRecipients\\n  ) external {\\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\\n\\n    // Check recipient is changing\\n    address _prevRecipient = routerInfo.routerRecipients[router];\\n    if (_prevRecipient == recipient) revert RouterPermissionsManagerLogic__setRouterRecipient_notNewRecipient();\\n\\n    // Set new recipient\\n    routerInfo.routerRecipients[router] = recipient;\\n\\n    // Emit event\\n    emit RouterRecipientSet(router, _prevRecipient, recipient);\\n  }\\n\\n  /**\\n   * @notice Current owner or router may propose a new router owner\\n   * @param router Router address to set recipient\\n   * @param proposed Proposed owner Address to set to router\\n   */\\n  function proposeRouterOwner(\\n    address router,\\n    address proposed,\\n    RouterPermissionsManagerInfo storage routerInfo\\n  ) external {\\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\\n\\n    // Check that proposed is different than current owner\\n    if (getRouterOwner(router, routerInfo.routerOwners) == proposed)\\n      revert RouterPermissionsManagerLogic__proposeRouterOwner_notNewOwner();\\n\\n    // Check that proposed is different than current proposed\\n    address _currentProposed = routerInfo.proposedRouterOwners[router];\\n    if (_currentProposed == proposed) revert RouterPermissionsManagerLogic__proposeRouterOwner_badRouter();\\n\\n    // Set proposed owner + timestamp\\n    routerInfo.proposedRouterOwners[router] = proposed;\\n    routerInfo.proposedRouterTimestamp[router] = block.timestamp;\\n\\n    // Emit event\\n    emit RouterOwnerProposed(router, _currentProposed, proposed);\\n  }\\n\\n  /**\\n   * @notice New router owner must accept role, or previous if proposed is 0x0\\n   * @param router Router address to set recipient\\n   */\\n  function acceptProposedRouterOwner(\\n    address router,\\n    uint256 _delay,\\n    RouterPermissionsManagerInfo storage routerInfo\\n  ) external {\\n    _onlyProposedRouterOwner(router, routerInfo.routerOwners[router], routerInfo.proposedRouterOwners[router]);\\n\\n    address owner = getRouterOwner(router, routerInfo.routerOwners);\\n\\n    // Check timestamp has passed\\n    if (block.timestamp - routerInfo.proposedRouterTimestamp[router] <= _delay)\\n      revert RouterPermissionsManagerLogic__acceptProposedRouterOwner_notElapsed();\\n\\n    // Get current owner + proposed\\n    address _proposed = routerInfo.proposedRouterOwners[router];\\n\\n    // Update the current owner\\n    routerInfo.routerOwners[router] = _proposed;\\n\\n    // Reset proposal + timestamp\\n    if (_proposed != address(0)) {\\n      // delete proposedRouterOwners[router];\\n      routerInfo.proposedRouterOwners[router] = address(0);\\n    }\\n    routerInfo.proposedRouterTimestamp[router] = 0;\\n\\n    // Emit event\\n    emit RouterOwnerAccepted(router, owner, _proposed);\\n  }\\n\\n  /**\\n   * @notice Used to set router initial properties\\n   * @param router Router address to setup\\n   * @param owner Initial Owner of router\\n   * @param recipient Initial Recipient of router\\n   */\\n  function setupRouter(\\n    address router,\\n    address owner,\\n    address recipient,\\n    RouterPermissionsManagerInfo storage routerInfo\\n  ) internal {\\n    // Sanity check: not empty\\n    if (router == address(0)) revert RouterPermissionsManagerLogic__setupRouter_routerEmpty();\\n\\n    // Sanity check: needs approval\\n    if (routerInfo.approvedRouters[router]) revert RouterPermissionsManagerLogic__setupRouter_amountIsZero();\\n\\n    // Approve router\\n    routerInfo.approvedRouters[router] = true;\\n\\n    // Emit event\\n    emit RouterAdded(router, msg.sender);\\n\\n    // Update routerOwner (zero address possible)\\n    if (owner != address(0)) {\\n      routerInfo.routerOwners[router] = owner;\\n      emit RouterOwnerAccepted(router, address(0), owner);\\n    }\\n\\n    // Update router recipient\\n    if (recipient != address(0)) {\\n      routerInfo.routerRecipients[router] = recipient;\\n      emit RouterRecipientSet(router, address(0), recipient);\\n    }\\n  }\\n\\n  /**\\n   * @notice Used to remove routers that can transact crosschain\\n   * @param router Router address to remove\\n   */\\n  function removeRouter(address router, RouterPermissionsManagerInfo storage routerInfo) external {\\n    // Sanity check: not empty\\n    if (router == address(0)) revert RouterPermissionsManagerLogic__removeRouter_routerEmpty();\\n\\n    // Sanity check: needs removal\\n    if (!routerInfo.approvedRouters[router]) revert RouterPermissionsManagerLogic__removeRouter_notAdded();\\n\\n    // Update mapping\\n    routerInfo.approvedRouters[router] = false;\\n\\n    // Emit event\\n    emit RouterRemoved(router, msg.sender);\\n\\n    // Remove router owner\\n    address _owner = routerInfo.routerOwners[router];\\n    if (_owner != address(0)) {\\n      emit RouterOwnerAccepted(router, _owner, address(0));\\n      // delete routerOwners[router];\\n      routerInfo.routerOwners[router] = address(0);\\n    }\\n\\n    // Remove router recipient\\n    address _recipient = routerInfo.routerRecipients[router];\\n    if (_recipient != address(0)) {\\n      emit RouterRecipientSet(router, _recipient, address(0));\\n      // delete routerRecipients[router];\\n      routerInfo.routerRecipients[router] = address(0);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the router owner if it is set, or the router itself if not\\n   * @dev Router owners have the ability to propose new owners and set recipients\\n   * @param _router The relevant router address\\n   * @param _routerOwners The mapping of owners for routers\\n   */\\n  function getRouterOwner(address _router, mapping(address => address) storage _routerOwners)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address _owner = _routerOwners[_router];\\n    return _owner == address(0) ? _router : _owner;\\n  }\\n}\\n\",\"keccak256\":\"0x72b4bbd17846119ba6dff3410813e6b7cf8da51910b5c5a22378301050843076\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibCrossDomainProperty.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {TypedMemView} from \\\"../nomad-core/libs/TypedMemView.sol\\\";\\n\\nlibrary LibCrossDomainProperty {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes29;\\n  using TypedMemView for bytes;\\n\\n  // ============ Enums ============\\n\\n  /**\\n   * Contains information so the properties can be type-checked properly\\n   */\\n  enum Types {\\n    Invalid, // 0\\n    DomainAndSender // 1\\n  }\\n\\n  // ============ Structs ============\\n\\n  /**\\n   * Struct containing the domain and an address of the caller of a function on that\\n   * domain.\\n   */\\n  struct DomainAndSender {\\n    uint32 domain;\\n    address sender;\\n  }\\n\\n  // ============ Constants ============\\n\\n  uint256 private constant PROPERTY_LEN = 25; // 1 byte identifer + 4 bytes domain + 20 bytes address\\n  // default value is the TypedMemView null view\\n  bytes29 public constant EMPTY = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  bytes public constant EMPTY_BYTES = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a property is of type `_t`\\n   * @param _view The stored property\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Checks that view is a valid property length\\n   * @param _view The bytes string\\n   * @return TRUE if length is valid\\n   */\\n  function isValidPropertyLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    return _len == PROPERTY_LEN;\\n  }\\n\\n  /**\\n   * @notice Checks that the property is of the specified type\\n   * @param _type the type to check for\\n   * @param _property The property\\n   * @return True if the property is of the specified type\\n   */\\n  function isType(bytes29 _property, Types _type) internal pure returns (bool) {\\n    return propertyType(_property) == uint8(_type);\\n  }\\n\\n  /**\\n   * @notice Checks that the property is of type DomainAndSender\\n   * @param _property The property\\n   * @return True if the property is of type DomainAndSender\\n   */\\n  function isDomainAndSender(bytes29 _property) internal pure returns (bool) {\\n    return isValidPropertyLength(_property) && isType(_property, Types.DomainAndSender);\\n  }\\n\\n  /**\\n   * @notice Retrieves the identifier from property\\n   * @param _property The property\\n   * @return The property type\\n   */\\n  function propertyType(bytes29 _property) internal pure returns (uint8) {\\n    return uint8(_property.indexUint(0, 1));\\n  }\\n\\n  /**\\n   * @notice Converts to a Property\\n   * @param _view The property\\n   * @return The newly typed property\\n   */\\n  function tryAsProperty(bytes29 _view) internal pure returns (bytes29) {\\n    if (isValidPropertyLength(_view)) {\\n      return _view.castTo(uint40(Types.DomainAndSender));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the property is of type DomainAndSender\\n   * @param _view The property\\n   * @return The property\\n   */\\n  function mustBeProperty(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsProperty(_view).assertValid();\\n  }\\n\\n  /**\\n   * @notice Retrieves the sender from a property\\n   * @param _property The property\\n   * @return The sender address\\n   */\\n  function sender(bytes29 _property) internal pure typeAssert(_property, Types.DomainAndSender) returns (address) {\\n    // before = 1 byte id + 4 bytes domain = 5 bytes\\n    return _property.indexAddress(5);\\n  }\\n\\n  /**\\n   * @notice Retrieves the domain from a property\\n   * @param _property The property\\n   * @return The sender address\\n   */\\n  function domain(bytes29 _property) internal pure typeAssert(_property, Types.DomainAndSender) returns (uint32) {\\n    // before = 1 byte identifier = 1 byte\\n    return uint32(_property.indexUint(1, 4));\\n  }\\n\\n  /**\\n   * @notice Creates a serialized property from components\\n   * @param _domain The domain\\n   * @param _sender The sender\\n   * @return The formatted view\\n   */\\n  function formatDomainAndSender(uint32 _domain, address _sender) internal pure returns (bytes29) {\\n    return abi.encodePacked(Types.DomainAndSender, _domain, _sender).ref(0).castTo(uint40(Types.DomainAndSender));\\n  }\\n\\n  /**\\n   * @notice Creates a serialized property from components\\n   * @param _domain The domain\\n   * @param _sender The sender\\n   * @return The formatted view\\n   */\\n  function formatDomainAndSenderBytes(uint32 _domain, address _sender) internal pure returns (bytes memory) {\\n    return abi.encodePacked(Types.DomainAndSender, _domain, _sender);\\n  }\\n\\n  /**\\n   * @notice Creates a serialized property from components\\n   * @param _property The bytes representation of the property\\n   */\\n  function parseDomainAndSenderBytes(bytes memory _property) internal pure returns (bytes29) {\\n    return mustBeProperty(_property.ref(0));\\n  }\\n}\\n\",\"keccak256\":\"0xcba3ef23aeb393878d9b0c4ca6292f5425bf984569829313517f57f93248fa30\",\"license\":\"UNLICENSED\"},\"contracts/nomad-core/contracts/Home.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Version0} from \\\"./Version0.sol\\\";\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\nimport {QueueLib} from \\\"../libs/Queue.sol\\\";\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\nimport {MerkleTreeManager} from \\\"./Merkle.sol\\\";\\nimport {QueueManager} from \\\"./Queue.sol\\\";\\nimport {IUpdaterManager} from \\\"../interfaces/IUpdaterManager.sol\\\";\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Home\\n * @author Illusory Systems Inc.\\n * @notice Accepts messages to be dispatched to remote chains,\\n * constructs a Merkle tree of the messages,\\n * and accepts signatures from a bonded Updater\\n * which notarize the Merkle tree roots.\\n * Accepts submissions of fraudulent signatures\\n * by the Updater and slashes the Updater in this case.\\n */\\ncontract Home is Version0, QueueManager, MerkleTreeManager, NomadBase {\\n  // ============ Libraries ============\\n\\n  using QueueLib for QueueLib.Queue;\\n  using MerkleLib for MerkleLib.Tree;\\n\\n  // ============ Constants ============\\n\\n  // Maximum bytes per message = 2 KiB\\n  // (somewhat arbitrarily set to begin)\\n  uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\\n\\n  // ============ Public Storage Variables ============\\n\\n  // domain => next available nonce for the domain\\n  mapping(uint32 => uint32) public nonces;\\n  // contract responsible for Updater bonding, slashing and rotation\\n  IUpdaterManager public updaterManager;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[48] private __GAP;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when a new message is dispatched via Nomad\\n   * @param leafIndex Index of message's leaf in merkle tree\\n   * @param destinationAndNonce Destination and destination-specific\\n   * nonce combined in single field ((destination << 32) & nonce)\\n   * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\n   * @param committedRoot the latest notarized root submitted in the last signed Update\\n   * @param message Raw bytes of message\\n   */\\n  event Dispatch(\\n    bytes32 indexed messageHash,\\n    uint256 indexed leafIndex,\\n    uint64 indexed destinationAndNonce,\\n    bytes32 committedRoot,\\n    bytes message\\n  );\\n\\n  /**\\n   * @notice Emitted when proof of an improper update is submitted,\\n   * which sets the contract to FAILED state\\n   * @param oldRoot Old root of the improper update\\n   * @param newRoot New root of the improper update\\n   * @param signature Signature on `oldRoot` and `newRoot\\n   */\\n  event ImproperUpdate(bytes32 oldRoot, bytes32 newRoot, bytes signature);\\n\\n  /**\\n   * @notice Emitted when the Updater is slashed\\n   * (should be paired with ImproperUpdater or DoubleUpdate event)\\n   * @param updater The address of the updater\\n   * @param reporter The address of the entity that reported the updater misbehavior\\n   */\\n  event UpdaterSlashed(address indexed updater, address indexed reporter);\\n\\n  /**\\n   * @notice Emitted when the UpdaterManager contract is changed\\n   * @param updaterManager The address of the new updaterManager\\n   */\\n  event NewUpdaterManager(address updaterManager);\\n\\n  // ============ Constructor ============\\n\\n  constructor(uint32 _localDomain) NomadBase(_localDomain) {} // solhint-disable-line no-empty-blocks\\n\\n  // ============ Initializer ============\\n\\n  function initialize(IUpdaterManager _updaterManager) public initializer {\\n    // initialize queue, set Updater Manager, and initialize\\n    __QueueManager_initialize();\\n    _setUpdaterManager(_updaterManager);\\n    __NomadBase_initialize(updaterManager.updater());\\n  }\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Ensures that function is called by the UpdaterManager contract\\n   */\\n  modifier onlyUpdaterManager() {\\n    require(msg.sender == address(updaterManager), \\\"!updaterManager\\\");\\n    _;\\n  }\\n\\n  // ============ External: Updater & UpdaterManager Configuration  ============\\n\\n  /**\\n   * @notice Set a new Updater\\n   * @param _updater the new Updater\\n   */\\n  function setUpdater(address _updater) external onlyUpdaterManager {\\n    _setUpdater(_updater);\\n  }\\n\\n  /**\\n   * @notice Set a new UpdaterManager contract\\n   * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\\n   * we will progressively decentralize by swapping the trusted contract with a new implementation\\n   * that implements Updater bonding & slashing, and rules for Updater selection & rotation\\n   * @param _updaterManager the new UpdaterManager contract\\n   */\\n  function setUpdaterManager(address _updaterManager) external onlyOwner {\\n    _setUpdaterManager(IUpdaterManager(_updaterManager));\\n  }\\n\\n  // ============ External Functions  ============\\n\\n  /**\\n   * @notice Dispatch the message it to the destination domain & recipient\\n   * @dev Format the message, insert its hash into Merkle tree,\\n   * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipientAddress Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes content of message\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external notFailed {\\n    require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \\\"msg too long\\\");\\n    // get the next nonce for the destination domain, then increment it\\n    uint32 _nonce = nonces[_destinationDomain];\\n    nonces[_destinationDomain] = _nonce + 1;\\n    // format the message into packed bytes\\n    bytes memory _message = Message.formatMessage(\\n      localDomain,\\n      bytes32(uint256(uint160(msg.sender))),\\n      _nonce,\\n      _destinationDomain,\\n      _recipientAddress,\\n      _messageBody\\n    );\\n    // insert the hashed message into the Merkle tree\\n    bytes32 _messageHash = keccak256(_message);\\n    tree.insert(_messageHash);\\n    // enqueue the new Merkle root after inserting the message\\n    queue.enqueue(root());\\n    // Emit Dispatch event with message information\\n    // note: leafIndex is count() - 1 since new leaf has already been inserted\\n    emit Dispatch(_messageHash, count() - 1, _destinationAndNonce(_destinationDomain, _nonce), committedRoot, _message);\\n  }\\n\\n  /**\\n   * @notice Submit a signature from the Updater \\\"notarizing\\\" a root,\\n   * which updates the Home contract's `committedRoot`,\\n   * and publishes the signature which will be relayed to Replica contracts\\n   * @dev emits Update event\\n   * @dev If _newRoot is not contained in the queue,\\n   * the Update is a fraudulent Improper Update, so\\n   * the Updater is slashed & Home is set to FAILED state\\n   * @param _committedRoot Current updated merkle root which the update is building off of\\n   * @param _newRoot New merkle root to update the contract state to\\n   * @param _signature Updater signature on `_committedRoot` and `_newRoot`\\n   */\\n  function update(\\n    bytes32 _committedRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) external notFailed {\\n    // check that the update is not fraudulent;\\n    // if fraud is detected, Updater is slashed & Home is set to FAILED state\\n    if (improperUpdate(_committedRoot, _newRoot, _signature)) return;\\n    // clear all of the intermediate roots contained in this update from the queue\\n    while (true) {\\n      bytes32 _next = queue.dequeue();\\n      if (_next == _newRoot) break;\\n    }\\n    // update the Home state with the latest signed root & emit event\\n    committedRoot = _newRoot;\\n    emit Update(localDomain, _committedRoot, _newRoot, _signature);\\n  }\\n\\n  /**\\n   * @notice Suggest an update for the Updater to sign and submit.\\n   * @dev If queue is empty, null bytes returned for both\\n   * (No update is necessary because no messages have been dispatched since the last update)\\n   * @return _committedRoot Latest root signed by the Updater\\n   * @return _new Latest enqueued Merkle root\\n   */\\n  function suggestUpdate() external view returns (bytes32 _committedRoot, bytes32 _new) {\\n    if (queue.length() != 0) {\\n      _committedRoot = committedRoot;\\n      _new = queue.lastItem();\\n    }\\n  }\\n\\n  // ============ Public Functions  ============\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   */\\n  function homeDomainHash() public view override returns (bytes32) {\\n    return _homeDomainHash(localDomain);\\n  }\\n\\n  /**\\n   * @notice Check if an Update is an Improper Update;\\n   * if so, slash the Updater and set the contract to FAILED state.\\n   *\\n   * An Improper Update is an update building off of the Home's `committedRoot`\\n   * for which the `_newRoot` does not currently exist in the Home's queue.\\n   * This would mean that message(s) that were not truly\\n   * dispatched on Home were falsely included in the signed root.\\n   *\\n   * An Improper Update will only be accepted as valid by the Replica\\n   * If an Improper Update is attempted on Home,\\n   * the Updater will be slashed immediately.\\n   * If an Improper Update is submitted to the Replica,\\n   * it should be relayed to the Home contract using this function\\n   * in order to slash the Updater with an Improper Update.\\n   *\\n   * An Improper Update submitted to the Replica is only valid\\n   * while the `_oldRoot` is still equal to the `committedRoot` on Home;\\n   * if the `committedRoot` on Home has already been updated with a valid Update,\\n   * then the Updater should be slashed with a Double Update.\\n   * @dev Reverts (and doesn't slash updater) if signature is invalid or\\n   * update not current\\n   * @param _oldRoot Old merkle tree root (should equal home's committedRoot)\\n   * @param _newRoot New merkle tree root\\n   * @param _signature Updater signature on `_oldRoot` and `_newRoot`\\n   * @return TRUE if update was an Improper Update (implying Updater was slashed)\\n   */\\n  function improperUpdate(\\n    bytes32 _oldRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) public notFailed returns (bool) {\\n    require(_isUpdaterSignature(_oldRoot, _newRoot, _signature), \\\"!updater sig\\\");\\n    require(_oldRoot == committedRoot, \\\"not a current update\\\");\\n    // if the _newRoot is not currently contained in the queue,\\n    // slash the Updater and set the contract to FAILED state\\n    if (!queue.contains(_newRoot)) {\\n      _fail();\\n      emit ImproperUpdate(_oldRoot, _newRoot, _signature);\\n      return true;\\n    }\\n    // if the _newRoot is contained in the queue,\\n    // this is not an improper update\\n    return false;\\n  }\\n\\n  // ============ Internal Functions  ============\\n\\n  /**\\n   * @notice Set the UpdaterManager\\n   * @param _updaterManager Address of the UpdaterManager\\n   */\\n  function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\\n    require(Address.isContract(address(_updaterManager)), \\\"!contract updaterManager\\\");\\n    updaterManager = IUpdaterManager(_updaterManager);\\n    emit NewUpdaterManager(address(_updaterManager));\\n  }\\n\\n  /**\\n   * @notice Slash the Updater and set contract state to FAILED\\n   * @dev Called when fraud is proven (Improper Update or Double Update)\\n   */\\n  function _fail() internal override {\\n    // set contract to FAILED\\n    _setFailed();\\n    // slash Updater\\n    updaterManager.slashUpdater(payable(msg.sender));\\n    emit UpdaterSlashed(updater, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Internal utility function that combines\\n   * `_destination` and `_nonce`.\\n   * @dev Both destination and nonce should be less than 2^32 - 1\\n   * @param _destination Domain of destination chain\\n   * @param _nonce Current nonce for given destination chain\\n   * @return Returns (`_destination` << 32) & `_nonce`\\n   */\\n  function _destinationAndNonce(uint32 _destination, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_destination) << 32) | _nonce;\\n  }\\n}\\n\",\"keccak256\":\"0xed74ddb383b57ad0dab108aff28c581c95a7f417044ea9da266b367b2edcc567\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\n\\n/**\\n * @title MerkleTreeManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a Merkle tree instance and\\n * exposes view functions for the tree.\\n */\\ncontract MerkleTreeManager {\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n  MerkleLib.Tree public tree;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Calculates and returns tree's current root\\n   */\\n  function root() public view returns (bytes32) {\\n    return tree.root();\\n  }\\n\\n  /**\\n   * @notice Returns the number of inserted leaves in the tree (current index)\\n   */\\n  function count() public view returns (uint256) {\\n    return tree.count;\\n  }\\n}\\n\",\"keccak256\":\"0x065fd34c72a6083074d108893aee8a27590423c11e2158cd005a5eab0369b0ab\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/NomadBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Message} from \\\"../libs/Message.sol\\\";\\n// ============ External Imports ============\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title NomadBase\\n * @author Illusory Systems Inc.\\n * @notice Shared utilities between Home and Replica.\\n */\\nabstract contract NomadBase is Initializable, OwnableUpgradeable {\\n  // ============ Enums ============\\n\\n  // States:\\n  //   0 - UnInitialized - before initialize function is called\\n  //   note: the contract is initialized at deploy time, so it should never be in this state\\n  //   1 - Active - as long as the contract has not become fraudulent\\n  //   2 - Failed - after a valid fraud proof has been submitted;\\n  //   contract will no longer accept updates or new messages\\n  enum States {\\n    UnInitialized,\\n    Active,\\n    Failed\\n  }\\n\\n  // ============ Immutable Variables ============\\n\\n  // Domain of chain on which the contract is deployed\\n  uint32 public immutable localDomain;\\n\\n  // ============ Public Variables ============\\n\\n  // Address of bonded Updater\\n  address public updater;\\n  // Current state of contract\\n  States public state;\\n  // The latest root that has been signed by the Updater\\n  bytes32 public committedRoot;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[47] private __GAP;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when update is made on Home\\n   * or unconfirmed update root is submitted on Replica\\n   * @param homeDomain Domain of home contract\\n   * @param oldRoot Old merkle root\\n   * @param newRoot New merkle root\\n   * @param signature Updater's signature on `oldRoot` and `newRoot`\\n   */\\n  event Update(uint32 indexed homeDomain, bytes32 indexed oldRoot, bytes32 indexed newRoot, bytes signature);\\n\\n  /**\\n   * @notice Emitted when proof of a double update is submitted,\\n   * which sets the contract to FAILED state\\n   * @param oldRoot Old root shared between two conflicting updates\\n   * @param newRoot Array containing two conflicting new roots\\n   * @param signature Signature on `oldRoot` and `newRoot`[0]\\n   * @param signature2 Signature on `oldRoot` and `newRoot`[1]\\n   */\\n  event DoubleUpdate(bytes32 oldRoot, bytes32[2] newRoot, bytes signature, bytes signature2);\\n\\n  /**\\n   * @notice Emitted when Updater is rotated\\n   * @param oldUpdater The address of the old updater\\n   * @param newUpdater The address of the new updater\\n   */\\n  event NewUpdater(address oldUpdater, address newUpdater);\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Ensures that contract state != FAILED when the function is called\\n   */\\n  modifier notFailed() {\\n    require(state != States.Failed, \\\"failed state\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  constructor(uint32 _localDomain) {\\n    localDomain = _localDomain;\\n  }\\n\\n  // ============ Initializer ============\\n\\n  function __NomadBase_initialize(address _updater) internal initializer {\\n    __Ownable_init();\\n    _setUpdater(_updater);\\n    state = States.Active;\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Called by external agent. Checks that signatures on two sets of\\n   * roots are valid and that the new roots conflict with each other. If both\\n   * cases hold true, the contract is failed and a `DoubleUpdate` event is\\n   * emitted.\\n   * @dev When `fail()` is called on Home, updater is slashed.\\n   * @param _oldRoot Old root shared between two conflicting updates\\n   * @param _newRoot Array containing two conflicting new roots\\n   * @param _signature Signature on `_oldRoot` and `_newRoot`[0]\\n   * @param _signature2 Signature on `_oldRoot` and `_newRoot`[1]\\n   */\\n  function doubleUpdate(\\n    bytes32 _oldRoot,\\n    bytes32[2] calldata _newRoot,\\n    bytes calldata _signature,\\n    bytes calldata _signature2\\n  ) external notFailed {\\n    if (\\n      NomadBase._isUpdaterSignature(_oldRoot, _newRoot[0], _signature) &&\\n      NomadBase._isUpdaterSignature(_oldRoot, _newRoot[1], _signature2) &&\\n      _newRoot[0] != _newRoot[1]\\n    ) {\\n      _fail();\\n      emit DoubleUpdate(_oldRoot, _newRoot, _signature, _signature2);\\n    }\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   */\\n  function homeDomainHash() public view virtual returns (bytes32);\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   * @param _homeDomain the Home domain to hash\\n   */\\n  function _homeDomainHash(uint32 _homeDomain) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_homeDomain, \\\"NOMAD\\\"));\\n  }\\n\\n  /**\\n   * @notice Set contract state to FAILED\\n   * @dev Called when a valid fraud proof is submitted\\n   */\\n  function _setFailed() internal {\\n    state = States.Failed;\\n  }\\n\\n  /**\\n   * @notice Moves the contract into failed state\\n   * @dev Called when fraud is proven\\n   * (Double Update is submitted on Home or Replica,\\n   * or Improper Update is submitted on Home)\\n   */\\n  function _fail() internal virtual;\\n\\n  /**\\n   * @notice Set the Updater\\n   * @param _newUpdater Address of the new Updater\\n   */\\n  function _setUpdater(address _newUpdater) internal {\\n    address _oldUpdater = updater;\\n    updater = _newUpdater;\\n    emit NewUpdater(_oldUpdater, _newUpdater);\\n  }\\n\\n  /**\\n   * @notice Checks that signature was signed by Updater\\n   * @param _oldRoot Old merkle root\\n   * @param _newRoot New merkle root\\n   * @param _signature Signature on `_oldRoot` and `_newRoot`\\n   * @return TRUE iff signature is valid signed by updater\\n   **/\\n  function _isUpdaterSignature(\\n    bytes32 _oldRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) internal view returns (bool) {\\n    bytes32 _digest = keccak256(abi.encodePacked(homeDomainHash(), _oldRoot, _newRoot));\\n    _digest = ECDSA.toEthSignedMessageHash(_digest);\\n    return (ECDSA.recover(_digest, _signature) == updater);\\n  }\\n}\\n\",\"keccak256\":\"0x483124ff79dba668241e1707c53b20fa8b80ba97536eebf002060cf490b3b762\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {QueueLib} from \\\"../libs/Queue.sol\\\";\\n// ============ External Imports ============\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title QueueManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a queue instance and\\n * exposes view functions for the queue.\\n **/\\ncontract QueueManager is Initializable {\\n  // ============ Libraries ============\\n\\n  using QueueLib for QueueLib.Queue;\\n  QueueLib.Queue internal queue;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ============ Initializer ============\\n\\n  function __QueueManager_initialize() internal initializer {\\n    queue.initialize();\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Returns number of elements in queue\\n   */\\n  function queueLength() external view returns (uint256) {\\n    return queue.length();\\n  }\\n\\n  /**\\n   * @notice Returns TRUE iff `_item` is in the queue\\n   */\\n  function queueContains(bytes32 _item) external view returns (bool) {\\n    return queue.contains(_item);\\n  }\\n\\n  /**\\n   * @notice Returns last item enqueued to the queue\\n   */\\n  function queueEnd() external view returns (bytes32) {\\n    return queue.lastItem();\\n  }\\n}\\n\",\"keccak256\":\"0xb8076aba530cbc7d1e215fdb7272ff93aec1c0e96ffaa44c1476c2d15cda044b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Replica.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Version0} from \\\"./Version0.sol\\\";\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\n// ============ External Imports ============\\n// import {TypedMemView} from \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\nimport {TypedMemView} from \\\"../libs/TypedMemView.sol\\\";\\n\\n/**\\n * @title Replica\\n * @author Illusory Systems Inc.\\n * @notice Track root updates on Home,\\n * prove and dispatch messages to end recipients.\\n */\\ncontract Replica is Version0, NomadBase {\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using Message for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // Status of Message:\\n  //   0 - None - message has not been proven or processed\\n  //   1 - Proven - message inclusion proof has been validated\\n  //   2 - Processed - message has been dispatched to recipient\\n  enum MessageStatus {\\n    None,\\n    Proven,\\n    Processed\\n  }\\n\\n  // ============ Immutables ============\\n\\n  // Minimum gas for message processing\\n  uint256 public immutable PROCESS_GAS;\\n  // Reserved gas (to ensure tx completes in case message processing runs out)\\n  uint256 public immutable RESERVE_GAS;\\n\\n  // ============ Public Storage ============\\n\\n  // Domain of home chain\\n  uint32 public remoteDomain;\\n  // Number of seconds to wait before root becomes confirmable\\n  uint256 public optimisticSeconds;\\n  // re-entrancy guard\\n  uint8 private entered;\\n  // Mapping of roots to allowable confirmation times\\n  mapping(bytes32 => uint256) public confirmAt;\\n  // Mapping of message leaves to MessageStatus\\n  mapping(bytes32 => MessageStatus) public messages;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[45] private __GAP;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when message is processed\\n   * @param messageHash Hash of message that failed to process\\n   * @param success TRUE if the call was executed successfully, FALSE if the call reverted\\n   * @param returnData the return data from the external call\\n   */\\n  event Process(bytes32 indexed messageHash, bool indexed success, bytes indexed returnData);\\n\\n  /**\\n   * @notice Emitted when the value for optimisticTimeout is set\\n   * @param timeout The new value for optimistic timeout\\n   */\\n  event SetOptimisticTimeout(uint256 timeout);\\n\\n  /**\\n   * @notice Emitted when a root's confirmation is modified by governance\\n   * @param root The root for which confirmAt has been set\\n   * @param previousConfirmAt The previous value of confirmAt\\n   * @param newConfirmAt The new value of confirmAt\\n   */\\n  event SetConfirmation(bytes32 indexed root, uint256 previousConfirmAt, uint256 newConfirmAt);\\n\\n  // ============ Constructor ============\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(\\n    uint32 _localDomain,\\n    uint256 _processGas,\\n    uint256 _reserveGas\\n  ) NomadBase(_localDomain) {\\n    require(_processGas >= 850_000, \\\"!process gas\\\");\\n    require(_reserveGas >= 15_000, \\\"!reserve gas\\\");\\n    PROCESS_GAS = _processGas;\\n    RESERVE_GAS = _reserveGas;\\n  }\\n\\n  // ============ Initializer ============\\n\\n  function initialize(\\n    uint32 _remoteDomain,\\n    address _updater,\\n    bytes32 _committedRoot,\\n    uint256 _optimisticSeconds\\n  ) public initializer {\\n    __NomadBase_initialize(_updater);\\n    // set storage variables\\n    entered = 1;\\n    remoteDomain = _remoteDomain;\\n    committedRoot = _committedRoot;\\n    confirmAt[_committedRoot] = 1;\\n    optimisticSeconds = _optimisticSeconds;\\n    emit SetOptimisticTimeout(_optimisticSeconds);\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Called by external agent. Submits the signed update's new root,\\n   * marks root's allowable confirmation time, and emits an `Update` event.\\n   * @dev Reverts if update doesn't build off latest committedRoot\\n   * or if signature is invalid.\\n   * @param _oldRoot Old merkle root\\n   * @param _newRoot New merkle root\\n   * @param _signature Updater's signature on `_oldRoot` and `_newRoot`\\n   */\\n  function update(\\n    bytes32 _oldRoot,\\n    bytes32 _newRoot,\\n    bytes memory _signature\\n  ) external notFailed {\\n    // ensure that update is building off the last submitted root\\n    require(_oldRoot == committedRoot, \\\"not current update\\\");\\n    // validate updater signature\\n    require(_isUpdaterSignature(_oldRoot, _newRoot, _signature), \\\"!updater sig\\\");\\n    // Hook for future use\\n    _beforeUpdate();\\n    // set the new root's confirmation timer\\n    confirmAt[_newRoot] = block.timestamp + optimisticSeconds;\\n    // update committedRoot\\n    committedRoot = _newRoot;\\n    emit Update(remoteDomain, _oldRoot, _newRoot, _signature);\\n  }\\n\\n  /**\\n   * @notice First attempts to prove the validity of provided formatted\\n   * `message`. If the message is successfully proven, then tries to process\\n   * message.\\n   * @dev Reverts if `prove` call returns false\\n   * @param _message Formatted message (refer to NomadBase.sol Message library)\\n   * @param _proof Merkle proof of inclusion for message's leaf\\n   * @param _index Index of leaf in home's merkle tree\\n   */\\n  function proveAndProcess(\\n    bytes memory _message,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) external {\\n    require(prove(keccak256(_message), _proof, _index), \\\"!prove\\\");\\n    process(_message);\\n  }\\n\\n  /**\\n   * @notice Given formatted message, attempts to dispatch\\n   * message payload to end recipient.\\n   * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)\\n   * Reverts if formatted message's destination domain is not the Replica's domain,\\n   * if message has not been proven,\\n   * or if not enough gas is provided for the dispatch transaction.\\n   * @param _message Formatted message\\n   * @return _success TRUE iff dispatch transaction succeeded\\n   */\\n  function process(bytes memory _message) public returns (bool _success) {\\n    bytes29 _m = _message.ref(0);\\n    // ensure message was meant for this domain\\n    require(_m.destination() == localDomain, \\\"!destination\\\");\\n    // ensure message has been proven\\n    bytes32 _messageHash = _m.keccak();\\n    require(messages[_messageHash] == MessageStatus.Proven, \\\"!proven\\\");\\n    // check re-entrancy guard\\n    require(entered == 1, \\\"!reentrant\\\");\\n    entered = 0;\\n    // update message status as processed\\n    messages[_messageHash] = MessageStatus.Processed;\\n    // A call running out of gas TYPICALLY errors the whole tx. We want to\\n    // a) ensure the call has a sufficient amount of gas to make a\\n    //    meaningful state change.\\n    // b) ensure that if the subcall runs out of gas, that the tx as a whole\\n    //    does not revert (i.e. we still mark the message processed)\\n    // To do this, we require that we have enough gas to process\\n    // and still return. We then delegate only the minimum processing gas.\\n    require(gasleft() >= PROCESS_GAS + RESERVE_GAS, \\\"!gas\\\");\\n    // get the message recipient\\n    address _recipient = _m.recipientAddress();\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    uint256 _maxCopy = 256;\\n    uint256 _gas = PROCESS_GAS;\\n    // allocate memory for returndata\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    bytes memory _calldata = abi.encodeWithSignature(\\n      \\\"handle(uint32,uint32,bytes32,bytes)\\\",\\n      _m.origin(),\\n      _m.nonce(),\\n      _m.sender(),\\n      _m.body().clone()\\n    );\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := call(\\n        _gas, // gas\\n        _recipient, // recipient\\n        0, // ether value\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    // emit process results\\n    emit Process(_messageHash, _success, _returnData);\\n    // reset re-entrancy guard\\n    entered = 1;\\n  }\\n\\n  // ============ External Owner Functions ============\\n\\n  /**\\n   * @notice Set optimistic timeout period for new roots\\n   * @dev Only callable by owner (Governance)\\n   * @param _optimisticSeconds New optimistic timeout period\\n   */\\n  function setOptimisticTimeout(uint256 _optimisticSeconds) external onlyOwner {\\n    optimisticSeconds = _optimisticSeconds;\\n    emit SetOptimisticTimeout(_optimisticSeconds);\\n  }\\n\\n  /**\\n   * @notice Set Updater role\\n   * @dev MUST ensure that all roots signed by previous Updater have\\n   * been relayed before calling. Only callable by owner (Governance)\\n   * @param _updater New Updater\\n   */\\n  function setUpdater(address _updater) external onlyOwner {\\n    _setUpdater(_updater);\\n  }\\n\\n  /**\\n   * @notice Set confirmAt for a given root\\n   * @dev To be used if in the case that fraud is proven\\n   * and roots need to be deleted / added. Only callable by owner (Governance)\\n   * @param _root The root for which to modify confirm time\\n   * @param _confirmAt The new confirmation time. Set to 0 to \\\"delete\\\" a root.\\n   */\\n  function setConfirmation(bytes32 _root, uint256 _confirmAt) external onlyOwner {\\n    uint256 _previousConfirmAt = confirmAt[_root];\\n    confirmAt[_root] = _confirmAt;\\n    emit SetConfirmation(_root, _previousConfirmAt, _confirmAt);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Check that the root has been submitted\\n   * and that the optimistic timeout period has expired,\\n   * meaning the root can be processed\\n   * @param _root the Merkle root, submitted in an update, to check\\n   * @return TRUE iff root has been submitted & timeout has expired\\n   */\\n  function acceptableRoot(bytes32 _root) public view returns (bool) {\\n    uint256 _time = confirmAt[_root];\\n    if (_time == 0) {\\n      return false;\\n    }\\n    return block.timestamp >= _time;\\n  }\\n\\n  /**\\n   * @notice Attempts to prove the validity of message given its leaf, the\\n   * merkle proof of inclusion for the leaf, and the index of the leaf.\\n   * @dev Reverts if message's MessageStatus != None (i.e. if message was\\n   * already proven or processed)\\n   * @dev For convenience, we allow proving against any previous root.\\n   * This means that witnesses never need to be updated for the new root\\n   * @param _leaf Leaf of message to prove\\n   * @param _proof Merkle proof of inclusion for leaf\\n   * @param _index Index of leaf in home's merkle tree\\n   * @return Returns true if proof was valid and `prove` call succeeded\\n   **/\\n  function prove(\\n    bytes32 _leaf,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) public returns (bool) {\\n    // ensure that message has not been proven or processed\\n    require(messages[_leaf] == MessageStatus.None, \\\"!MessageStatus.None\\\");\\n    // calculate the expected root based on the proof\\n    bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);\\n    // if the root is valid, change status to Proven\\n    if (acceptableRoot(_calculatedRoot)) {\\n      messages[_leaf] = MessageStatus.Proven;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n   */\\n  function homeDomainHash() public view override returns (bytes32) {\\n    return _homeDomainHash(remoteDomain);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Moves the contract into failed state\\n   * @dev Called when a Double Update is submitted\\n   */\\n  function _fail() internal override {\\n    _setFailed();\\n  }\\n\\n  /// @notice Hook for potential future use\\n  // solhint-disable-next-line no-empty-blocks\\n  function _beforeUpdate() internal {}\\n}\\n\",\"keccak256\":\"0xae3f34ab4459a7647225c83f82a0816c33c77c5348e8d0f7c7f6f617c391e993\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title Version0\\n * @notice Version getter for contracts\\n **/\\ncontract Version0 {\\n  uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0x452c436ab052150c2f90f501f82d0049e08dcf87c061130a0769cf635ce681b4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/contracts/XAppConnectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {Home} from \\\"./Home.sol\\\";\\nimport {Replica} from \\\"./Replica.sol\\\";\\nimport {TypeCasts} from \\\"../libs/TypeCasts.sol\\\";\\n// ============ External Imports ============\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title XAppConnectionManager\\n * @author Illusory Systems Inc.\\n * @notice Manages a registry of local Replica contracts\\n * for remote Home domains. Accepts Watcher signatures\\n * to un-enroll Replicas attached to fraudulent remote Homes\\n */\\ncontract XAppConnectionManager is Ownable {\\n  // ============ Public Storage ============\\n\\n  // Home contract\\n  Home public home;\\n  // local Replica address => remote Home domain\\n  mapping(address => uint32) public replicaToDomain;\\n  // remote Home domain => local Replica address\\n  mapping(uint32 => address) public domainToReplica;\\n  // watcher address => replica remote domain => has/doesn't have permission\\n  mapping(address => mapping(uint32 => bool)) private watcherPermissions;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when a new Replica is enrolled / added\\n   * @param domain the remote domain of the Home contract for the Replica\\n   * @param replica the address of the Replica\\n   */\\n  event ReplicaEnrolled(uint32 indexed domain, address replica);\\n\\n  /**\\n   * @notice Emitted when a new Replica is un-enrolled / removed\\n   * @param domain the remote domain of the Home contract for the Replica\\n   * @param replica the address of the Replica\\n   */\\n  event ReplicaUnenrolled(uint32 indexed domain, address replica);\\n\\n  /**\\n   * @notice Emitted when Watcher permissions are changed\\n   * @param domain the remote domain of the Home contract for the Replica\\n   * @param watcher the address of the Watcher\\n   * @param access TRUE if the Watcher was given permissions, FALSE if permissions were removed\\n   */\\n  event WatcherPermissionSet(uint32 indexed domain, address watcher, bool access);\\n\\n  // ============ Modifiers ============\\n\\n  modifier onlyReplica() {\\n    require(isReplica(msg.sender), \\\"!replica\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() Ownable() {}\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Un-Enroll a replica contract\\n   * in the case that fraud was detected on the Home\\n   * @dev in the future, if fraud occurs on the Home contract,\\n   * the Watcher will submit their signature directly to the Home\\n   * and it can be relayed to all remote chains to un-enroll the Replicas\\n   * @param _domain the remote domain of the Home contract for the Replica\\n   * @param _updater the address of the Updater for the Home contract (also stored on Replica)\\n   * @param _signature signature of watcher on (domain, replica address, updater address)\\n   */\\n  function unenrollReplica(\\n    uint32 _domain,\\n    bytes32 _updater,\\n    bytes memory _signature\\n  ) external {\\n    // ensure that the replica is currently set\\n    address _replica = domainToReplica[_domain];\\n    require(_replica != address(0), \\\"!replica exists\\\");\\n    // ensure that the signature is on the proper updater\\n    require(Replica(_replica).updater() == TypeCasts.bytes32ToAddress(_updater), \\\"!current updater\\\");\\n    // get the watcher address from the signature\\n    // and ensure that the watcher has permission to un-enroll this replica\\n    address _watcher = _recoverWatcherFromSig(_domain, TypeCasts.addressToBytes32(_replica), _updater, _signature);\\n    require(watcherPermissions[_watcher][_domain], \\\"!valid watcher\\\");\\n    // remove the replica from mappings\\n    _unenrollReplica(_replica);\\n  }\\n\\n  /**\\n   * @notice Set the address of the local Home contract\\n   * @param _home the address of the local Home contract\\n   */\\n  function setHome(address _home) external onlyOwner {\\n    home = Home(_home);\\n  }\\n\\n  /**\\n   * @notice Allow Owner to enroll Replica contract\\n   * @param _replica the address of the Replica\\n   * @param _domain the remote domain of the Home contract for the Replica\\n   */\\n  function ownerEnrollReplica(address _replica, uint32 _domain) external onlyOwner {\\n    // un-enroll any existing replica\\n    _unenrollReplica(_replica);\\n    // add replica and domain to two-way mapping\\n    replicaToDomain[_replica] = _domain;\\n    domainToReplica[_domain] = _replica;\\n    emit ReplicaEnrolled(_domain, _replica);\\n  }\\n\\n  /**\\n   * @notice Allow Owner to un-enroll Replica contract\\n   * @param _replica the address of the Replica\\n   */\\n  function ownerUnenrollReplica(address _replica) external onlyOwner {\\n    _unenrollReplica(_replica);\\n  }\\n\\n  /**\\n   * @notice Allow Owner to set Watcher permissions for a Replica\\n   * @param _watcher the address of the Watcher\\n   * @param _domain the remote domain of the Home contract for the Replica\\n   * @param _access TRUE to give the Watcher permissions, FALSE to remove permissions\\n   */\\n  function setWatcherPermission(\\n    address _watcher,\\n    uint32 _domain,\\n    bool _access\\n  ) external onlyOwner {\\n    watcherPermissions[_watcher][_domain] = _access;\\n    emit WatcherPermissionSet(_domain, _watcher, _access);\\n  }\\n\\n  /**\\n   * @notice Query local domain from Home\\n   * @return local domain\\n   */\\n  function localDomain() external view returns (uint32) {\\n    return home.localDomain();\\n  }\\n\\n  /**\\n   * @notice Get access permissions for the watcher on the domain\\n   * @param _watcher the address of the watcher\\n   * @param _domain the domain to check for watcher permissions\\n   * @return TRUE iff _watcher has permission to un-enroll replicas on _domain\\n   */\\n  function watcherPermission(address _watcher, uint32 _domain) external view returns (bool) {\\n    return watcherPermissions[_watcher][_domain];\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Check whether _replica is enrolled\\n   * @param _replica the replica to check for enrollment\\n   * @return TRUE iff _replica is enrolled\\n   */\\n  function isReplica(address _replica) public view returns (bool) {\\n    return replicaToDomain[_replica] != 0;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Remove the replica from the two-way mappings\\n   * @param _replica replica to un-enroll\\n   */\\n  function _unenrollReplica(address _replica) internal {\\n    uint32 _currentDomain = replicaToDomain[_replica];\\n    domainToReplica[_currentDomain] = address(0);\\n    replicaToDomain[_replica] = 0;\\n    emit ReplicaUnenrolled(_currentDomain, _replica);\\n  }\\n\\n  /**\\n   * @notice Get the Watcher address from the provided signature\\n   * @return address of watcher that signed\\n   */\\n  function _recoverWatcherFromSig(\\n    uint32 _domain,\\n    bytes32 _replica,\\n    bytes32 _updater,\\n    bytes memory _signature\\n  ) internal view returns (address) {\\n    bytes32 _homeDomainHash = Replica(TypeCasts.bytes32ToAddress(_replica)).homeDomainHash();\\n    bytes32 _digest = keccak256(abi.encodePacked(_homeDomainHash, _domain, _updater));\\n    _digest = ECDSA.toEthSignedMessageHash(_digest);\\n    return ECDSA.recover(_digest, _signature);\\n  }\\n}\\n\",\"keccak256\":\"0x2d7cabe7a136d706de3a32b93f73f03a34d47bf7d3ddac61c64a928685e822c8\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1b61d18d09fe4a2aeda10ca965375a2ea376d9f5ed3e7e868678e674056df447\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/interfaces/IUpdaterManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IUpdaterManager {\\n  function slashUpdater(address payable _reporter) external;\\n\\n  function updater() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb822d426d29a262616a6f2405f7a3b4d01bb2216a9d13fc478a165998bb08e1e\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\n\\n/**\\n * @title MerkleLib\\n * @author Illusory Systems Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n  uint256 internal constant TREE_DEPTH = 32;\\n  uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n  /**\\n   * @notice Struct representing incremental merkle tree. Contains current\\n   * branch and the number of inserted leaves in the tree.\\n   **/\\n  struct Tree {\\n    bytes32[TREE_DEPTH] branch;\\n    uint256 count;\\n  }\\n\\n  /**\\n   * @notice Inserts `_node` into merkle tree\\n   * @dev Reverts if tree is full\\n   * @param _node Element to insert into tree\\n   **/\\n  function insert(Tree storage _tree, bytes32 _node) internal {\\n    require(_tree.count < MAX_LEAVES, \\\"merkle tree full\\\");\\n\\n    _tree.count += 1;\\n    uint256 size = _tree.count;\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      if ((size & 1) == 1) {\\n        _tree.branch[i] = _node;\\n        return;\\n      }\\n      _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\n      size /= 2;\\n    }\\n    // As the loop should always end prematurely with the `return` statement,\\n    // this code should be unreachable. We assert `false` just to be safe.\\n    assert(false);\\n  }\\n\\n  /**\\n   * @notice Calculates and returns`_tree`'s current root given array of zero\\n   * hashes\\n   * @param _zeroes Array of zero hashes\\n   * @return _current Calculated root of `_tree`\\n   **/\\n  function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\n    internal\\n    view\\n    returns (bytes32 _current)\\n  {\\n    uint256 _index = _tree.count;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _tree.branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculates and returns`_tree`'s current root\\n  function root(Tree storage _tree) internal view returns (bytes32) {\\n    return rootWithCtx(_tree, zeroHashes());\\n  }\\n\\n  /// @notice Returns array of TREE_DEPTH zero hashes\\n  /// @return _zeroes Array of TREE_DEPTH zero hashes\\n  function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\\n    _zeroes[0] = Z_0;\\n    _zeroes[1] = Z_1;\\n    _zeroes[2] = Z_2;\\n    _zeroes[3] = Z_3;\\n    _zeroes[4] = Z_4;\\n    _zeroes[5] = Z_5;\\n    _zeroes[6] = Z_6;\\n    _zeroes[7] = Z_7;\\n    _zeroes[8] = Z_8;\\n    _zeroes[9] = Z_9;\\n    _zeroes[10] = Z_10;\\n    _zeroes[11] = Z_11;\\n    _zeroes[12] = Z_12;\\n    _zeroes[13] = Z_13;\\n    _zeroes[14] = Z_14;\\n    _zeroes[15] = Z_15;\\n    _zeroes[16] = Z_16;\\n    _zeroes[17] = Z_17;\\n    _zeroes[18] = Z_18;\\n    _zeroes[19] = Z_19;\\n    _zeroes[20] = Z_20;\\n    _zeroes[21] = Z_21;\\n    _zeroes[22] = Z_22;\\n    _zeroes[23] = Z_23;\\n    _zeroes[24] = Z_24;\\n    _zeroes[25] = Z_25;\\n    _zeroes[26] = Z_26;\\n    _zeroes[27] = Z_27;\\n    _zeroes[28] = Z_28;\\n    _zeroes[29] = Z_29;\\n    _zeroes[30] = Z_30;\\n    _zeroes[31] = Z_31;\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the merkle root for the given leaf\\n   * `_item`, a merkle branch, and the index of `_item` in the tree.\\n   * @param _item Merkle leaf\\n   * @param _branch Merkle proof\\n   * @param _index Index of `_item` in tree\\n   * @return _current Calculated merkle root\\n   **/\\n  function branchRoot(\\n    bytes32 _item,\\n    bytes32[TREE_DEPTH] memory _branch,\\n    uint256 _index\\n  ) internal pure returns (bytes32 _current) {\\n    _current = _item;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _next));\\n      }\\n    }\\n  }\\n\\n  // keccak256 zero hashes\\n  bytes32 internal constant Z_0 = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n  bytes32 internal constant Z_1 = hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n  bytes32 internal constant Z_2 = hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n  bytes32 internal constant Z_3 = hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n  bytes32 internal constant Z_4 = hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n  bytes32 internal constant Z_5 = hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n  bytes32 internal constant Z_6 = hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n  bytes32 internal constant Z_7 = hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n  bytes32 internal constant Z_8 = hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n  bytes32 internal constant Z_9 = hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n  bytes32 internal constant Z_10 = hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n  bytes32 internal constant Z_11 = hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n  bytes32 internal constant Z_12 = hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n  bytes32 internal constant Z_13 = hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n  bytes32 internal constant Z_14 = hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n  bytes32 internal constant Z_15 = hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n  bytes32 internal constant Z_16 = hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n  bytes32 internal constant Z_17 = hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n  bytes32 internal constant Z_18 = hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n  bytes32 internal constant Z_19 = hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n  bytes32 internal constant Z_20 = hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n  bytes32 internal constant Z_21 = hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n  bytes32 internal constant Z_22 = hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n  bytes32 internal constant Z_23 = hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n  bytes32 internal constant Z_24 = hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n  bytes32 internal constant Z_25 = hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n  bytes32 internal constant Z_26 = hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n  bytes32 internal constant Z_27 = hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n  bytes32 internal constant Z_28 = hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n  bytes32 internal constant Z_29 = hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n  bytes32 internal constant Z_30 = hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n  bytes32 internal constant Z_31 = hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n}\\n\",\"keccak256\":\"0x6930854c41562abb58038f736a23324454364e8ff394d86a2d807500d77ee296\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\n\\nimport \\\"./TypedMemView.sol\\\";\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @author Illusory Systems Inc.\\n * @notice Library for formatted messages used by Home and Replica.\\n **/\\nlibrary Message {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // Number of bytes in formatted message before `body` field\\n  uint256 internal constant PREFIX_LENGTH = 76;\\n\\n  /**\\n   * @notice Returns formatted (packed) message with provided fields\\n   * @param _originDomain Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes of message body\\n   * @return Formatted message\\n   **/\\n  function formatMessage(\\n    uint32 _originDomain,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destinationDomain,\\n    bytes32 _recipient,\\n    bytes memory _messageBody\\n  ) internal pure returns (bytes memory) {\\n    return abi.encodePacked(_originDomain, _sender, _nonce, _destinationDomain, _recipient, _messageBody);\\n  }\\n\\n  /**\\n   * @notice Returns leaf of formatted message with provided fields.\\n   * @param _origin Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce number\\n   * @param _destination Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _body Raw bytes of message body\\n   * @return Leaf (hash) of formatted message\\n   **/\\n  function messageHash(\\n    uint32 _origin,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bytes memory _body\\n  ) internal pure returns (bytes32) {\\n    return keccak256(formatMessage(_origin, _sender, _nonce, _destination, _recipient, _body));\\n  }\\n\\n  /// @notice Returns message's origin field\\n  function origin(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(0, 4));\\n  }\\n\\n  /// @notice Returns message's sender field\\n  function sender(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(4, 32);\\n  }\\n\\n  /// @notice Returns message's nonce field\\n  function nonce(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(36, 4));\\n  }\\n\\n  /// @notice Returns message's destination field\\n  function destination(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(40, 4));\\n  }\\n\\n  /// @notice Returns message's recipient field as bytes32\\n  function recipient(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(44, 32);\\n  }\\n\\n  /// @notice Returns message's recipient field as an address\\n  function recipientAddress(bytes29 _message) internal pure returns (address) {\\n    return TypeCasts.bytes32ToAddress(recipient(_message));\\n  }\\n\\n  /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\n  function body(bytes29 _message) internal pure returns (bytes29) {\\n    return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\n  }\\n\\n  function leaf(bytes29 _message) internal view returns (bytes32) {\\n    return\\n      messageHash(\\n        origin(_message),\\n        sender(_message),\\n        nonce(_message),\\n        destination(_message),\\n        recipient(_message),\\n        TypedMemView.clone(body(_message))\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x3590b97ecefc801807a68f7aa6cb15c27d5bf825a677ffbe70df0bf255d4c86b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title QueueLib\\n * @author Illusory Systems Inc.\\n * @notice Library containing queue struct and operations for queue used by\\n * Home and Replica.\\n **/\\nlibrary QueueLib {\\n  /**\\n   * @notice Queue struct\\n   * @dev Internally keeps track of the `first` and `last` elements through\\n   * indices and a mapping of indices to enqueued elements.\\n   **/\\n  struct Queue {\\n    uint128 first;\\n    uint128 last;\\n    mapping(uint256 => bytes32) queue;\\n  }\\n\\n  /**\\n   * @notice Initializes the queue\\n   * @dev Empty state denoted by _q.first > q._last. Queue initialized\\n   * with _q.first = 1 and _q.last = 0.\\n   **/\\n  function initialize(Queue storage _q) internal {\\n    if (_q.first == 0) {\\n      _q.first = 1;\\n    }\\n  }\\n\\n  /**\\n   * @notice Enqueues a single new element\\n   * @param _item New element to be enqueued\\n   * @return _last Index of newly enqueued element\\n   **/\\n  function enqueue(Queue storage _q, bytes32 _item) internal returns (uint128 _last) {\\n    _last = _q.last + 1;\\n    _q.last = _last;\\n    if (_item != bytes32(0)) {\\n      // saves gas if we're queueing 0\\n      _q.queue[_last] = _item;\\n    }\\n  }\\n\\n  /**\\n   * @notice Dequeues element at front of queue\\n   * @dev Removes dequeued element from storage\\n   * @return _item Dequeued element\\n   **/\\n  function dequeue(Queue storage _q) internal returns (bytes32 _item) {\\n    uint128 _last = _q.last;\\n    uint128 _first = _q.first;\\n    require(_length(_last, _first) != 0, \\\"Empty\\\");\\n    _item = _q.queue[_first];\\n    if (_item != bytes32(0)) {\\n      // saves gas if we're dequeuing 0\\n      delete _q.queue[_first];\\n    }\\n    _q.first = _first + 1;\\n  }\\n\\n  /**\\n   * @notice Batch enqueues several elements\\n   * @param _items Array of elements to be enqueued\\n   * @return _last Index of last enqueued element\\n   **/\\n  function enqueue(Queue storage _q, bytes32[] memory _items) internal returns (uint128 _last) {\\n    _last = _q.last;\\n    for (uint256 i = 0; i < _items.length; i += 1) {\\n      _last += 1;\\n      bytes32 _item = _items[i];\\n      if (_item != bytes32(0)) {\\n        _q.queue[_last] = _item;\\n      }\\n    }\\n    _q.last = _last;\\n  }\\n\\n  /**\\n   * @notice Batch dequeues `_number` elements\\n   * @dev Reverts if `_number` > queue length\\n   * @param _number Number of elements to dequeue\\n   * @return Array of dequeued elements\\n   **/\\n  function dequeue(Queue storage _q, uint256 _number) internal returns (bytes32[] memory) {\\n    uint128 _last = _q.last;\\n    uint128 _first = _q.first;\\n    // Cannot underflow unless state is corrupted\\n    require(_length(_last, _first) >= _number, \\\"Insufficient\\\");\\n\\n    bytes32[] memory _items = new bytes32[](_number);\\n\\n    for (uint256 i = 0; i < _number; i++) {\\n      _items[i] = _q.queue[_first];\\n      delete _q.queue[_first];\\n      _first++;\\n    }\\n    _q.first = _first;\\n    return _items;\\n  }\\n\\n  /**\\n   * @notice Returns true if `_item` is in the queue and false if otherwise\\n   * @dev Linearly scans from _q.first to _q.last looking for `_item`\\n   * @param _item Item being searched for in queue\\n   * @return True if `_item` currently exists in queue, false if otherwise\\n   **/\\n  function contains(Queue storage _q, bytes32 _item) internal view returns (bool) {\\n    for (uint256 i = _q.first; i <= _q.last; i++) {\\n      if (_q.queue[i] == _item) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /// @notice Returns last item in queue\\n  /// @dev Returns bytes32(0) if queue empty\\n  function lastItem(Queue storage _q) internal view returns (bytes32) {\\n    return _q.queue[_q.last];\\n  }\\n\\n  /// @notice Returns element at front of queue without removing element\\n  /// @dev Reverts if queue is empty\\n  function peek(Queue storage _q) internal view returns (bytes32 _item) {\\n    require(!isEmpty(_q), \\\"Empty\\\");\\n    _item = _q.queue[_q.first];\\n  }\\n\\n  /// @notice Returns true if queue is empty and false if otherwise\\n  function isEmpty(Queue storage _q) internal view returns (bool) {\\n    return _q.last < _q.first;\\n  }\\n\\n  /// @notice Returns number of elements in queue\\n  function length(Queue storage _q) internal view returns (uint256) {\\n    uint128 _last = _q.last;\\n    uint128 _first = _q.first;\\n    // Cannot underflow unless state is corrupted\\n    return _length(_last, _first);\\n  }\\n\\n  /// @notice Returns number of elements between `_last` and `_first` (used internally)\\n  function _length(uint128 _last, uint128 _first) internal pure returns (uint256) {\\n    return uint256(_last + 1 - _first);\\n  }\\n}\\n\",\"keccak256\":\"0xf5bddefb821a87796831d4086cdef8f7c0fd23fab0398caa0b74fb8ab6a6e28b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\nimport \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\\n    _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n  }\\n\\n  // treat it as a null-terminated string of max 32 bytes\\n  function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\\n    uint8 _slen = 0;\\n    while (_slen < 32 && _buf[_slen] != 0) {\\n      _slen++;\\n    }\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _newStr := mload(0x40)\\n      mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n      mstore(_newStr, _slen)\\n      mstore(add(_newStr, 0x20), _buf)\\n    }\\n  }\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x101289ff51094ca377befea24799db5eacfc457d5607cd9aa0ebdd4fdcf32d3f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.11;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint8 constant TWELVE_BYTES = 96;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint8 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint8 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 32) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the sha2 digest of the underlying memory.\\n   * @dev             We explicitly deallocate memory afterwards.\\n   * @param memView   The view\\n   * @return          digest - The sha2 hash of the underlying memory\\n   */\\n  function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n   * @param memView   The pre-image\\n   * @return          digest - the Digest\\n   */\\n  function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n      pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n      digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash256 (double sha2)\\n   * @param memView   A view of the preimage\\n   * @return          digest - the Digest\\n   */\\n  function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n    }\\n\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The sha256 digest\\n   */\\n  function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return sha2(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa1169b30c3351a66a434d68adbe824f1142adedcf679c0974c1a304af52aa0f5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {XAppConnectionClient} from \\\"./XAppConnectionClient.sol\\\";\\n// ============ External Imports ============\\nimport {IMessageRecipient} from \\\"../../nomad-core/interfaces/IMessageRecipient.sol\\\";\\n\\nabstract contract Router is XAppConnectionClient, IMessageRecipient {\\n  // ============ Mutable Storage ============\\n\\n  mapping(uint32 => bytes32) public remotes;\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from a remote Router contract\\n   * @param _origin The domain the message is coming from\\n   * @param _router The address the message is coming from\\n   */\\n  modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\\n    require(_isRemoteRouter(_origin, _router), \\\"!remote router\\\");\\n    _;\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Register the address of a Router contract for the same xApp on a remote chain\\n   * @param _domain The domain of the remote xApp Router\\n   * @param _router The address of the remote xApp Router\\n   */\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwner {\\n    remotes[_domain] = _router;\\n  }\\n\\n  // ============ Virtual functions ============\\n\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external virtual override;\\n\\n  // ============ Internal functions ============\\n  /**\\n   * @notice Return true if the given domain / router is the address of a remote xApp Router\\n   * @param _domain The domain of the potential remote xApp Router\\n   * @param _router The address of the potential remote xApp Router\\n   */\\n  function _isRemoteRouter(uint32 _domain, bytes32 _router) internal view returns (bool) {\\n    return remotes[_domain] == _router;\\n  }\\n\\n  /**\\n   * @notice Assert that the given domain has a xApp Router registered and return its address\\n   * @param _domain The domain of the chain for which to get the xApp Router\\n   * @return _remote The address of the remote xApp Router on _domain\\n   */\\n  function _mustHaveRemote(uint32 _domain) internal view returns (bytes32 _remote) {\\n    _remote = remotes[_domain];\\n    require(_remote != bytes32(0), \\\"!remote\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x75de92357895aae04d168dd86d8a160838534e5b62d80441c85090a711ef42b8\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/XAppConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ External Imports ============\\n// import {Home} from \\\"../../../../nomad-core-sol/contracts/Home.sol\\\";\\nimport {Home} from \\\"../../nomad-core/contracts/Home.sol\\\";\\nimport {XAppConnectionManager} from \\\"../../nomad-core/contracts/XAppConnectionManager.sol\\\";\\n\\n// TODO: refactor proposed ownable to be one basic + one router/asset\\nimport {ProposedOwnableUpgradeable} from \\\"../../ProposedOwnableUpgradeable.sol\\\";\\n\\nabstract contract XAppConnectionClient is ProposedOwnableUpgradeable {\\n  // ============ Mutable Storage ============\\n\\n  XAppConnectionManager public xAppConnectionManager;\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from an Nomad Replica contract\\n   */\\n  modifier onlyReplica() {\\n    require(_isReplica(msg.sender), \\\"!replica\\\");\\n    _;\\n  }\\n\\n  // ======== Initializer =========\\n\\n  function __XAppConnectionClient_initialize(address _xAppConnectionManager) internal initializer {\\n    xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\n    __ProposedOwnable_init();\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Modify the contract the xApp uses to validate Replica contracts\\n   * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\n   */\\n  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwner {\\n    xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @notice Get the local Home contract from the xAppConnectionManager\\n   * @return The local Home contract\\n   */\\n  function _home() internal view returns (Home) {\\n    return xAppConnectionManager.home();\\n  }\\n\\n  /**\\n   * @notice Determine whether _potentialReplcia is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function _isReplica(address _potentialReplica) internal view returns (bool) {\\n    return xAppConnectionManager.isReplica(_potentialReplica);\\n  }\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function _localDomain() internal view virtual returns (uint32) {\\n    return xAppConnectionManager.localDomain();\\n  }\\n}\\n\",\"keccak256\":\"0x9970f38ade398ae09e1bfc09119865003a0a62fb0bd553f93dde0f8ce04f55c2\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/connext/ConnextHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.11;\\n\\n// ============ Imports ============\\n// TODO: import from nomad, summa packages\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\nimport {Home} from \\\"../../../nomad-core/contracts/Home.sol\\\";\\nimport {RelayerFeeRouter} from \\\"../../../nomad-xapps/contracts/relayer-fee-router/RelayerFeeRouter.sol\\\";\\nimport {Router} from \\\"../Router.sol\\\";\\n\\nimport {ConnextMessage} from \\\"./ConnextMessage.sol\\\";\\n\\nimport {ConnextLogic} from \\\"../../../lib/Connext/ConnextLogic.sol\\\";\\n\\nimport {ITokenRegistry} from \\\"../../interfaces/bridge/ITokenRegistry.sol\\\";\\nimport {IWrapped} from \\\"../../../interfaces/IWrapped.sol\\\";\\nimport {IConnextHandler} from \\\"../../../interfaces/IConnextHandler.sol\\\";\\nimport {IExecutor} from \\\"../../../interfaces/IExecutor.sol\\\";\\nimport {IStableSwap} from \\\"../../../interfaces/IStableSwap.sol\\\";\\n\\nimport {Executor} from \\\"../../../interpreters/Executor.sol\\\";\\nimport {RouterPermissionsManager} from \\\"../../../RouterPermissionsManager.sol\\\";\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title ConnextHandler\\n * @author Connext Labs\\n * @notice Contains logic to facilitate bridging via nomad, including the provision of\\n * fast liquidity\\n * @dev This contract primarily contains the storage used by the functions within the\\n * `ConnextLogic` contract, which contains the meaningful logic\\n */\\ncontract ConnextHandler is\\n  Initializable,\\n  ReentrancyGuardUpgradeable,\\n  Router,\\n  RouterPermissionsManager,\\n  IConnextHandler\\n{\\n  // ============ Libraries ============\\n\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  // ============ Constants ============\\n\\n  // TODO: enable setting these constants via admin fn\\n  uint256 public LIQUIDITY_FEE_NUMERATOR;\\n  uint256 public LIQUIDITY_FEE_DENOMINATOR;\\n\\n  /**\\n   * @notice Contains hash of empty bytes\\n   */\\n  bytes32 internal EMPTY;\\n\\n  // ============ Private storage ============\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n\\n  // ============ Public storage ============\\n\\n  /**\\n   * @notice The local nomad relayer fee router\\n   */\\n  RelayerFeeRouter public relayerFeeRouter;\\n\\n  /**\\n   * @notice The address of the wrapper for the native asset on this domain\\n   * @dev Needed because the nomad only handles ERC20 assets\\n   */\\n  IWrapped public wrapper;\\n\\n  /**\\n   * @notice Nonce for the contract, used to keep unique transfer ids.\\n   * @dev Assigned at first interaction (xcall on origin domain);\\n   */\\n  uint256 public nonce;\\n\\n  /**\\n   * @notice The external contract that will execute crosschain calldata\\n   */\\n  IExecutor public executor;\\n\\n  /**\\n   * @notice The domain this contract exists on\\n   * @dev Must match the nomad domain, which is distinct from the \\\"chainId\\\"\\n   */\\n  uint256 public domain;\\n\\n  /**\\n   * @notice The local nomad token registry\\n   */\\n  ITokenRegistry public tokenRegistry;\\n\\n  /**\\n   * @notice Mapping holding the AMMs for swapping in and out of local assets\\n   * @dev Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)\\n   */\\n  mapping(bytes32 => IStableSwap) public adoptedToLocalPools;\\n\\n  /**\\n   * @notice Mapping of whitelisted assets on same domain as contract\\n   * @dev Mapping is keyed on the canonical token identifier matching what is stored in the token\\n   * registry\\n   */\\n  mapping(bytes32 => bool) public approvedAssets;\\n\\n  /**\\n   * @notice Mapping of canonical to adopted assets on this domain\\n   * @dev If the adopted asset is the native asset, the keyed address will\\n   * be the wrapped asset address\\n   */\\n  mapping(address => ConnextMessage.TokenId) public adoptedToCanonical;\\n\\n  /**\\n   * @notice Mapping of adopted to canonical on this domain\\n   * @dev If the adopted asset is the native asset, the stored address will be the\\n   * wrapped asset address\\n   */\\n  mapping(bytes32 => address) public canonicalToAdopted;\\n\\n  /**\\n   * @notice Mapping to determine if transfer is reconciled\\n   */\\n  mapping(bytes32 => bool) public reconciledTransfers;\\n\\n  /**\\n   * @notice Mapping holding router address that provided fast liquidity\\n   */\\n  mapping(bytes32 => address[]) public routedTransfers;\\n\\n  /**\\n   * @notice Mapping of router to available balance of an asset\\n   * @dev Routers should always store liquidity that they can expect to receive via the bridge on\\n   * this domain (the nomad local asset)\\n   */\\n  mapping(address => mapping(address => uint256)) public routerBalances;\\n\\n  /**\\n   * @notice Mapping of approved relayers\\n   * @dev Send relayer fee if msg.sender is approvedRelayer. otherwise revert()\\n   */\\n  mapping(address => bool) public approvedRelayers;\\n\\n  /**\\n   * @notice Stores the relayer fee for a transfer. Updated on origin domain when a user calls xcall or bump\\n   * @dev This will track all of the relayer fees assigned to a transfer by id, including any bumps made by the relayer\\n   */\\n  mapping(bytes32 => uint256) public relayerFees;\\n\\n  /**\\n   * @notice Stores the relayer of a transfer. Updated on the destination domain when a relayer calls execute\\n   * for transfer\\n   * @dev When relayer claims, must check that the msg.sender has forwarded transfer\\n   */\\n  mapping(bytes32 => address) public transferRelayer;\\n\\n  /**\\n   * @notice The max amount of routers a payment can be routed through\\n   */\\n  uint256 public maxRoutersPerTransfer;\\n\\n  // ============ Errors ============\\n\\n  error ConnextHandler__addLiquidityForRouter_routerEmpty();\\n  error ConnextHandler__addLiquidityForRouter_amountIsZero();\\n  error ConnextHandler__addLiquidityForRouter_badRouter();\\n  error ConnextHandler__addLiquidityForRouter_badAsset();\\n  error ConnextHandler__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer();\\n  error ConnextHandler__onlyRelayerFeeRouter_notRelayerFeeRouter();\\n  error ConnextHandler__bumpTransfer_valueIsZero();\\n  error ConnextHandler__execute_unapprovedRelayer();\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Restricts the caller to the local relayer fee router\\n   */\\n  modifier onlyRelayerFeeRouter() {\\n    if (msg.sender != address(relayerFeeRouter)) revert ConnextHandler__onlyRelayerFeeRouter_notRelayerFeeRouter();\\n    _;\\n  }\\n\\n  // ========== Initializer ============\\n\\n  function initialize(\\n    uint256 _domain,\\n    address _xAppConnectionManager,\\n    address _tokenRegistry, // Nomad token registry\\n    address _wrappedNative,\\n    address _relayerFeeRouter\\n  ) public override initializer {\\n    __XAppConnectionClient_initialize(_xAppConnectionManager);\\n    __ReentrancyGuard_init();\\n    __RouterPermissionsManager_init();\\n\\n    nonce = 0;\\n    domain = _domain;\\n    relayerFeeRouter = RelayerFeeRouter(_relayerFeeRouter);\\n    executor = new Executor(address(this));\\n    tokenRegistry = ITokenRegistry(_tokenRegistry);\\n    wrapper = IWrapped(_wrappedNative);\\n    EMPTY = hex\\\"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\\\";\\n    LIQUIDITY_FEE_NUMERATOR = 9995;\\n    LIQUIDITY_FEE_DENOMINATOR = 10000;\\n    maxRoutersPerTransfer = 5;\\n  }\\n\\n  // ============ Owner Functions ============\\n\\n  /**\\n   * @notice Used to set router initial properties\\n   * @param _router Router address to setup\\n   * @param _owner Initial Owner of router\\n   * @param _recipient Initial Recipient of router\\n   */\\n  function setupRouter(\\n    address _router,\\n    address _owner,\\n    address _recipient\\n  ) external onlyOwner {\\n    _setupRouter(_router, _owner, _recipient);\\n  }\\n\\n  /**\\n   * @notice Used to remove routers that can transact crosschain\\n   * @param _router Router address to remove\\n   */\\n  function removeRouter(address _router) external override onlyOwner {\\n    _removeRouter(_router);\\n  }\\n\\n  /**\\n   * @notice Adds a stable swap pool for the local <> adopted asset.\\n   */\\n  function addStableSwapPool(ConnextMessage.TokenId calldata _canonical, address _stableSwapPool)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    ConnextLogic.addStableSwapPool(_canonical, _stableSwapPool, adoptedToLocalPools);\\n  }\\n\\n  /**\\n   * @notice Used to add supported assets. This is an admin only function\\n   * @dev When whitelisting the canonical asset, all representational assets would be\\n   * whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC\\n   * on polygon), you should *not* whitelist the adopted asset. The stable swap pool\\n   * address used should allow you to swap between the local <> adopted asset\\n   * @param _canonical - The canonical asset to add by id and domain. All representations\\n   * will be whitelisted as well\\n   * @param _adoptedAssetId - The used asset id for this domain (i.e. PoS USDC for\\n   * polygon)\\n   */\\n  function setupAsset(\\n    ConnextMessage.TokenId calldata _canonical,\\n    address _adoptedAssetId,\\n    address _stableSwapPool\\n  ) external override onlyOwner {\\n    // Add the asset\\n    ConnextLogic.addAssetId(\\n      _canonical,\\n      _adoptedAssetId,\\n      address(wrapper),\\n      approvedAssets,\\n      adoptedToCanonical,\\n      canonicalToAdopted\\n    );\\n\\n    // Add the swap pool\\n    ConnextLogic.addStableSwapPool(_canonical, _stableSwapPool, adoptedToLocalPools);\\n  }\\n\\n  /**\\n   * @notice Used to remove assets from the whitelist\\n   * @param _canonicalId - Token id to remove\\n   * @param _adoptedAssetId - Corresponding adopted asset to remove\\n   */\\n  function removeAssetId(bytes32 _canonicalId, address _adoptedAssetId) external override onlyOwner {\\n    ConnextLogic.removeAssetId(\\n      _canonicalId,\\n      _adoptedAssetId,\\n      address(wrapper),\\n      approvedAssets,\\n      adoptedToLocalPools,\\n      adoptedToCanonical\\n    );\\n  }\\n\\n  /**\\n   * @notice Used to add approved relayer\\n   * @param _relayer - The relayer address to add\\n   */\\n  function addRelayer(address _relayer) external override onlyOwner {\\n    ConnextLogic.addRelayer(_relayer, approvedRelayers);\\n  }\\n\\n  /**\\n   * @notice Used to remove approved relayer\\n   * @param _relayer - The relayer address to remove\\n   */\\n  function removeRelayer(address _relayer) external override onlyOwner {\\n    ConnextLogic.removeRelayer(_relayer, approvedRelayers);\\n  }\\n\\n  /**\\n   * @notice Used to set the max amount of routers a payment can be routed through\\n   * @param _newMaxRouters The new max amount of routers\\n   */\\n  function setMaxRoutersPerTransfer(uint256 _newMaxRouters) external override onlyOwner {\\n    ConnextLogic.setMaxRoutersPerTransfer(_newMaxRouters, maxRoutersPerTransfer);\\n\\n    maxRoutersPerTransfer = _newMaxRouters;\\n  }\\n\\n  // ============ External functions ============\\n\\n  receive() external payable {}\\n\\n  /**\\n   * @notice This is used by anyone to increase a router's available liquidity for a given asset.\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\n   * @param _amount - The amount of liquidity to add for the router\\n   * @param _local - The address of the asset you're adding liquidity for. If adding liquidity of the\\n   * native asset, routers may use `address(0)` or the wrapped asset\\n   * @param _router The router you are adding liquidity on behalf of\\n   */\\n  function addLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable override nonReentrant {\\n    _addLiquidityForRouter(_amount, _local, _router);\\n  }\\n\\n  /**\\n   * @notice This is used by any router to increase their available liquidity for a given asset.\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\n   * @param _amount - The amount of liquidity to add for the router\\n   * @param _local - The address of the asset you're adding liquidity for. If adding liquidity of the\\n   * native asset, routers may use `address(0)` or the wrapped asset\\n   */\\n  function addLiquidity(uint256 _amount, address _local) external payable override nonReentrant {\\n    _addLiquidityForRouter(_amount, _local, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This is used by any router to decrease their available liquidity for a given asset.\\n   * @param _amount - The amount of liquidity to remove for the router\\n   * @param _local - The address of the asset you're removing liquidity from. If removing liquidity of the\\n   * native asset, routers may use `address(0)` or the wrapped asset\\n   * @param _to The address that will receive the liquidity being removed\\n   */\\n  function removeLiquidity(\\n    uint256 _amount,\\n    address _local,\\n    address payable _to\\n  ) external override nonReentrant {\\n    // transfer to specicfied recipient IF recipient not set\\n    address recipient = getRouterRecipient(msg.sender);\\n    recipient = recipient == address(0) ? _to : recipient;\\n\\n    ConnextLogic.removeLiquidity(_amount, _local, recipient, routerBalances, wrapper);\\n  }\\n\\n  /**\\n   * @notice This function is called by a user who is looking to bridge funds\\n   * @dev This contract must have approval to transfer the adopted assets. They are then swapped to\\n   * the local nomad assets via the configured AMM and sent over the bridge router.\\n   * @param _args - The XCallArgs\\n   * @return The transfer id of the crosschain transfer\\n   */\\n  function xcall(XCallArgs calldata _args) external payable override returns (bytes32) {\\n    // get remote BridgeRouter address; revert if not found\\n    bytes32 remote = _mustHaveRemote(_args.params.destinationDomain);\\n\\n    ConnextLogic.XCallLibArgs memory libArgs = ConnextLogic.XCallLibArgs({\\n      xCallArgs: _args,\\n      wrapper: wrapper,\\n      nonce: nonce,\\n      tokenRegistry: tokenRegistry,\\n      domain: domain,\\n      home: xAppConnectionManager.home(),\\n      remote: remote\\n    });\\n\\n    (bytes32 transferId, uint256 newNonce) = ConnextLogic.xcall(\\n      libArgs,\\n      adoptedToCanonical,\\n      adoptedToLocalPools,\\n      relayerFees\\n    );\\n\\n    nonce = newNonce;\\n\\n    return transferId;\\n  }\\n\\n  /**\\n   * @notice Handles an incoming message\\n   * @dev This function relies on nomad relayers and should not consume arbitrary amounts of\\n   * gas\\n   * @param _origin The origin domain\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @param _sender The sender address\\n   * @param _message The message\\n   */\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {\\n    // handle the action\\n    ConnextLogic.reconcile(_origin, _message, reconciledTransfers, tokenRegistry, routedTransfers, routerBalances);\\n  }\\n\\n  /**\\n   * @notice Called on the destination domain to disburse correct assets to end recipient\\n   * and execute any included calldata\\n   * @dev Can be called prior to or after `handle`, depending if fast liquidity is being\\n   * used.\\n   */\\n  function execute(ExecuteArgs calldata _args) external override returns (bytes32 transferId) {\\n    // If the sender is not approved relayer, revert()\\n    if (!approvedRelayers[msg.sender]) {\\n      revert ConnextHandler__execute_unapprovedRelayer();\\n    }\\n\\n    ConnextLogic.ExecuteLibArgs memory libArgs = ConnextLogic.ExecuteLibArgs({\\n      executeArgs: _args,\\n      isRouterOwnershipRenounced: isRouterOwnershipRenounced(),\\n      maxRoutersPerTransfer: maxRoutersPerTransfer,\\n      tokenRegistry: tokenRegistry,\\n      wrapper: wrapper,\\n      executor: executor,\\n      liquidityFeeNumerator: LIQUIDITY_FEE_NUMERATOR,\\n      liquidityFeeDenominator: LIQUIDITY_FEE_DENOMINATOR\\n    });\\n\\n    return\\n      ConnextLogic.execute(\\n        libArgs,\\n        routedTransfers,\\n        reconciledTransfers,\\n        routerBalances,\\n        adoptedToLocalPools,\\n        canonicalToAdopted,\\n        routerInfo,\\n        transferRelayer\\n      );\\n  }\\n\\n  /**\\n   * @notice Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\\n   * @param _transferId - The unique identifier of the crosschain transaction\\n   */\\n  function bumpTransfer(bytes32 _transferId) external payable {\\n    ConnextLogic.bumpTransfer(_transferId, relayerFees);\\n  }\\n\\n  /**\\n   * @notice Called by relayer when they want to claim owed funds on a given domain\\n   * @dev Domain should be the origin domain of all the transfer ids\\n   * @param _recipient - address on origin chain to send claimed funds to\\n   * @param _domain - domain to claim funds on\\n   * @param _transferIds - transferIds to claim\\n   */\\n  function initiateClaim(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds\\n  ) external override {\\n    ConnextLogic.initiateClaim(_domain, _recipient, _transferIds, relayerFeeRouter, transferRelayer);\\n  }\\n\\n  /**\\n   * @notice Pays out a relayer for the given fees\\n   * @dev Called by the RelayerFeeRouter.handle message. The validity of the transferIds is\\n   * asserted before dispatching the message.\\n   * @param _recipient - address on origin chain to send claimed funds to\\n   * @param _transferIds - transferIds to claim\\n   */\\n  function claim(address _recipient, bytes32[] calldata _transferIds) external override onlyRelayerFeeRouter {\\n    ConnextLogic.claim(_recipient, _transferIds, relayerFees);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @notice Contains the logic to verify + increment a given routers liquidity\\n   * @dev The liquidity will be held in the local asset, which is the representation if you\\n   * are *not* on the canonical domain, and the canonical asset otherwise.\\n   * @param _amount - The amount of liquidity to add for the router\\n   * @param _local - The address of the nomad representation of the asset\\n   * @param _router - The router you are adding liquidity on behalf of\\n   */\\n  function _addLiquidityForRouter(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) internal {\\n    // Sanity check: router is sensible\\n    if (_router == address(0)) revert ConnextHandler__addLiquidityForRouter_routerEmpty();\\n\\n    // Sanity check: nonzero amounts\\n    if (_amount == 0) revert ConnextHandler__addLiquidityForRouter_amountIsZero();\\n\\n    // Get the canonical asset id from the representation\\n    (, bytes32 id) = tokenRegistry.getTokenId(_local == address(0) ? address(wrapper) : _local);\\n\\n    // Router is approved\\n    if (!isRouterOwnershipRenounced() && !getRouterApproval(_router))\\n      revert ConnextHandler__addLiquidityForRouter_badRouter();\\n\\n    // Asset is approved\\n    if (!isAssetOwnershipRenounced() && !approvedAssets[id]) revert ConnextHandler__addLiquidityForRouter_badAsset();\\n\\n    ConnextLogic.addLiquidityForRouter(_amount, _local, _router, routerBalances, id, wrapper);\\n  }\\n}\\n\",\"keccak256\":\"0xd42351c36e66370b269c3668d777cecdf01c313f96e9e0345585196c4402b756\",\"license\":\"UNLICENSED\"},\"contracts/nomad-xapps/contracts/connext/ConnextMessage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.11;\\n\\n// TODO: replace with nomad import\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\n\\nlibrary ConnextMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  enum Types {\\n    Invalid, // 0\\n    TokenId, // 1\\n    Message, // 2\\n    Transfer // 3\\n  }\\n\\n  // ============ Structs ============\\n\\n  // Tokens are identified by a TokenId:\\n  // domain - 4 byte chain ID of the chain from which the token originates\\n  // id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\n  struct TokenId {\\n    uint32 domain;\\n    bytes32 id;\\n  }\\n\\n  // ============ Constants ============\\n\\n  uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id\\n  uint256 private constant IDENTIFIER_LEN = 1;\\n  uint256 private constant TRANSFER_LEN = 129;\\n  // 1 byte identifier + 32 bytes recipient + 32 bytes amount + 32 bytes detailsHash + 32 bytes external hash\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Internal Functions: Validation ============\\n\\n  /**\\n   * @notice Checks that Action is valid type\\n   * @param _action The action\\n   * @return TRUE if action is valid\\n   */\\n  function isValidAction(bytes29 _action) internal pure returns (bool) {\\n    return isTransfer(_action);\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of the specified type\\n   * @param _type the type to check for\\n   * @param _action The message\\n   * @return True if the message is of the specified type\\n   */\\n  function isType(bytes29 _action, Types _type) internal pure returns (bool) {\\n    return actionType(_action) == uint8(_type) && messageType(_action) == _type;\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of type Transfer\\n   * @param _action The message\\n   * @return True if the message is of type Transfer\\n   */\\n  function isTransfer(bytes29 _action) internal pure returns (bool) {\\n    return isType(_action, Types.Transfer);\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidMessageLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    return _len == TOKEN_ID_LEN + TRANSFER_LEN;\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type Message\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsMessage(_view).assertValid();\\n  }\\n\\n  // ============ Internal Functions: Formatting ============\\n\\n  /**\\n   * @notice Formats an action message\\n   * @param _tokenId The token ID\\n   * @param _action The action\\n   * @return The formatted message\\n   */\\n  function formatMessage(bytes29 _tokenId, bytes29 _action)\\n    internal\\n    view\\n    typeAssert(_tokenId, Types.TokenId)\\n    returns (bytes memory)\\n  {\\n    require(isValidAction(_action), \\\"!action\\\");\\n    bytes29[] memory _views = new bytes29[](2);\\n    _views[0] = _tokenId;\\n    _views[1] = _action;\\n    return TypedMemView.join(_views);\\n  }\\n\\n  /**\\n   * @notice Formats Transfer\\n   * @param _to The recipient address as bytes32\\n   * @param _amnt The transfer amount\\n   * @param _detailsHash The token details hash\\n   * @param _transferId Unique identifier for transfer\\n   * @return\\n   */\\n  function formatTransfer(\\n    bytes32 _to,\\n    uint256 _amnt,\\n    bytes32 _detailsHash,\\n    bytes32 _transferId\\n  ) internal pure returns (bytes29) {\\n    return\\n      abi.encodePacked(Types.Transfer, _to, _amnt, _detailsHash, _transferId).ref(0).castTo(uint40(Types.Transfer));\\n  }\\n\\n  /**\\n   * @notice Serializes a Token ID struct\\n   * @param _tokenId The token id struct\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(TokenId memory _tokenId) internal pure returns (bytes29) {\\n    return formatTokenId(_tokenId.domain, _tokenId.id);\\n  }\\n\\n  /**\\n   * @notice Creates a serialized Token ID from components\\n   * @param _domain The domain\\n   * @param _id The ID\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(uint32 _domain, bytes32 _id) internal pure returns (bytes29) {\\n    return abi.encodePacked(_domain, _id).ref(0).castTo(uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Formats the keccak256 hash of the token details\\n   * Token Details Format:\\n   *      length of name cast to bytes - 32 bytes\\n   *      name - x bytes (variable)\\n   *      length of symbol cast to bytes - 32 bytes\\n   *      symbol - x bytes (variable)\\n   *      decimals - 1 byte\\n   * @param _name The name\\n   * @param _symbol The symbol\\n   * @param _decimals The decimals\\n   * @return The Details message\\n   */\\n  function formatDetailsHash(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(bytes(_name).length, _name, bytes(_symbol).length, _symbol, _decimals));\\n  }\\n\\n  /**\\n   * @notice Converts to a Message\\n   * @param _message The message\\n   * @return The newly typed message\\n   */\\n  function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {\\n    if (isValidMessageLength(_message)) {\\n      return _message.castTo(uint40(Types.Message));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  // ============ Internal Functions: Parsing msg ============\\n\\n  /**\\n   * @notice Returns the type of the message\\n   * @param _view The message\\n   * @return The type of the message\\n   */\\n  function messageType(bytes29 _view) internal pure returns (Types) {\\n    return Types(uint8(_view.typeOf()));\\n  }\\n\\n  /**\\n   * @notice Retrieves the token ID from a Message\\n   * @param _message The message\\n   * @return The ID\\n   */\\n  function tokenId(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Retrieves the action data from a Message\\n   * @param _message The message\\n   * @return The action\\n   */\\n  function action(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    uint256 _actionLen = _message.len() - TOKEN_ID_LEN;\\n    uint40 _type = uint40(msgType(_message));\\n    return _message.slice(TOKEN_ID_LEN, _actionLen, _type);\\n  }\\n\\n  // ============ Internal Functions: Parsing tokenId ============\\n\\n  /**\\n   * @notice Retrieves the domain from a TokenID\\n   * @param _tokenId The message\\n   * @return The domain\\n   */\\n  function domain(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (uint32) {\\n    return uint32(_tokenId.indexUint(0, 4));\\n  }\\n\\n  /**\\n   * @notice Retrieves the ID from a TokenID\\n   * @param _tokenId The message\\n   * @return The ID\\n   */\\n  function id(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (bytes32) {\\n    // before = 4 bytes domain\\n    return _tokenId.index(4, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM ID\\n   * @param _tokenId The message\\n   * @return The EVM ID\\n   */\\n  function evmId(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (address) {\\n    // before = 4 bytes domain + 12 bytes empty to trim for address\\n    return _tokenId.indexAddress(16);\\n  }\\n\\n  // ============ Internal Functions: Parsing action ============\\n\\n  /**\\n   * @notice Retrieves the action identifier from message\\n   * @param _message The action\\n   * @return The message type\\n   */\\n  function msgType(bytes29 _message) internal pure returns (uint8) {\\n    return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the identifier from action\\n   * @param _action The action\\n   * @return The action type\\n   */\\n  function actionType(bytes29 _action) internal pure returns (uint8) {\\n    return uint8(_action.indexUint(0, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the recipient from a Transfer\\n   * @param _transferAction The message\\n   * @return The recipient address as bytes32\\n   */\\n  function recipient(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier\\n    return _transferAction.index(1, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM Recipient from a Transfer\\n   * @param _transferAction The message\\n   * @return The EVM Recipient\\n   */\\n  function evmRecipient(bytes29 _transferAction) internal pure returns (address) {\\n    // before = 1 byte identifier + 12 bytes empty to trim for address = 13 bytes\\n    return _transferAction.indexAddress(13);\\n  }\\n\\n  /**\\n   * @notice Retrieves the amount from a Transfer\\n   * @param _transferAction The message\\n   * @return The amount\\n   */\\n  function amnt(bytes29 _transferAction) internal pure returns (uint256) {\\n    // before = 1 byte identifier + 32 bytes ID = 33 bytes\\n    return _transferAction.indexUint(33, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the unique identifier from a Transfer\\n   * @param _transferAction The message\\n   * @return The amount\\n   */\\n  function transferId(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier + 32 bytes ID + 32 bytes amount + 32 bytes detailsHash = 97 bytes\\n    return _transferAction.index(97, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the detailsHash from a Transfer\\n   * @param _transferAction The message\\n   * @return The detailsHash\\n   */\\n  function detailsHash(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier + 32 bytes ID + 32 bytes amount = 65 bytes\\n    return _transferAction.index(65, 32);\\n  }\\n}\\n\",\"keccak256\":\"0x519e96666af185c7bc2a72c4ad279f98e9f88575cc1cb9bfba530dc890c8fdfe\",\"license\":\"UNLICENSED\"},\"contracts/nomad-xapps/contracts/relayer-fee-router/RelayerFeeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.11;\\n\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\n\\nlibrary RelayerFeeMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  enum Types {\\n    Invalid, // 0\\n    ClaimFees // 1\\n  }\\n\\n  // ============ Constants ============\\n\\n  // before: 1 byte identifier + 20 bytes recipient + 32 bytes length + 32 bytes 1 transfer id = 85 bytes\\n  uint256 private constant MIN_CLAIM_LEN = 85;\\n  // before: 1 byte identifier + 20 bytes recipient = 21 bytes\\n  uint256 private constant LENGTH_ID_START = 21;\\n  uint8 private constant LENGTH_ID_LEN = 32;\\n  // before: 1 byte identifier\\n  uint256 private constant RECIPIENT_START = 1;\\n  // before: 1 byte identifier + 20 bytes recipient + 32 bytes length = 53 bytes\\n  uint256 private constant TRANSFER_IDS_START = 53;\\n  uint8 private constant TRANSFER_ID_LEN = 32;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Formatters ============\\n\\n  /**\\n   * @notice Formats an claim fees message\\n   * @param _recipient The address of the relayer\\n   * @param _transferIds A group of transfers ids to claim for fee bumps\\n   * @return The formatted message\\n   */\\n  function formatClaimFees(address _recipient, bytes32[] calldata _transferIds) internal pure returns (bytes memory) {\\n    return abi.encodePacked(uint8(Types.ClaimFees), _recipient, _transferIds.length, _transferIds);\\n  }\\n\\n  // ============ Getters ============\\n\\n  /**\\n   * @notice Parse the recipient address of the fees\\n   * @param _view The message\\n   * @return The recipient address\\n   */\\n  function recipient(bytes29 _view) internal pure typeAssert(_view, Types.ClaimFees) returns (address) {\\n    // before = 1 byte identifier\\n    return _view.indexAddress(1);\\n  }\\n\\n  /**\\n   * @notice Parse The group of transfers ids to claim for fee bumps\\n   * @param _view The message\\n   * @return The group of transfers ids to claim for fee bumps\\n   */\\n  function transferIds(bytes29 _view) internal pure typeAssert(_view, Types.ClaimFees) returns (bytes32[] memory) {\\n    uint256 length = _view.indexUint(LENGTH_ID_START, LENGTH_ID_LEN);\\n\\n    bytes32[] memory ids = new bytes32[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      ids[i] = _view.index(TRANSFER_IDS_START + i * TRANSFER_ID_LEN, TRANSFER_ID_LEN);\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidClaimFeesLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    // at least 1 transfer id where the excess is multiplier of transfer id length\\n    return _len >= MIN_CLAIM_LEN && (_len - TRANSFER_IDS_START) % TRANSFER_ID_LEN == 0;\\n  }\\n\\n  /**\\n   * @notice Converts to a ClaimFees\\n   * @param _view The message\\n   * @return The newly typed message\\n   */\\n  function tryAsClaimFees(bytes29 _view) internal pure returns (bytes29) {\\n    if (isValidClaimFeesLength(_view)) {\\n      return _view.castTo(uint40(Types.ClaimFees));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type ClaimFees\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeClaimFees(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsClaimFees(_view).assertValid();\\n  }\\n}\\n\",\"keccak256\":\"0x86e96fc7a07953c8b3b66739d7de2465e19e49aa7f39d2ffe39ff8d974eaeabd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/contracts/relayer-fee-router/RelayerFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.11;\\n\\n// ============ Internal Imports ============\\nimport {IConnextHandler} from \\\"../../../interfaces/IConnextHandler.sol\\\";\\nimport {Router} from \\\"../Router.sol\\\";\\nimport {XAppConnectionClient} from \\\"../XAppConnectionClient.sol\\\";\\nimport {RelayerFeeMessage} from \\\"./RelayerFeeMessage.sol\\\";\\nimport {IBridgeToken} from \\\"../../interfaces/bridge/IBridgeToken.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Home} from \\\"../../../nomad-core/contracts/Home.sol\\\";\\nimport {Version0} from \\\"../../../nomad-core/contracts/Version0.sol\\\";\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\n\\n/**\\n * @title RelayerFeeRouter\\n */\\ncontract RelayerFeeRouter is Version0, Router {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using RelayerFeeMessage for bytes29;\\n\\n  // ========== Custom Errors ===========\\n\\n  error RelayerFeeRouter__onlyConnext_notConnext();\\n  error RelayerFeeRouter__send_claimEmpty();\\n  error RelayerFeeRouter__send_recipientEmpty();\\n\\n  // ============ Public Storage ============\\n\\n  IConnextHandler public connext;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ======== Events =========\\n\\n  /**\\n   * @notice Emitted when a fees claim has been initialized in this domain\\n   * @param domain The domain where to claim the fees\\n   * @param recipient The address of the relayer\\n   * @param transferIds A group of transaction ids to claim for fee bumps\\n   * @param remote Remote RelayerFeeRouter address\\n   * @param message The message sent to the destination domain\\n   */\\n  event Send(uint32 domain, address recipient, bytes32[] transferIds, bytes32 remote, bytes message);\\n\\n  /**\\n   * @notice Emitted when the a fees claim message has arrived to this domain\\n   * @param originAndNonce Domain where the transfer originated and the unique identifier\\n   * for the message from origin to destination, combined in a single field ((origin << 32) & nonce)\\n   * @param origin Domain where the transfer originated\\n   * @param recipient The address of the relayer\\n   * @param transferIds A group of transaction ids to claim for fee bumps\\n   */\\n  event Receive(uint64 indexed originAndNonce, uint32 indexed origin, address indexed recipient, bytes32[] transferIds);\\n\\n  /**\\n   * @notice Emitted when a new Connext address is set\\n   * @param connext The new connext address\\n   */\\n  event SetConnext(address indexed connext);\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Restricts the caller to the local bridge router\\n   */\\n  modifier onlyConnext() {\\n    if (msg.sender != address(connext)) revert RelayerFeeRouter__onlyConnext_notConnext();\\n    _;\\n  }\\n\\n  // ======== Initializer ========\\n\\n  function initialize(address _xAppConnectionManager) public initializer {\\n    __XAppConnectionClient_initialize(_xAppConnectionManager);\\n  }\\n\\n  /**\\n   * @notice Sets the Connext.\\n   * @dev Connext and relayer fee router store references to each other\\n   * @param _connext The address of the Connext implementation\\n   */\\n  function setConnext(address _connext) external onlyOwner {\\n    connext = IConnextHandler(_connext);\\n    emit SetConnext(_connext);\\n  }\\n\\n  // ======== External: Send Claim =========\\n\\n  /**\\n   * @notice Sends a request to claim the fees in the originated domain\\n   * @param _domain The domain where to claim the fees\\n   * @param _recipient The address of the relayer\\n   * @param _transferIds A group of transfer ids to claim for fee bumps\\n   */\\n  function send(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds\\n  ) external onlyConnext {\\n    if (_transferIds.length == 0) revert RelayerFeeRouter__send_claimEmpty();\\n    if (_recipient == address(0)) revert RelayerFeeRouter__send_recipientEmpty();\\n\\n    // get remote RelayerFeeRouter address; revert if not found\\n    bytes32 remote = _mustHaveRemote(_domain);\\n\\n    bytes memory message = RelayerFeeMessage.formatClaimFees(_recipient, _transferIds);\\n\\n    xAppConnectionManager.home().dispatch(_domain, remote, message);\\n\\n    // emit Send event\\n    emit Send(_domain, _recipient, _transferIds, remote, message);\\n  }\\n\\n  // ======== External: Handle =========\\n\\n  /**\\n   * @notice Handles an incoming message\\n   * @param _origin The origin domain\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @param _sender The sender address\\n   * @param _message The message\\n   */\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {\\n    // parse recipient and transferIds from message\\n    bytes29 _msg = _message.ref(0).mustBeClaimFees();\\n\\n    address recipient = _msg.recipient();\\n    bytes32[] memory transferIds = _msg.transferIds();\\n\\n    connext.claim(recipient, transferIds);\\n\\n    // emit Receive event\\n    emit Receive(_originAndNonce(_origin, _nonce), _origin, recipient, transferIds);\\n  }\\n\\n  /**\\n   * @dev explicit override for compiler inheritance\\n   * @dev explicit override for compiler inheritance\\n   * @return domain of chain on which the contract is deployed\\n   */\\n  function _localDomain() internal view override(XAppConnectionClient) returns (uint32) {\\n    return XAppConnectionClient._localDomain();\\n  }\\n\\n  /**\\n   * @notice Internal utility function that combines\\n   * `_origin` and `_nonce`.\\n   * @dev Both origin and nonce should be less than 2^32 - 1\\n   * @param _origin Domain of chain where the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @return Returns (`_origin` << 32) & `_nonce`\\n   */\\n  function _originAndNonce(uint32 _origin, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_origin) << 32) | _nonce;\\n  }\\n}\\n\",\"keccak256\":\"0xaecb43384ffc78352724647ac3df6cb6d48d16f47a12d494386f8cd76fdc4279\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/interfaces/bridge/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IBridgeToken {\\n  function initialize() external;\\n\\n  function name() external returns (string memory);\\n\\n  function balanceOf(address _account) external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function detailsHash() external view returns (bytes32);\\n\\n  function burn(address _from, uint256 _amnt) external;\\n\\n  function mint(address _to, uint256 _amnt) external;\\n\\n  function setDetailsHash(bytes32 _detailsHash) external;\\n\\n  function setDetails(\\n    string calldata _name,\\n    string calldata _symbol,\\n    uint8 _decimals\\n  ) external;\\n\\n  // inherited from ownable\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x34bebd9472b217fe32d662cf3f3c91fe7395b85b8c33d5337904a1dd78d20881\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-xapps/interfaces/bridge/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IBridgeToken} from \\\"./IBridgeToken.sol\\\";\\n\\n// ============ External Imports ============\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenRegistry {\\n  function isLocalOrigin(address _token) external view returns (bool);\\n\\n  function ensureLocalToken(uint32 _domain, bytes32 _id) external returns (address _local);\\n\\n  function mustHaveLocalToken(uint32 _domain, bytes32 _id) external view returns (IERC20);\\n\\n  function getLocalAddress(uint32 _domain, bytes32 _id) external view returns (address _local);\\n\\n  function getTokenId(address _token) external view returns (uint32, bytes32);\\n\\n  function enrollCustom(\\n    uint32 _domain,\\n    bytes32 _id,\\n    address _custom\\n  ) external;\\n\\n  function oldReprToCurrentRepr(address _oldRepr) external view returns (address _currentRepr);\\n}\\n\",\"keccak256\":\"0x383d50b1a262d95a975868f77c07b198a9d879d1c7791cb34bd81e70b46ab0a6\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614f27806100206000396000f3fe608060405260043610620004235760003560e01c80639b0989081162000227578063c6bf691d116200012f578063e070da0911620000b9578063ea7a904d1162000084578063ea7a904d1462000d11578063eb492f441462000d36578063f31abcc41462000d5b578063f40fec521462000d80578063ffaf3f1a1462000dbb57600080fd5b8063e070da091462000ca5578063e47602f71462000cbc578063e8be0dfc1462000cd4578063e9160f3e1462000cec57600080fd5b8063d1851c9211620000fa578063d1851c921462000c1a578063d232c2201462000c3a578063d7aada811462000c5b578063dd39f00d1462000c8057600080fd5b8063c6bf691d1462000b7e578063c95f9d0e1462000bbb578063ca27a83d1462000bd2578063cf9737691462000bf757600080fd5b8063bd7e1e2e11620001b1578063c26c9c0a116200017c578063c26c9c0a1462000af5578063c2fb26a61462000b2a578063c34c08e51462000b43578063c5b350df1462000b6657600080fd5b8063bd7e1e2e1462000a74578063c0c17baf1462000aaf578063c104f41a1462000ac7578063c1a049591462000ade57600080fd5b8063ac210cc711620001f2578063ac210cc714620009ee578063affed0e01462000a11578063b1f8100d1462000a2a578063b49c53a71462000a4f57600080fd5b80639b098908146200095b5780639bf6d875146200098d5780639d23c4c714620009a6578063ab2dc3f514620009c957600080fd5b8063468f6668116200032b5780636ae0b15411620002b557806383bbb806116200028057806383bbb80614620008bd5780638741eac514620008ee5780638cba8b6a14620009065780638da5cb5b146200093b57600080fd5b80636ae0b1541462000836578063715018a6146200085b5780637708a628146200087357806382904716146200089857600080fd5b80636006209111620002f657806360062091146200078357806360f0a5ac14620007e25780636a41633a14620008075780636a42b8f8146200081e57600080fd5b8063468f666814620006ec5780634b72c5da1462000711578063569d29e4146200072957806357bd0a32146200074e57600080fd5b80632c1999d011620003ad5780633b688da611620003785780633b688da614620006365780633cf52ffb146200067357806341258b5c146200068a57806341bdc8b514620006c757600080fd5b80632c1999d014620005835780633339df9614620005d75780633641e08314620005f95780633855b467146200061e57600080fd5b80631506e46311620003ee5780631506e463146200050a5780632004ef45146200052f57806322a3c00714620005475780632424401f146200056c57600080fd5b80630951d6d8146200043057806309935b8f146200045b57806312d5717014620004825780631407093b14620004bc57600080fd5b366200042b57005b600080fd5b3480156200043d57600080fd5b506200044860d55481565b6040519081526020015b60405180910390f35b3480156200046857600080fd5b50620004806200047a36600462002972565b62000de0565b005b3480156200048f57600080fd5b5062000448620004a136600462002972565b6001600160a01b0316600090815260d4602052604090205490565b348015620004c957600080fd5b50620004f9620004db36600462002972565b6001600160a01b0316600090815260d0602052604090205460ff1690565b604051901515815260200162000452565b3480156200051757600080fd5b506200048062000529366004620029ab565b62000e63565b3480156200053c57600080fd5b50620004f962000f04565b3480156200055457600080fd5b506200048062000566366004620029e8565b62000f27565b620004806200057d36600462002a1b565b62000f77565b3480156200059057600080fd5b50620005be620005a236600462002a1b565b610112602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200162000452565b348015620005e457600080fd5b50606b54620005be906001600160a01b031681565b3480156200060657600080fd5b50620004806200061836600462002a35565b62000fb8565b3480156200062b57600080fd5b506200048062001137565b3480156200064357600080fd5b50620005be6200065536600462002972565b6001600160a01b03908116600090815260d360205260409020541690565b3480156200068057600080fd5b5060355462000448565b3480156200069757600080fd5b5062000448620006a9366004620029e8565b61011560209081526000928352604080842090915290825290205481565b348015620006d457600080fd5b5062000480620006e636600462002972565b620011ea565b348015620006f957600080fd5b50620004806200070b36600462002b07565b62001238565b3480156200071e57600080fd5b506200044860d65481565b3480156200073657600080fd5b50620004806200074836600462002b73565b620012c1565b3480156200075b57600080fd5b50620004f96200076d36600462002a1b565b6101106020526000908152604090205460ff1681565b3480156200079057600080fd5b50620007c5620007a236600462002972565b610111602052600090815260409020805460019091015463ffffffff9091169082565b6040805163ffffffff909316835260208301919091520162000452565b348015620007ef57600080fd5b50620004806200080136600462002972565b620013ea565b3480156200081457600080fd5b5060395462000448565b3480156200082b57600080fd5b5062093a8062000448565b3480156200084357600080fd5b50620004806200085536600462002972565b6200145f565b3480156200086857600080fd5b506200048062001499565b3480156200088057600080fd5b50620005be6200089236600462002bc4565b6200155b565b348015620008a557600080fd5b5062000480620008b736600462002a1b565b62001595565b348015620008ca57600080fd5b5062000448620008dc36600462002be7565b609d6020526000908152604090205481565b348015620008fb57600080fd5b506200048062001641565b3480156200091357600080fd5b50620004f96200092536600462002972565b6101166020526000908152604090205460ff1681565b3480156200094857600080fd5b506033546001600160a01b0316620005be565b3480156200096857600080fd5b50620004486200097a36600462002a1b565b6101176020526000908152604090205481565b3480156200099a57600080fd5b50620004486101195481565b348015620009b357600080fd5b5061010e54620005be906001600160a01b031681565b348015620009d657600080fd5b5062000480620009e836600462002d16565b6200169c565b348015620009fb57600080fd5b5061010a54620005be906001600160a01b031681565b34801562000a1e57600080fd5b506200044861010b5481565b34801562000a3757600080fd5b506200048062000a4936600462002972565b620017cc565b34801562000a5c57600080fd5b506200048062000a6e36600462002d89565b62001878565b34801562000a8157600080fd5b50620005be62000a9336600462002a1b565b61010f602052600090815260409020546001600160a01b031681565b34801562000abc57600080fd5b5062000480620018bd565b6200044862000ad836600462002db8565b6200196e565b34801562000aeb57600080fd5b5060375462000448565b34801562000b0257600080fd5b50620004f962000b1436600462002a1b565b6101136020526000908152604090205460ff1681565b34801562000b3757600080fd5b506200044861010d5481565b34801562000b5057600080fd5b5061010c54620005be906001600160a01b031681565b34801562000b7357600080fd5b506200048062001b06565b34801562000b8b57600080fd5b50620005be62000b9d36600462002972565b6001600160a01b03908116600090815260d160205260409020541690565b6200048062000bcc36600462002df5565b62001b98565b34801562000bdf57600080fd5b506200044862000bf136600462002e1d565b62001bd8565b34801562000c0457600080fd5b5061010954620005be906001600160a01b031681565b34801562000c2757600080fd5b506034546001600160a01b0316620005be565b34801562000c4757600080fd5b506033546001600160a01b031615620004f9565b34801562000c6857600080fd5b506200048062000c7a36600462002e5a565b62001d23565b34801562000c8d57600080fd5b506200048062000c9f36600462002972565b62001d91565b6200048062000cb636600462002eb4565b62001e04565b34801562000cc957600080fd5b506200048062001e45565b34801562000ce157600080fd5b50620004f962001ea0565b34801562000cf957600080fd5b50620005be62000d0b36600462002972565b62001ec1565b34801562000d1e57600080fd5b506200048062000d3036600462002df5565b62001ed6565b34801562000d4357600080fd5b506200048062000d5536600462002ef0565b62001f6f565b34801562000d6857600080fd5b506200048062000d7a36600462002eb4565b62001fad565b34801562000d8d57600080fd5b50620005be62000d9f36600462002a1b565b610118602052600090815260409020546001600160a01b031681565b34801562000dc857600080fd5b506200048062000dda366004620029e8565b6200209f565b60cf54604051630d183f5b60e31b81526001600160a01b0383166004820152602481019190915260d0604482015273167675832BBf781A735a543AeBe956164682DCFE906368c1fad8906064015b60006040518083038186803b15801562000e4757600080fd5b505af415801562000e5c573d6000803e3d6000fd5b5050505050565b6033546001600160a01b0316331462000e8f57604051630cd5bd6f60e21b815260040160405180910390fd5b6040516301d9fdc360e61b815273801F5323d730d5b26D512b7c938F28b9A992CF969063767f70c09062000ece908590859061010f9060040162002f45565b60006040518083038186803b15801562000ee757600080fd5b505af415801562000efc573d6000803e3d6000fd5b505050505050565b6033546000906001600160a01b0316158062000f22575060365460ff165b905090565b60405163dc26fe0f60e01b81526001600160a01b0380841660048301528216602482015260d0604482015273167675832BBf781A735a543AeBe956164682DCFE9063dc26fe0f9060640162000ece565b6040516302fba8f160e51b815260048101829052610117602482015273801F5323d730d5b26D512b7c938F28b9A992CF9690635f751e209060440162000e2e565b600054610100900460ff1662000fd55760005460ff161562000fd9565b303b155b620010015760405162461bcd60e51b815260040162000ff89062002f6f565b60405180910390fd5b600054610100900460ff1615801562001024576000805461ffff19166101011790555b6200102f85620020ef565b620010396200218e565b62001043620021c2565b600061010b5561010d86905561010980546001600160a01b0319166001600160a01b03841617905560405130906200107b9062002941565b6001600160a01b039091168152602001604051809103906000f080158015620010a8573d6000803e3d6000fd5b5061010c80546001600160a01b03199081166001600160a01b039384161790915561010e8054821687841617905561010a80549091169185169190911790557fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060d75561270b60d55561271060d655600561011955801562000efc576000805461ff0019169055505050505050565b6033546001600160a01b031633146200116357604051630cd5bd6f60e21b815260040160405180910390fd5b60385460ff16156200118857604051634e3d8db760e11b815260040160405180910390fd5b603954620011a957604051631c2ed13b60e01b815260040160405180910390fd5b62093a8060395442620011bd919062002fbd565b11620011dc57604051635aeaa22f60e11b815260040160405180910390fd5b620011e86001620021f6565b565b6033546001600160a01b031633146200121657604051630cd5bd6f60e21b815260040160405180910390fd5b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6101095460405163271b322160e01b815273801F5323d730d5b26D512b7c938F28b9A992CF969163271b322191620012899188918891889188916001600160a01b031690610118906004016200301a565b60006040518083038186803b158015620012a257600080fd5b505af4158015620012b7573d6000803e3d6000fd5b5050505050505050565b6033546001600160a01b03163314620012ed57604051630cd5bd6f60e21b815260040160405180910390fd5b61010a546040516330d512f360e11b815273801F5323d730d5b26D512b7c938F28b9A992CF96916361aa25e6916200134291879187916001600160a01b0316906101109061011190610112906004016200305f565b60006040518083038186803b1580156200135b57600080fd5b505af415801562001370573d6000803e3d6000fd5b50506040516301d9fdc360e61b815273801F5323d730d5b26D512b7c938F28b9A992CF96925063767f70c09150620013b3908690859061010f9060040162002f45565b60006040518083038186803b158015620013cc57600080fd5b505af4158015620013e1573d6000803e3d6000fd5b50505050505050565b6033546001600160a01b031633146200141657604051630cd5bd6f60e21b815260040160405180910390fd5b6040516373b8255360e01b81526001600160a01b0382166004820152610116602482015273801F5323d730d5b26D512b7c938F28b9A992CF96906373b825539060440162000e2e565b6033546001600160a01b031633146200148b57604051630cd5bd6f60e21b815260040160405180910390fd5b620014968162002243565b50565b6033546001600160a01b03163314620014c557604051630cd5bd6f60e21b815260040160405180910390fd5b603554620014e657604051632a2d7bdb60e11b815260040160405180910390fd5b62093a8060355442620014fa919062002fbd565b11620015195760405163136ae5ad60e01b815260040160405180910390fd5b6034546001600160a01b03161562001544576040516301a8692360e11b815260040160405180910390fd5b603454620011e8906001600160a01b03166200228b565b61011460205281600052604060002081815481106200157957600080fd5b6000918252602090912001546001600160a01b03169150829050565b6033546001600160a01b03163314620015c157604051630cd5bd6f60e21b815260040160405180910390fd5b61011954604051633d0e0fb560e01b815273801F5323d730d5b26D512b7c938F28b9A992CF9691633d0e0fb59162001606918591600401918252602082015260400190565b60006040518083038186803b1580156200161f57600080fd5b505af415801562001634573d6000803e3d6000fd5b5050506101199190915550565b6033546001600160a01b031633146200166d57604051630cd5bd6f60e21b815260040160405180910390fd5b60385460ff1615620016925760405163382242c360e01b815260040160405180910390fd5b620011e8620022e4565b620016a73362002320565b620016e05760405162461bcd60e51b8152602060048201526008602482015267217265706c69636160c01b604482015260640162000ff8565b63ffffffff84166000908152609d60205260409020548490839081146200173b5760405162461bcd60e51b815260206004820152600e60248201526d10b932b6b7ba32903937baba32b960911b604482015260640162000ff8565b61010e546040516310007eb560e31b815273801F5323d730d5b26D512b7c938F28b9A992CF9691638003f5a89162001792918a918891610113916001600160a01b03909116906101149061011590600401620030f3565b60006040518083038186803b158015620017ab57600080fd5b505af4158015620017c0573d6000803e3d6000fd5b50505050505050505050565b6033546001600160a01b03163314620017f857604051630cd5bd6f60e21b815260040160405180910390fd5b6034546001600160a01b0382811691161480156200181e57506001600160a01b03811615155b156200183d57604051635334dcf560e01b815260040160405180910390fd5b6033546001600160a01b03828116911614156200186d576040516304d9ae9160e21b815260040160405180910390fd5b620014968162002392565b6033546001600160a01b03163314620018a457604051630cd5bd6f60e21b815260040160405180910390fd5b63ffffffff9091166000908152609d6020526040902055565b6033546001600160a01b03163314620018e957604051630cd5bd6f60e21b815260040160405180910390fd5b60365460ff16156200190e5760405163cd0cbe2b60e01b815260040160405180910390fd5b6037546200192f57604051636da7f42560e01b815260040160405180910390fd5b62093a806037544262001943919062002fbd565b11620019625760405163288a062560e21b815260040160405180910390fd5b620011e86001620023e0565b6000806200199a62001981848062003142565b6200199490608081019060600162002be7565b62002427565b905060006040518060e0016040528085620019b590620031ef565b815261010a546001600160a01b0390811660208084019190915261010b5460408085019190915261010e548316606085015261010d546080850152606b548151639fa92f9d60e01b8152915160a090950194931692639fa92f9d926004808401939192918290030181865afa15801562001a33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a59919062003264565b6001600160a01b0316815260200183815250905060008073801F5323d730d5b26D512b7c938F28b9A992CF96634772eb6d8461011161010f6101176040518563ffffffff1660e01b815260040162001ab59493929190620032d9565b6040805180830381865af415801562001ad2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001af89190620033a7565b61010b559695505050505050565b6034546001600160a01b0316331462001b32576040516340a61e4d60e01b815260040160405180910390fd5b6034546033546001600160a01b039081169116141562001b65576040516315cb454d60e21b815260040160405180910390fd5b62093a806035544262001b79919062002fbd565b11620015445760405163970af82d60e01b815260040160405180910390fd5b6002600154141562001bbe5760405162461bcd60e51b815260040162000ff890620033cc565b600260015562001bd08282336200247b565b505060018055565b336000908152610116602052604081205460ff1662001c0a57604051633412968d60e01b815260040160405180910390fd5b60006040518061010001604052808462001c249062003530565b815260200162001c3362000f04565b1515815261011954602082015261010e546001600160a01b0390811660408084019190915261010a548216606084015261010c54909116608083015260d55460a083015260d65460c090920191909152516345b049e960e01b815290915073801F5323d730d5b26D512b7c938F28b9A992CF96906345b049e99062001cd890849061011490610113906101159061010f906101129060d0906101189060040162003660565b602060405180830381865af415801562001cf6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d1c9190620037fa565b9392505050565b610109546001600160a01b0316331462001d505760405163b58c129760e01b815260040160405180910390fd5b604051631da0f25760e21b815273801F5323d730d5b26D512b7c938F28b9A992CF9690637683c95c90620013b3908690869086906101179060040162003814565b6033546001600160a01b0316331462001dbd57604051630cd5bd6f60e21b815260040160405180910390fd5b60405162968b7960e01b81526001600160a01b0382166004820152610116602482015273801F5323d730d5b26D512b7c938F28b9A992CF969062968b799060440162000e2e565b6002600154141562001e2a5760405162461bcd60e51b815260040162000ff890620033cc565b600260015562001e3c8383836200247b565b50506001805550565b6033546001600160a01b0316331462001e7157604051630cd5bd6f60e21b815260040160405180910390fd5b60365460ff161562001e965760405163b1134ca960e01b815260040160405180910390fd5b620011e862002668565b6033546000906001600160a01b0316158062000f2257505060385460ff1690565b600062001ed08260d26200269f565b92915050565b6033546001600160a01b0316331462001f0257604051630cd5bd6f60e21b815260040160405180910390fd5b61010a5460405163763c2b5d60e11b8152600481018490526001600160a01b0380841660248301529091166044820152610110606482015261010f608482015261011160a482015273801F5323d730d5b26D512b7c938F28b9A992CF969063ec7856ba9060c40162000ece565b6033546001600160a01b0316331462001f9b57604051630cd5bd6f60e21b815260040160405180910390fd5b62001fa8838383620026d4565b505050565b6002600154141562001fd35760405162461bcd60e51b815260040162000ff890620033cc565b600260015533600090815260d160205260409020546001600160a01b0316801562001fff578062002001565b815b61010a54604051633e9ec44360e11b8152600481018790526001600160a01b03808716602483015280841660448301526101156064830152909116608482015290915073801F5323d730d5b26D512b7c938F28b9A992CF9690637d3d88869060a40160006040518083038186803b1580156200207c57600080fd5b505af415801562002091573d6000803e3d6000fd5b505060018055505050505050565b604051638596e32b60e01b81526001600160a01b0380841660048301528216602482015260d0604482015273167675832BBf781A735a543AeBe956164682DCFE90638596e32b9060640162000ece565b600054610100900460ff166200210c5760005460ff161562002110565b303b155b6200212f5760405162461bcd60e51b815260040162000ff89062002f6f565b600054610100900460ff1615801562002152576000805461ffff19166101011790555b606b80546001600160a01b0319166001600160a01b03841617905562002177620026e3565b80156200218a576000805461ff00191690555b5050565b600054610100900460ff16620021b85760405162461bcd60e51b815260040162000ff8906200384c565b620011e862002717565b600054610100900460ff16620021ec5760405162461bcd60e51b815260040162000ff8906200384c565b620011e862002747565b6038805460ff191682151590811790915560006039556040519081527f868d89ead22a5d10f456845ac0014901d9af7203e71cf0892d70d9dc262c2fb9906020015b60405180910390a150565b6040516339c4831560e01b81526001600160a01b038216600482015260d0602482015273167675832BBf781A735a543AeBe956164682DCFE906339c483159060440162000e2e565b603380546001600160a01b038381166001600160a01b0319831681179093556000603581905560405191909216929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b4260398190556040519081527fa78fdca214e4619ef34a695316d423f5b0d8274bc919d29733bf8f92ec8cbb7a906020015b60405180910390a1565b606b54604051635190bc5360e01b81526001600160a01b0383811660048301526000921690635190bc5390602401602060405180830381865afa1580156200236c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ed0919062003897565b42603555603480546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6036805460ff191682151590811790915560006037556040519081527f243ebbb2f905234bbf0556bb38e1f7c23b09ffd2e441a16e58b844eb2ab7a3979060200162002238565b63ffffffff81166000908152609d602052604090205480620024765760405162461bcd60e51b81526020600482015260076024820152662172656d6f746560c81b604482015260640162000ff8565b919050565b6001600160a01b038116620024a357604051637dd33f2b60e01b815260040160405180910390fd5b82620024c257604051630af1548760e41b815260040160405180910390fd5b61010e546000906001600160a01b039081169063f153768690851615620024ea5784620024f8565b61010a546001600160a01b03165b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381865afa1580156200253c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025629190620038bb565b9150506200256f62000f04565b1580156200259657506001600160a01b038216600090815260d0602052604090205460ff16155b15620025b55760405163237c7bef60e01b815260040160405180910390fd5b620025bf62001ea0565b158015620025dd57506000818152610110602052604090205460ff16155b15620025fc5760405163bdb84e1360e01b815260040160405180910390fd5b61010a54604051630f52295360e01b8152600481018690526001600160a01b038086166024830152808516604483015261011560648301526084820184905290911660a482015273801F5323d730d5b26D512b7c938F28b9A992CF9690630f5229539060c40162001289565b4260378190556040519081527fa52048c5f468d21a62e4644ac4db19bcaa1a20f0cf37d163ba49c7217d35feb89060200162002316565b6001600160a01b038083166000908152602083905260408120549091168015620026ca5780620026cc565b835b949350505050565b62001fa883838360d06200277a565b600054610100900460ff166200270d5760405162461bcd60e51b815260040162000ff8906200384c565b620011e86200290c565b600054610100900460ff16620027415760405162461bcd60e51b815260040162000ff8906200384c565b60018055565b600054610100900460ff16620027715760405162461bcd60e51b815260040162000ff8906200384c565b62093a8060cf55565b6001600160a01b038416620027a257604051630487895760e01b815260040160405180910390fd5b6001600160a01b03841660009081526020829052604090205460ff1615620027dd57604051630ef8aa0160e21b815260040160405180910390fd5b6001600160a01b03841660008181526020838152604091829020805460ff1916600117905590513381527fbc68405e644da2aaf25623ce2199da82c6dfd2e1de102b400eba6a091704d4f4910160405180910390a26001600160a01b038316156200289c576001600160a01b03848116600081815260028401602052604080822080546001600160a01b0319169488169485179055519091907fd73892e8827a6025d74a01fca72a8e0d9e2c04080272e728f8861410c7d3c2d1908390a45b6001600160a01b0382161562002906576001600160a01b03848116600081815260018401602052604080822080546001600160a01b0319169487169485179055519091907f31f32ebf07b0ac7fe173f7b7f3f943020d9bdc6dbfbdcdae01bd45ea78d953d7908390a45b50505050565b600054610100900460ff16620029365760405162461bcd60e51b815260040162000ff8906200384c565b620011e8336200228b565b61160580620038ed83390190565b6001600160a01b03811681146200149657600080fd5b803562002476816200294f565b6000602082840312156200298557600080fd5b813562001d1c816200294f565b600060408284031215620029a557600080fd5b50919050565b60008060608385031215620029bf57600080fd5b620029cb848462002992565b91506040830135620029dd816200294f565b809150509250929050565b60008060408385031215620029fc57600080fd5b823562002a09816200294f565b91506020830135620029dd816200294f565b60006020828403121562002a2e57600080fd5b5035919050565b600080600080600060a0868803121562002a4e57600080fd5b85359450602086013562002a62816200294f565b9350604086013562002a74816200294f565b9250606086013562002a86816200294f565b9150608086013562002a98816200294f565b809150509295509295909350565b63ffffffff811681146200149657600080fd5b60008083601f84011262002acc57600080fd5b5081356001600160401b0381111562002ae457600080fd5b6020830191508360208260051b850101111562002b0057600080fd5b9250929050565b6000806000806060858703121562002b1e57600080fd5b843562002b2b8162002aa6565b9350602085013562002b3d816200294f565b925060408501356001600160401b0381111562002b5957600080fd5b62002b678782880162002ab9565b95989497509550505050565b60008060006080848603121562002b8957600080fd5b62002b95858562002992565b9250604084013562002ba7816200294f565b9150606084013562002bb9816200294f565b809150509250925092565b6000806040838503121562002bd857600080fd5b50508035926020909101359150565b60006020828403121562002bfa57600080fd5b813562001d1c8162002aa6565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562002c425762002c4262002c07565b60405290565b60405160e081016001600160401b038111828210171562002c425762002c4262002c07565b604051601f8201601f191681016001600160401b038111828210171562002c985762002c9862002c07565b604052919050565b600082601f83011262002cb257600080fd5b81356001600160401b0381111562002cce5762002cce62002c07565b62002ce3601f8201601f191660200162002c6d565b81815284602083860101111562002cf957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121562002d2d57600080fd5b843562002d3a8162002aa6565b9350602085013562002d4c8162002aa6565b92506040850135915060608501356001600160401b0381111562002d6f57600080fd5b62002d7d8782880162002ca0565b91505092959194509250565b6000806040838503121562002d9d57600080fd5b823562002daa8162002aa6565b946020939093013593505050565b60006020828403121562002dcb57600080fd5b81356001600160401b0381111562002de257600080fd5b82016080818503121562001d1c57600080fd5b6000806040838503121562002e0957600080fd5b823591506020830135620029dd816200294f565b60006020828403121562002e3057600080fd5b81356001600160401b0381111562002e4757600080fd5b820160e0818503121562001d1c57600080fd5b60008060006040848603121562002e7057600080fd5b833562002e7d816200294f565b925060208401356001600160401b0381111562002e9957600080fd5b62002ea78682870162002ab9565b9497909650939450505050565b60008060006060848603121562002eca57600080fd5b83359250602084013562002ede816200294f565b9150604084013562002bb9816200294f565b60008060006060848603121562002f0657600080fd5b833562002f13816200294f565b9250602084013562002ede816200294f565b803562002f328162002aa6565b63ffffffff168252602090810135910152565b6080810162002f55828662002f25565b6001600160a01b0393909316604082015260600152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101562002fde57634e487b7160e01b600052601160045260246000fd5b500390565b81835260006001600160fb1b0383111562002ffd57600080fd5b8260051b8083602087013760009401602001938452509192915050565b63ffffffff87168152600060018060a01b03808816602084015260a060408401526200304b60a08401878962002fe3565b941660608301525060800152949350505050565b60e081016200306f828962002f25565b6001600160a01b039687166040830152949095166060860152608085019290925260a084015260c090920191909152919050565b6000815180845260005b81811015620030cb57602081850181015186830182015201620030ad565b81811115620030de576000602083870101525b50601f01601f19169290920160200192915050565b63ffffffff8716815260c0602082015260006200311460c0830188620030a3565b6040830196909652506001600160a01b03939093166060840152608083019190915260a09091015292915050565b60008235607e198336030181126200315957600080fd5b9190910192915050565b6000608082840312156200317657600080fd5b6200318062002c1d565b905081356200318f816200294f565b815260208201356001600160401b03811115620031ab57600080fd5b620031b98482850162002ca0565b6020830152506040820135620031cf8162002aa6565b60408201526060820135620031e48162002aa6565b606082015292915050565b6000608082360312156200320257600080fd5b6200320c62002c1d565b82356001600160401b038111156200322357600080fd5b620032313682860162003163565b825250602083013562003244816200294f565b602082015260408381013590820152606092830135928101929092525090565b6000602082840312156200327757600080fd5b815162001d1c816200294f565b60018060a01b0381511682526000602082015160806020850152620032ad6080850182620030a3565b9050604083015163ffffffff808216604087015280606086015116606087015250508091505092915050565b608081526000855160e0608084015280516080610160850152620033026101e085018262003284565b6020838101516001600160a01b0390811661018088015260408501516101a08801526060909401516101c087015289015192831660a08601529050604088015160c085015260608801516001600160a01b03811660e08601529150608088015161010085015260a08801516001600160a01b038116610120860152915060c0979097015161014084015250506020810193909352604083019190915260609091015290565b60008060408385031215620033bb57600080fd5b505080516020909101519092909150565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006001600160401b038211156200341f576200341f62002c07565b5060051b60200190565b600082601f8301126200343b57600080fd5b81356020620034546200344e8362003403565b62002c6d565b82815260059290921b840181019181810190868411156200347457600080fd5b8286015b848110156200349c5780356200348e816200294f565b835291830191830162003478565b509695505050505050565b600082601f830112620034b957600080fd5b81356020620034cc6200344e8362003403565b82815260059290921b84018101918181019086841115620034ec57600080fd5b8286015b848110156200349c5780356001600160401b03811115620035115760008081fd5b620035218986838b010162002ca0565b845250918301918301620034f0565b600060e082360312156200354357600080fd5b6200354d62002c48565b82356001600160401b03808211156200356557600080fd5b620035733683870162003163565b8352620035836020860162002965565b602084015260408501359150808211156200359d57600080fd5b620035ab3683870162003429565b60408401526060850135915080821115620035c557600080fd5b50620035d436828601620034a7565b6060830152506080830135608082015260a083013560a0820152620035fc60c0840162002965565b60c082015292915050565b600081518084526020808501808196508360051b8101915082860160005b858110156200365357828403895262003640848351620030a3565b9885019893509084019060010162003625565b5091979650505050505050565b60006101008083528a5181828501528051915060e06102008501526200368b6102e085018362003284565b6020828101516001600160a01b0390811661022088015260408401518784036101ff199081016102408a015281518086529184019650929360009391908501905b80851015620036f057875184168252968501966001949094019390850190620036cc565b506060860151965081898203016102608a01526200370f818862003607565b965050505050608082015161028086015260a08201516102a086015260c08201519150620037496102c08601836001600160a01b03169052565b8c810151801515610120870152915060408d015161014086015260608d01516001600160a01b038116610160870152915060808d01516001600160a01b038116610180870152915060a08d01516001600160a01b0381166101a0870152915060c08d01516101c086015260e08d01516101e08601528293508b818601525050508760408301528660608301528560808301528460a08301528360c08301528260e08301529998505050505050505050565b6000602082840312156200380d57600080fd5b5051919050565b6001600160a01b03851681526060602082018190526000906200383b908301858762002fe3565b905082604083015295945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215620038aa57600080fd5b8151801515811462001d1c57600080fd5b60008060408385031215620038cf57600080fd5b8251620038dc8162002aa6565b602093909301519294929350505056fe60e0604052601d60a081905262ffffff1960c090815262000024916000919062000067565b503480156200003257600080fd5b50604051620016053803806200160583398101604081905262000055916200010d565b6001600160a01b03166080526200017c565b82805462000075906200013f565b90600052602060002090601f016020900481019282620000995760008555620000e4565b82601f10620000b457805160ff1916838001178555620000e4565b82800160010185558215620000e4579182015b82811115620000e4578251825591602001919060010190620000c7565b50620000f2929150620000f6565b5090565b5b80821115620000f25760008155600101620000f7565b6000602082840312156200012057600080fd5b81516001600160a01b03811681146200013857600080fd5b9392505050565b600181811c908216806200015457607f821691505b602082108114156200017657634e487b7160e01b600052602260045260246000fd5b50919050565b6080516114676200019e6000396000818160d4015261010701526114676000f3fe60806040526004361061003f5760003560e01c80631e29b440146100445780632b59241f1461006e578063938b5f321461009b578063975740c6146100c5575b600080fd5b610057610052366004611103565b6100f8565b604051610065929190611270565b60405180910390f35b34801561007a57600080fd5b506100836102ef565b6040516001600160a01b039091168152602001610065565b3480156100a757600080fd5b506100b0610396565b60405163ffffffff9091168152602001610065565b3480156100d157600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610083565b60006060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101635760405162461bcd60e51b8152602060048201526007602482015266234f433a30323760c81b60448201526064015b60405180910390fd5b6001600160a01b038616158061017e5761017e87898b6103b4565b600060606001600160a01b038a163b6101c55760405162461bcd60e51b81526020600482015260096024820152680858dbdb9d1c9858dd60ba1b604482015260640161015a565b87516101d89060009060208b0190610ffc565b50896001600160a01b0316836101ef5760006101f1565b8b5b888860405161020192919061128b565b60006040518083038185875af1925050503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b5060408051808201909152601d80825262ffffff1960209092019182529294509092506102739160009190610ffc565b5081158015610280575082155b1561029057610290898b8d61049f565b896001600160a01b03168c7f627b4985667a94d1a70c70277b9471eed68009d6f9c3ae5d25fa799fd3f0398d8b8e8c8c8c888a6040516102d6979695949392919061129b565b60405180910390a3909b909a5098505050505050505050565b6000806103856000805461030290611318565b80601f016020809104026020016040519081016040528092919081815260200182805461032e90611318565b801561037b5780601f106103505761010080835404028352916020019161037b565b820191906000526020600020905b81548152906001019060200180831161035e57829003601f168201915b50505050506105b2565b9050610390816105cc565b91505090565b6000806103a96000805461030290611318565b9050610390816105fd565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610429919061134d565b610433919061137c565b6040516001600160a01b03851660248201526044810182905290915061049990859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261061f565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610513919061134d565b9050818110156105775760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b606482015260840161015a565b6040516001600160a01b038416602482015282820360448201819052906105ab90869063095ea7b360e01b90606401610462565b5050505050565b60006105c66105c183836106f6565b61071a565b92915050565b60008160016105e3815b62ffffff19841690610733565b506105f562ffffff198516600561080c565b949350505050565b600081600161060b816105d6565b506105f562ffffff19851660016004610821565b6000610674826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108519092919063ffffffff16565b8051909150156106f157808060200190518101906106929190611394565b6106f15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161015a565b505050565b81516000906020840161071164ffffffffff85168284610860565b95945050505050565b60006105c6610728836108a4565b62ffffff19166108de565b600061073f8383610939565b61080557600061075e6107528560d81c90565b64ffffffffff1661095c565b91505060006107738464ffffffffff1661095c565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161015a91906113b6565b5090919050565b600061081a83836014610821565b9392505050565b600061082e8260206113c9565b6108399060086113ec565b60ff16610847858585610a0a565b901c949350505050565b60606105f58484600085610b63565b60008061086d838561137c565b905060405181111561087d575060005b8061088f5762ffffff1991505061081a565b5050606092831b9190911790911b1760181b90565b60006001600160601b03601883901c16601914156108d4576301000000600160d81b038216600160d81b176105c6565b62ffffff196105c6565b60006108e982610c94565b6109355760405162461bcd60e51b815260206004820152601960248201527f56616c696469747920617373657274696f6e206661696c656400000000000000604482015260640161015a565b5090565b60008164ffffffffff1661094d8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156109b157600061097b8260086113ec565b60ff1685901c905061098c81610cd2565b61ffff16841793508160ff166010146109a757601084901b93505b5060001901610962565b50600f5b60ff8160ff161015610a045760006109ce8260086113ec565b60ff1685901c90506109df81610cd2565b61ffff16831792508160ff166000146109fa57601083901b92505b50600019016109b5565b50915091565b600060ff8216610a1c5750600061081a565b610a2f8460181c6001600160601b031690565b6001600160601b0316610a4560ff84168561137c565b1115610aa957610a90610a618560781c6001600160601b031690565b6001600160601b0316610a7d8660181c6001600160601b031690565b6001600160601b0316858560ff16610d04565b60405162461bcd60e51b815260040161015a91906113b6565b60208260ff161115610b235760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000606482015260840161015a565b600882026000610b3c8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b606082471015610bc45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161015a565b6001600160a01b0385163b610c1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015a565b600080866001600160a01b03168587604051610c379190611415565b60006040518083038185875af1925050503d8060008114610c74576040519150601f19603f3d011682016040523d82523d6000602084013e610c79565b606091505b5091509150610c89828286610e2e565b979650505050505050565b6000610ca08260d81c90565b64ffffffffff1664ffffffffff1415610cbb57506000919050565b6000610cc683610e67565b60405110199392505050565b6000610ce460048360ff16901c610ea0565b60ff1661ffff919091161760081b610cfb82610ea0565b60ff1617919050565b60606000610d118661095c565b9150506000610d1f8661095c565b9150506000610d2d8661095c565b9150506000610d3b8661095c565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60608315610e3d57508161081a565b825115610e4d5782518084602001fd5b8160405162461bcd60e51b815260040161015a91906113b6565b6000610e7c8260181c6001600160601b031690565b610e8f8360781c6001600160601b031690565b016001600160601b03169050919050565b600060f08083179060ff82161415610ebb5750603092915050565b8060ff1660f11415610ed05750603192915050565b8060ff1660f21415610ee55750603292915050565b8060ff1660f31415610efa5750603392915050565b8060ff1660f41415610f0f5750603492915050565b8060ff1660f51415610f245750603592915050565b8060ff1660f61415610f395750603692915050565b8060ff1660f71415610f4e5750603792915050565b8060ff1660f81415610f635750603892915050565b8060ff1660f91415610f785750603992915050565b8060ff1660fa1415610f8d5750606192915050565b8060ff1660fb1415610fa25750606292915050565b8060ff1660fc1415610fb75750606392915050565b8060ff1660fd1415610fcc5750606492915050565b8060ff1660fe1415610fe15750606592915050565b8060ff1660ff1415610ff65750606692915050565b50919050565b82805461100890611318565b90600052602060002090601f01602090048101928261102a5760008555611070565b82601f1061104357805160ff1916838001178555611070565b82800160010185558215611070579182015b82811115611070578251825591602001919060010190611055565b506109359291505b808211156109355760008155600101611078565b6001600160a01b03811681146110a157600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008083601f8401126110cc57600080fd5b50813567ffffffffffffffff8111156110e457600080fd5b6020830191508360208285010111156110fc57600080fd5b9250929050565b600080600080600080600060c0888a03121561111e57600080fd5b873596506020880135955060408801356111378161108c565b945060608801356111478161108c565b9350608088013567ffffffffffffffff8082111561116457600080fd5b818a0191508a601f83011261117857600080fd5b81358181111561118a5761118a6110a4565b604051601f8201601f19908116603f011681019083821181831017156111b2576111b26110a4565b816040528281528d60208487010111156111cb57600080fd5b8260208601602083013760006020848301015280975050505060a08a01359150808211156111f857600080fd5b506112058a828b016110ba565b989b979a50959850939692959293505050565b60005b8381101561123357818101518382015260200161121b565b838111156104995750506000910152565b6000815180845261125c816020860160208601611218565b601f01601f19169290920160200192915050565b82151581526040602082015260006105f56040830184611244565b8183823760009101908152919050565b60018060a01b038816815286602082015260c0604082015260006112c260c0830188611244565b828103606084015285815285876020830137600060208783010152601f19601f8701168101905060208382030160808401526113016020820186611244565b91505082151560a083015298975050505050505050565b600181811c9082168061132c57607f821691505b60208210811415610ff657634e487b7160e01b600052602260045260246000fd5b60006020828403121561135f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561138f5761138f611366565b500190565b6000602082840312156113a657600080fd5b8151801515811461081a57600080fd5b60208152600061081a6020830184611244565b600060ff821660ff8416808210156113e3576113e3611366565b90039392505050565b600060ff821660ff84168160ff048111821515161561140d5761140d611366565b029392505050565b60008251611427818460208701611218565b919091019291505056fea2646970667358221220d3023101ff967b44cdefbc4d21cf5699b8f973d3da7c2fd67c779f07bb0e96a464736f6c634300080b0033a264697066735822122061fbdec1d3701e23afb13812e10ec23bd7235185bcc290189767d4655d6864ae64736f6c634300080b0033",
  "deployedBytecode": "0x608060405260043610620004235760003560e01c80639b0989081162000227578063c6bf691d116200012f578063e070da0911620000b9578063ea7a904d1162000084578063ea7a904d1462000d11578063eb492f441462000d36578063f31abcc41462000d5b578063f40fec521462000d80578063ffaf3f1a1462000dbb57600080fd5b8063e070da091462000ca5578063e47602f71462000cbc578063e8be0dfc1462000cd4578063e9160f3e1462000cec57600080fd5b8063d1851c9211620000fa578063d1851c921462000c1a578063d232c2201462000c3a578063d7aada811462000c5b578063dd39f00d1462000c8057600080fd5b8063c6bf691d1462000b7e578063c95f9d0e1462000bbb578063ca27a83d1462000bd2578063cf9737691462000bf757600080fd5b8063bd7e1e2e11620001b1578063c26c9c0a116200017c578063c26c9c0a1462000af5578063c2fb26a61462000b2a578063c34c08e51462000b43578063c5b350df1462000b6657600080fd5b8063bd7e1e2e1462000a74578063c0c17baf1462000aaf578063c104f41a1462000ac7578063c1a049591462000ade57600080fd5b8063ac210cc711620001f2578063ac210cc714620009ee578063affed0e01462000a11578063b1f8100d1462000a2a578063b49c53a71462000a4f57600080fd5b80639b098908146200095b5780639bf6d875146200098d5780639d23c4c714620009a6578063ab2dc3f514620009c957600080fd5b8063468f6668116200032b5780636ae0b15411620002b557806383bbb806116200028057806383bbb80614620008bd5780638741eac514620008ee5780638cba8b6a14620009065780638da5cb5b146200093b57600080fd5b80636ae0b1541462000836578063715018a6146200085b5780637708a628146200087357806382904716146200089857600080fd5b80636006209111620002f657806360062091146200078357806360f0a5ac14620007e25780636a41633a14620008075780636a42b8f8146200081e57600080fd5b8063468f666814620006ec5780634b72c5da1462000711578063569d29e4146200072957806357bd0a32146200074e57600080fd5b80632c1999d011620003ad5780633b688da611620003785780633b688da614620006365780633cf52ffb146200067357806341258b5c146200068a57806341bdc8b514620006c757600080fd5b80632c1999d014620005835780633339df9614620005d75780633641e08314620005f95780633855b467146200061e57600080fd5b80631506e46311620003ee5780631506e463146200050a5780632004ef45146200052f57806322a3c00714620005475780632424401f146200056c57600080fd5b80630951d6d8146200043057806309935b8f146200045b57806312d5717014620004825780631407093b14620004bc57600080fd5b366200042b57005b600080fd5b3480156200043d57600080fd5b506200044860d55481565b6040519081526020015b60405180910390f35b3480156200046857600080fd5b50620004806200047a36600462002972565b62000de0565b005b3480156200048f57600080fd5b5062000448620004a136600462002972565b6001600160a01b0316600090815260d4602052604090205490565b348015620004c957600080fd5b50620004f9620004db36600462002972565b6001600160a01b0316600090815260d0602052604090205460ff1690565b604051901515815260200162000452565b3480156200051757600080fd5b506200048062000529366004620029ab565b62000e63565b3480156200053c57600080fd5b50620004f962000f04565b3480156200055457600080fd5b506200048062000566366004620029e8565b62000f27565b620004806200057d36600462002a1b565b62000f77565b3480156200059057600080fd5b50620005be620005a236600462002a1b565b610112602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200162000452565b348015620005e457600080fd5b50606b54620005be906001600160a01b031681565b3480156200060657600080fd5b50620004806200061836600462002a35565b62000fb8565b3480156200062b57600080fd5b506200048062001137565b3480156200064357600080fd5b50620005be6200065536600462002972565b6001600160a01b03908116600090815260d360205260409020541690565b3480156200068057600080fd5b5060355462000448565b3480156200069757600080fd5b5062000448620006a9366004620029e8565b61011560209081526000928352604080842090915290825290205481565b348015620006d457600080fd5b5062000480620006e636600462002972565b620011ea565b348015620006f957600080fd5b50620004806200070b36600462002b07565b62001238565b3480156200071e57600080fd5b506200044860d65481565b3480156200073657600080fd5b50620004806200074836600462002b73565b620012c1565b3480156200075b57600080fd5b50620004f96200076d36600462002a1b565b6101106020526000908152604090205460ff1681565b3480156200079057600080fd5b50620007c5620007a236600462002972565b610111602052600090815260409020805460019091015463ffffffff9091169082565b6040805163ffffffff909316835260208301919091520162000452565b348015620007ef57600080fd5b50620004806200080136600462002972565b620013ea565b3480156200081457600080fd5b5060395462000448565b3480156200082b57600080fd5b5062093a8062000448565b3480156200084357600080fd5b50620004806200085536600462002972565b6200145f565b3480156200086857600080fd5b506200048062001499565b3480156200088057600080fd5b50620005be6200089236600462002bc4565b6200155b565b348015620008a557600080fd5b5062000480620008b736600462002a1b565b62001595565b348015620008ca57600080fd5b5062000448620008dc36600462002be7565b609d6020526000908152604090205481565b348015620008fb57600080fd5b506200048062001641565b3480156200091357600080fd5b50620004f96200092536600462002972565b6101166020526000908152604090205460ff1681565b3480156200094857600080fd5b506033546001600160a01b0316620005be565b3480156200096857600080fd5b50620004486200097a36600462002a1b565b6101176020526000908152604090205481565b3480156200099a57600080fd5b50620004486101195481565b348015620009b357600080fd5b5061010e54620005be906001600160a01b031681565b348015620009d657600080fd5b5062000480620009e836600462002d16565b6200169c565b348015620009fb57600080fd5b5061010a54620005be906001600160a01b031681565b34801562000a1e57600080fd5b506200044861010b5481565b34801562000a3757600080fd5b506200048062000a4936600462002972565b620017cc565b34801562000a5c57600080fd5b506200048062000a6e36600462002d89565b62001878565b34801562000a8157600080fd5b50620005be62000a9336600462002a1b565b61010f602052600090815260409020546001600160a01b031681565b34801562000abc57600080fd5b5062000480620018bd565b6200044862000ad836600462002db8565b6200196e565b34801562000aeb57600080fd5b5060375462000448565b34801562000b0257600080fd5b50620004f962000b1436600462002a1b565b6101136020526000908152604090205460ff1681565b34801562000b3757600080fd5b506200044861010d5481565b34801562000b5057600080fd5b5061010c54620005be906001600160a01b031681565b34801562000b7357600080fd5b506200048062001b06565b34801562000b8b57600080fd5b50620005be62000b9d36600462002972565b6001600160a01b03908116600090815260d160205260409020541690565b6200048062000bcc36600462002df5565b62001b98565b34801562000bdf57600080fd5b506200044862000bf136600462002e1d565b62001bd8565b34801562000c0457600080fd5b5061010954620005be906001600160a01b031681565b34801562000c2757600080fd5b506034546001600160a01b0316620005be565b34801562000c4757600080fd5b506033546001600160a01b031615620004f9565b34801562000c6857600080fd5b506200048062000c7a36600462002e5a565b62001d23565b34801562000c8d57600080fd5b506200048062000c9f36600462002972565b62001d91565b6200048062000cb636600462002eb4565b62001e04565b34801562000cc957600080fd5b506200048062001e45565b34801562000ce157600080fd5b50620004f962001ea0565b34801562000cf957600080fd5b50620005be62000d0b36600462002972565b62001ec1565b34801562000d1e57600080fd5b506200048062000d3036600462002df5565b62001ed6565b34801562000d4357600080fd5b506200048062000d5536600462002ef0565b62001f6f565b34801562000d6857600080fd5b506200048062000d7a36600462002eb4565b62001fad565b34801562000d8d57600080fd5b50620005be62000d9f36600462002a1b565b610118602052600090815260409020546001600160a01b031681565b34801562000dc857600080fd5b506200048062000dda366004620029e8565b6200209f565b60cf54604051630d183f5b60e31b81526001600160a01b0383166004820152602481019190915260d0604482015273__$75c29036ac1bef2befe7a7f1afa513e8fd$__906368c1fad8906064015b60006040518083038186803b15801562000e4757600080fd5b505af415801562000e5c573d6000803e3d6000fd5b5050505050565b6033546001600160a01b0316331462000e8f57604051630cd5bd6f60e21b815260040160405180910390fd5b6040516301d9fdc360e61b815273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__9063767f70c09062000ece908590859061010f9060040162002f45565b60006040518083038186803b15801562000ee757600080fd5b505af415801562000efc573d6000803e3d6000fd5b505050505050565b6033546000906001600160a01b0316158062000f22575060365460ff165b905090565b60405163dc26fe0f60e01b81526001600160a01b0380841660048301528216602482015260d0604482015273__$75c29036ac1bef2befe7a7f1afa513e8fd$__9063dc26fe0f9060640162000ece565b6040516302fba8f160e51b815260048101829052610117602482015273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__90635f751e209060440162000e2e565b600054610100900460ff1662000fd55760005460ff161562000fd9565b303b155b620010015760405162461bcd60e51b815260040162000ff89062002f6f565b60405180910390fd5b600054610100900460ff1615801562001024576000805461ffff19166101011790555b6200102f85620020ef565b620010396200218e565b62001043620021c2565b600061010b5561010d86905561010980546001600160a01b0319166001600160a01b03841617905560405130906200107b9062002941565b6001600160a01b039091168152602001604051809103906000f080158015620010a8573d6000803e3d6000fd5b5061010c80546001600160a01b03199081166001600160a01b039384161790915561010e8054821687841617905561010a80549091169185169190911790557fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060d75561270b60d55561271060d655600561011955801562000efc576000805461ff0019169055505050505050565b6033546001600160a01b031633146200116357604051630cd5bd6f60e21b815260040160405180910390fd5b60385460ff16156200118857604051634e3d8db760e11b815260040160405180910390fd5b603954620011a957604051631c2ed13b60e01b815260040160405180910390fd5b62093a8060395442620011bd919062002fbd565b11620011dc57604051635aeaa22f60e11b815260040160405180910390fd5b620011e86001620021f6565b565b6033546001600160a01b031633146200121657604051630cd5bd6f60e21b815260040160405180910390fd5b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6101095460405163271b322160e01b815273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__9163271b322191620012899188918891889188916001600160a01b031690610118906004016200301a565b60006040518083038186803b158015620012a257600080fd5b505af4158015620012b7573d6000803e3d6000fd5b5050505050505050565b6033546001600160a01b03163314620012ed57604051630cd5bd6f60e21b815260040160405180910390fd5b61010a546040516330d512f360e11b815273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__916361aa25e6916200134291879187916001600160a01b0316906101109061011190610112906004016200305f565b60006040518083038186803b1580156200135b57600080fd5b505af415801562001370573d6000803e3d6000fd5b50506040516301d9fdc360e61b815273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__925063767f70c09150620013b3908690859061010f9060040162002f45565b60006040518083038186803b158015620013cc57600080fd5b505af4158015620013e1573d6000803e3d6000fd5b50505050505050565b6033546001600160a01b031633146200141657604051630cd5bd6f60e21b815260040160405180910390fd5b6040516373b8255360e01b81526001600160a01b0382166004820152610116602482015273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__906373b825539060440162000e2e565b6033546001600160a01b031633146200148b57604051630cd5bd6f60e21b815260040160405180910390fd5b620014968162002243565b50565b6033546001600160a01b03163314620014c557604051630cd5bd6f60e21b815260040160405180910390fd5b603554620014e657604051632a2d7bdb60e11b815260040160405180910390fd5b62093a8060355442620014fa919062002fbd565b11620015195760405163136ae5ad60e01b815260040160405180910390fd5b6034546001600160a01b03161562001544576040516301a8692360e11b815260040160405180910390fd5b603454620011e8906001600160a01b03166200228b565b61011460205281600052604060002081815481106200157957600080fd5b6000918252602090912001546001600160a01b03169150829050565b6033546001600160a01b03163314620015c157604051630cd5bd6f60e21b815260040160405180910390fd5b61011954604051633d0e0fb560e01b815273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__91633d0e0fb59162001606918591600401918252602082015260400190565b60006040518083038186803b1580156200161f57600080fd5b505af415801562001634573d6000803e3d6000fd5b5050506101199190915550565b6033546001600160a01b031633146200166d57604051630cd5bd6f60e21b815260040160405180910390fd5b60385460ff1615620016925760405163382242c360e01b815260040160405180910390fd5b620011e8620022e4565b620016a73362002320565b620016e05760405162461bcd60e51b8152602060048201526008602482015267217265706c69636160c01b604482015260640162000ff8565b63ffffffff84166000908152609d60205260409020548490839081146200173b5760405162461bcd60e51b815260206004820152600e60248201526d10b932b6b7ba32903937baba32b960911b604482015260640162000ff8565b61010e546040516310007eb560e31b815273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__91638003f5a89162001792918a918891610113916001600160a01b03909116906101149061011590600401620030f3565b60006040518083038186803b158015620017ab57600080fd5b505af4158015620017c0573d6000803e3d6000fd5b50505050505050505050565b6033546001600160a01b03163314620017f857604051630cd5bd6f60e21b815260040160405180910390fd5b6034546001600160a01b0382811691161480156200181e57506001600160a01b03811615155b156200183d57604051635334dcf560e01b815260040160405180910390fd5b6033546001600160a01b03828116911614156200186d576040516304d9ae9160e21b815260040160405180910390fd5b620014968162002392565b6033546001600160a01b03163314620018a457604051630cd5bd6f60e21b815260040160405180910390fd5b63ffffffff9091166000908152609d6020526040902055565b6033546001600160a01b03163314620018e957604051630cd5bd6f60e21b815260040160405180910390fd5b60365460ff16156200190e5760405163cd0cbe2b60e01b815260040160405180910390fd5b6037546200192f57604051636da7f42560e01b815260040160405180910390fd5b62093a806037544262001943919062002fbd565b11620019625760405163288a062560e21b815260040160405180910390fd5b620011e86001620023e0565b6000806200199a62001981848062003142565b6200199490608081019060600162002be7565b62002427565b905060006040518060e0016040528085620019b590620031ef565b815261010a546001600160a01b0390811660208084019190915261010b5460408085019190915261010e548316606085015261010d546080850152606b548151639fa92f9d60e01b8152915160a090950194931692639fa92f9d926004808401939192918290030181865afa15801562001a33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a59919062003264565b6001600160a01b0316815260200183815250905060008073__$e9b8f0d4275fffc6a137782a630dcbfc8b$__634772eb6d8461011161010f6101176040518563ffffffff1660e01b815260040162001ab59493929190620032d9565b6040805180830381865af415801562001ad2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001af89190620033a7565b61010b559695505050505050565b6034546001600160a01b0316331462001b32576040516340a61e4d60e01b815260040160405180910390fd5b6034546033546001600160a01b039081169116141562001b65576040516315cb454d60e21b815260040160405180910390fd5b62093a806035544262001b79919062002fbd565b11620015445760405163970af82d60e01b815260040160405180910390fd5b6002600154141562001bbe5760405162461bcd60e51b815260040162000ff890620033cc565b600260015562001bd08282336200247b565b505060018055565b336000908152610116602052604081205460ff1662001c0a57604051633412968d60e01b815260040160405180910390fd5b60006040518061010001604052808462001c249062003530565b815260200162001c3362000f04565b1515815261011954602082015261010e546001600160a01b0390811660408084019190915261010a548216606084015261010c54909116608083015260d55460a083015260d65460c090920191909152516345b049e960e01b815290915073__$e9b8f0d4275fffc6a137782a630dcbfc8b$__906345b049e99062001cd890849061011490610113906101159061010f906101129060d0906101189060040162003660565b602060405180830381865af415801562001cf6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d1c9190620037fa565b9392505050565b610109546001600160a01b0316331462001d505760405163b58c129760e01b815260040160405180910390fd5b604051631da0f25760e21b815273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__90637683c95c90620013b3908690869086906101179060040162003814565b6033546001600160a01b0316331462001dbd57604051630cd5bd6f60e21b815260040160405180910390fd5b60405162968b7960e01b81526001600160a01b0382166004820152610116602482015273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__9062968b799060440162000e2e565b6002600154141562001e2a5760405162461bcd60e51b815260040162000ff890620033cc565b600260015562001e3c8383836200247b565b50506001805550565b6033546001600160a01b0316331462001e7157604051630cd5bd6f60e21b815260040160405180910390fd5b60365460ff161562001e965760405163b1134ca960e01b815260040160405180910390fd5b620011e862002668565b6033546000906001600160a01b0316158062000f2257505060385460ff1690565b600062001ed08260d26200269f565b92915050565b6033546001600160a01b0316331462001f0257604051630cd5bd6f60e21b815260040160405180910390fd5b61010a5460405163763c2b5d60e11b8152600481018490526001600160a01b0380841660248301529091166044820152610110606482015261010f608482015261011160a482015273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__9063ec7856ba9060c40162000ece565b6033546001600160a01b0316331462001f9b57604051630cd5bd6f60e21b815260040160405180910390fd5b62001fa8838383620026d4565b505050565b6002600154141562001fd35760405162461bcd60e51b815260040162000ff890620033cc565b600260015533600090815260d160205260409020546001600160a01b0316801562001fff578062002001565b815b61010a54604051633e9ec44360e11b8152600481018790526001600160a01b03808716602483015280841660448301526101156064830152909116608482015290915073__$e9b8f0d4275fffc6a137782a630dcbfc8b$__90637d3d88869060a40160006040518083038186803b1580156200207c57600080fd5b505af415801562002091573d6000803e3d6000fd5b505060018055505050505050565b604051638596e32b60e01b81526001600160a01b0380841660048301528216602482015260d0604482015273__$75c29036ac1bef2befe7a7f1afa513e8fd$__90638596e32b9060640162000ece565b600054610100900460ff166200210c5760005460ff161562002110565b303b155b6200212f5760405162461bcd60e51b815260040162000ff89062002f6f565b600054610100900460ff1615801562002152576000805461ffff19166101011790555b606b80546001600160a01b0319166001600160a01b03841617905562002177620026e3565b80156200218a576000805461ff00191690555b5050565b600054610100900460ff16620021b85760405162461bcd60e51b815260040162000ff8906200384c565b620011e862002717565b600054610100900460ff16620021ec5760405162461bcd60e51b815260040162000ff8906200384c565b620011e862002747565b6038805460ff191682151590811790915560006039556040519081527f868d89ead22a5d10f456845ac0014901d9af7203e71cf0892d70d9dc262c2fb9906020015b60405180910390a150565b6040516339c4831560e01b81526001600160a01b038216600482015260d0602482015273__$75c29036ac1bef2befe7a7f1afa513e8fd$__906339c483159060440162000e2e565b603380546001600160a01b038381166001600160a01b0319831681179093556000603581905560405191909216929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b4260398190556040519081527fa78fdca214e4619ef34a695316d423f5b0d8274bc919d29733bf8f92ec8cbb7a906020015b60405180910390a1565b606b54604051635190bc5360e01b81526001600160a01b0383811660048301526000921690635190bc5390602401602060405180830381865afa1580156200236c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ed0919062003897565b42603555603480546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6036805460ff191682151590811790915560006037556040519081527f243ebbb2f905234bbf0556bb38e1f7c23b09ffd2e441a16e58b844eb2ab7a3979060200162002238565b63ffffffff81166000908152609d602052604090205480620024765760405162461bcd60e51b81526020600482015260076024820152662172656d6f746560c81b604482015260640162000ff8565b919050565b6001600160a01b038116620024a357604051637dd33f2b60e01b815260040160405180910390fd5b82620024c257604051630af1548760e41b815260040160405180910390fd5b61010e546000906001600160a01b039081169063f153768690851615620024ea5784620024f8565b61010a546001600160a01b03165b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016040805180830381865afa1580156200253c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025629190620038bb565b9150506200256f62000f04565b1580156200259657506001600160a01b038216600090815260d0602052604090205460ff16155b15620025b55760405163237c7bef60e01b815260040160405180910390fd5b620025bf62001ea0565b158015620025dd57506000818152610110602052604090205460ff16155b15620025fc5760405163bdb84e1360e01b815260040160405180910390fd5b61010a54604051630f52295360e01b8152600481018690526001600160a01b038086166024830152808516604483015261011560648301526084820184905290911660a482015273__$e9b8f0d4275fffc6a137782a630dcbfc8b$__90630f5229539060c40162001289565b4260378190556040519081527fa52048c5f468d21a62e4644ac4db19bcaa1a20f0cf37d163ba49c7217d35feb89060200162002316565b6001600160a01b038083166000908152602083905260408120549091168015620026ca5780620026cc565b835b949350505050565b62001fa883838360d06200277a565b600054610100900460ff166200270d5760405162461bcd60e51b815260040162000ff8906200384c565b620011e86200290c565b600054610100900460ff16620027415760405162461bcd60e51b815260040162000ff8906200384c565b60018055565b600054610100900460ff16620027715760405162461bcd60e51b815260040162000ff8906200384c565b62093a8060cf55565b6001600160a01b038416620027a257604051630487895760e01b815260040160405180910390fd5b6001600160a01b03841660009081526020829052604090205460ff1615620027dd57604051630ef8aa0160e21b815260040160405180910390fd5b6001600160a01b03841660008181526020838152604091829020805460ff1916600117905590513381527fbc68405e644da2aaf25623ce2199da82c6dfd2e1de102b400eba6a091704d4f4910160405180910390a26001600160a01b038316156200289c576001600160a01b03848116600081815260028401602052604080822080546001600160a01b0319169488169485179055519091907fd73892e8827a6025d74a01fca72a8e0d9e2c04080272e728f8861410c7d3c2d1908390a45b6001600160a01b0382161562002906576001600160a01b03848116600081815260018401602052604080822080546001600160a01b0319169487169485179055519091907f31f32ebf07b0ac7fe173f7b7f3f943020d9bdc6dbfbdcdae01bd45ea78d953d7908390a45b50505050565b600054610100900460ff16620029365760405162461bcd60e51b815260040162000ff8906200384c565b620011e8336200228b565b61160580620038ed83390190565b6001600160a01b03811681146200149657600080fd5b803562002476816200294f565b6000602082840312156200298557600080fd5b813562001d1c816200294f565b600060408284031215620029a557600080fd5b50919050565b60008060608385031215620029bf57600080fd5b620029cb848462002992565b91506040830135620029dd816200294f565b809150509250929050565b60008060408385031215620029fc57600080fd5b823562002a09816200294f565b91506020830135620029dd816200294f565b60006020828403121562002a2e57600080fd5b5035919050565b600080600080600060a0868803121562002a4e57600080fd5b85359450602086013562002a62816200294f565b9350604086013562002a74816200294f565b9250606086013562002a86816200294f565b9150608086013562002a98816200294f565b809150509295509295909350565b63ffffffff811681146200149657600080fd5b60008083601f84011262002acc57600080fd5b5081356001600160401b0381111562002ae457600080fd5b6020830191508360208260051b850101111562002b0057600080fd5b9250929050565b6000806000806060858703121562002b1e57600080fd5b843562002b2b8162002aa6565b9350602085013562002b3d816200294f565b925060408501356001600160401b0381111562002b5957600080fd5b62002b678782880162002ab9565b95989497509550505050565b60008060006080848603121562002b8957600080fd5b62002b95858562002992565b9250604084013562002ba7816200294f565b9150606084013562002bb9816200294f565b809150509250925092565b6000806040838503121562002bd857600080fd5b50508035926020909101359150565b60006020828403121562002bfa57600080fd5b813562001d1c8162002aa6565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562002c425762002c4262002c07565b60405290565b60405160e081016001600160401b038111828210171562002c425762002c4262002c07565b604051601f8201601f191681016001600160401b038111828210171562002c985762002c9862002c07565b604052919050565b600082601f83011262002cb257600080fd5b81356001600160401b0381111562002cce5762002cce62002c07565b62002ce3601f8201601f191660200162002c6d565b81815284602083860101111562002cf957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121562002d2d57600080fd5b843562002d3a8162002aa6565b9350602085013562002d4c8162002aa6565b92506040850135915060608501356001600160401b0381111562002d6f57600080fd5b62002d7d8782880162002ca0565b91505092959194509250565b6000806040838503121562002d9d57600080fd5b823562002daa8162002aa6565b946020939093013593505050565b60006020828403121562002dcb57600080fd5b81356001600160401b0381111562002de257600080fd5b82016080818503121562001d1c57600080fd5b6000806040838503121562002e0957600080fd5b823591506020830135620029dd816200294f565b60006020828403121562002e3057600080fd5b81356001600160401b0381111562002e4757600080fd5b820160e0818503121562001d1c57600080fd5b60008060006040848603121562002e7057600080fd5b833562002e7d816200294f565b925060208401356001600160401b0381111562002e9957600080fd5b62002ea78682870162002ab9565b9497909650939450505050565b60008060006060848603121562002eca57600080fd5b83359250602084013562002ede816200294f565b9150604084013562002bb9816200294f565b60008060006060848603121562002f0657600080fd5b833562002f13816200294f565b9250602084013562002ede816200294f565b803562002f328162002aa6565b63ffffffff168252602090810135910152565b6080810162002f55828662002f25565b6001600160a01b0393909316604082015260600152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101562002fde57634e487b7160e01b600052601160045260246000fd5b500390565b81835260006001600160fb1b0383111562002ffd57600080fd5b8260051b8083602087013760009401602001938452509192915050565b63ffffffff87168152600060018060a01b03808816602084015260a060408401526200304b60a08401878962002fe3565b941660608301525060800152949350505050565b60e081016200306f828962002f25565b6001600160a01b039687166040830152949095166060860152608085019290925260a084015260c090920191909152919050565b6000815180845260005b81811015620030cb57602081850181015186830182015201620030ad565b81811115620030de576000602083870101525b50601f01601f19169290920160200192915050565b63ffffffff8716815260c0602082015260006200311460c0830188620030a3565b6040830196909652506001600160a01b03939093166060840152608083019190915260a09091015292915050565b60008235607e198336030181126200315957600080fd5b9190910192915050565b6000608082840312156200317657600080fd5b6200318062002c1d565b905081356200318f816200294f565b815260208201356001600160401b03811115620031ab57600080fd5b620031b98482850162002ca0565b6020830152506040820135620031cf8162002aa6565b60408201526060820135620031e48162002aa6565b606082015292915050565b6000608082360312156200320257600080fd5b6200320c62002c1d565b82356001600160401b038111156200322357600080fd5b620032313682860162003163565b825250602083013562003244816200294f565b602082015260408381013590820152606092830135928101929092525090565b6000602082840312156200327757600080fd5b815162001d1c816200294f565b60018060a01b0381511682526000602082015160806020850152620032ad6080850182620030a3565b9050604083015163ffffffff808216604087015280606086015116606087015250508091505092915050565b608081526000855160e0608084015280516080610160850152620033026101e085018262003284565b6020838101516001600160a01b0390811661018088015260408501516101a08801526060909401516101c087015289015192831660a08601529050604088015160c085015260608801516001600160a01b03811660e08601529150608088015161010085015260a08801516001600160a01b038116610120860152915060c0979097015161014084015250506020810193909352604083019190915260609091015290565b60008060408385031215620033bb57600080fd5b505080516020909101519092909150565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006001600160401b038211156200341f576200341f62002c07565b5060051b60200190565b600082601f8301126200343b57600080fd5b81356020620034546200344e8362003403565b62002c6d565b82815260059290921b840181019181810190868411156200347457600080fd5b8286015b848110156200349c5780356200348e816200294f565b835291830191830162003478565b509695505050505050565b600082601f830112620034b957600080fd5b81356020620034cc6200344e8362003403565b82815260059290921b84018101918181019086841115620034ec57600080fd5b8286015b848110156200349c5780356001600160401b03811115620035115760008081fd5b620035218986838b010162002ca0565b845250918301918301620034f0565b600060e082360312156200354357600080fd5b6200354d62002c48565b82356001600160401b03808211156200356557600080fd5b620035733683870162003163565b8352620035836020860162002965565b602084015260408501359150808211156200359d57600080fd5b620035ab3683870162003429565b60408401526060850135915080821115620035c557600080fd5b50620035d436828601620034a7565b6060830152506080830135608082015260a083013560a0820152620035fc60c0840162002965565b60c082015292915050565b600081518084526020808501808196508360051b8101915082860160005b858110156200365357828403895262003640848351620030a3565b9885019893509084019060010162003625565b5091979650505050505050565b60006101008083528a5181828501528051915060e06102008501526200368b6102e085018362003284565b6020828101516001600160a01b0390811661022088015260408401518784036101ff199081016102408a015281518086529184019650929360009391908501905b80851015620036f057875184168252968501966001949094019390850190620036cc565b506060860151965081898203016102608a01526200370f818862003607565b965050505050608082015161028086015260a08201516102a086015260c08201519150620037496102c08601836001600160a01b03169052565b8c810151801515610120870152915060408d015161014086015260608d01516001600160a01b038116610160870152915060808d01516001600160a01b038116610180870152915060a08d01516001600160a01b0381166101a0870152915060c08d01516101c086015260e08d01516101e08601528293508b818601525050508760408301528660608301528560808301528460a08301528360c08301528260e08301529998505050505050505050565b6000602082840312156200380d57600080fd5b5051919050565b6001600160a01b03851681526060602082018190526000906200383b908301858762002fe3565b905082604083015295945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215620038aa57600080fd5b8151801515811462001d1c57600080fd5b60008060408385031215620038cf57600080fd5b8251620038dc8162002aa6565b602093909301519294929350505056fe60e0604052601d60a081905262ffffff1960c090815262000024916000919062000067565b503480156200003257600080fd5b50604051620016053803806200160583398101604081905262000055916200010d565b6001600160a01b03166080526200017c565b82805462000075906200013f565b90600052602060002090601f016020900481019282620000995760008555620000e4565b82601f10620000b457805160ff1916838001178555620000e4565b82800160010185558215620000e4579182015b82811115620000e4578251825591602001919060010190620000c7565b50620000f2929150620000f6565b5090565b5b80821115620000f25760008155600101620000f7565b6000602082840312156200012057600080fd5b81516001600160a01b03811681146200013857600080fd5b9392505050565b600181811c908216806200015457607f821691505b602082108114156200017657634e487b7160e01b600052602260045260246000fd5b50919050565b6080516114676200019e6000396000818160d4015261010701526114676000f3fe60806040526004361061003f5760003560e01c80631e29b440146100445780632b59241f1461006e578063938b5f321461009b578063975740c6146100c5575b600080fd5b610057610052366004611103565b6100f8565b604051610065929190611270565b60405180910390f35b34801561007a57600080fd5b506100836102ef565b6040516001600160a01b039091168152602001610065565b3480156100a757600080fd5b506100b0610396565b60405163ffffffff9091168152602001610065565b3480156100d157600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610083565b60006060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101635760405162461bcd60e51b8152602060048201526007602482015266234f433a30323760c81b60448201526064015b60405180910390fd5b6001600160a01b038616158061017e5761017e87898b6103b4565b600060606001600160a01b038a163b6101c55760405162461bcd60e51b81526020600482015260096024820152680858dbdb9d1c9858dd60ba1b604482015260640161015a565b87516101d89060009060208b0190610ffc565b50896001600160a01b0316836101ef5760006101f1565b8b5b888860405161020192919061128b565b60006040518083038185875af1925050503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b5060408051808201909152601d80825262ffffff1960209092019182529294509092506102739160009190610ffc565b5081158015610280575082155b1561029057610290898b8d61049f565b896001600160a01b03168c7f627b4985667a94d1a70c70277b9471eed68009d6f9c3ae5d25fa799fd3f0398d8b8e8c8c8c888a6040516102d6979695949392919061129b565b60405180910390a3909b909a5098505050505050505050565b6000806103856000805461030290611318565b80601f016020809104026020016040519081016040528092919081815260200182805461032e90611318565b801561037b5780601f106103505761010080835404028352916020019161037b565b820191906000526020600020905b81548152906001019060200180831161035e57829003601f168201915b50505050506105b2565b9050610390816105cc565b91505090565b6000806103a96000805461030290611318565b9050610390816105fd565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610429919061134d565b610433919061137c565b6040516001600160a01b03851660248201526044810182905290915061049990859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261061f565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610513919061134d565b9050818110156105775760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b606482015260840161015a565b6040516001600160a01b038416602482015282820360448201819052906105ab90869063095ea7b360e01b90606401610462565b5050505050565b60006105c66105c183836106f6565b61071a565b92915050565b60008160016105e3815b62ffffff19841690610733565b506105f562ffffff198516600561080c565b949350505050565b600081600161060b816105d6565b506105f562ffffff19851660016004610821565b6000610674826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108519092919063ffffffff16565b8051909150156106f157808060200190518101906106929190611394565b6106f15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161015a565b505050565b81516000906020840161071164ffffffffff85168284610860565b95945050505050565b60006105c6610728836108a4565b62ffffff19166108de565b600061073f8383610939565b61080557600061075e6107528560d81c90565b64ffffffffff1661095c565b91505060006107738464ffffffffff1661095c565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161015a91906113b6565b5090919050565b600061081a83836014610821565b9392505050565b600061082e8260206113c9565b6108399060086113ec565b60ff16610847858585610a0a565b901c949350505050565b60606105f58484600085610b63565b60008061086d838561137c565b905060405181111561087d575060005b8061088f5762ffffff1991505061081a565b5050606092831b9190911790911b1760181b90565b60006001600160601b03601883901c16601914156108d4576301000000600160d81b038216600160d81b176105c6565b62ffffff196105c6565b60006108e982610c94565b6109355760405162461bcd60e51b815260206004820152601960248201527f56616c696469747920617373657274696f6e206661696c656400000000000000604482015260640161015a565b5090565b60008164ffffffffff1661094d8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156109b157600061097b8260086113ec565b60ff1685901c905061098c81610cd2565b61ffff16841793508160ff166010146109a757601084901b93505b5060001901610962565b50600f5b60ff8160ff161015610a045760006109ce8260086113ec565b60ff1685901c90506109df81610cd2565b61ffff16831792508160ff166000146109fa57601083901b92505b50600019016109b5565b50915091565b600060ff8216610a1c5750600061081a565b610a2f8460181c6001600160601b031690565b6001600160601b0316610a4560ff84168561137c565b1115610aa957610a90610a618560781c6001600160601b031690565b6001600160601b0316610a7d8660181c6001600160601b031690565b6001600160601b0316858560ff16610d04565b60405162461bcd60e51b815260040161015a91906113b6565b60208260ff161115610b235760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000606482015260840161015a565b600882026000610b3c8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b606082471015610bc45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161015a565b6001600160a01b0385163b610c1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015a565b600080866001600160a01b03168587604051610c379190611415565b60006040518083038185875af1925050503d8060008114610c74576040519150601f19603f3d011682016040523d82523d6000602084013e610c79565b606091505b5091509150610c89828286610e2e565b979650505050505050565b6000610ca08260d81c90565b64ffffffffff1664ffffffffff1415610cbb57506000919050565b6000610cc683610e67565b60405110199392505050565b6000610ce460048360ff16901c610ea0565b60ff1661ffff919091161760081b610cfb82610ea0565b60ff1617919050565b60606000610d118661095c565b9150506000610d1f8661095c565b9150506000610d2d8661095c565b9150506000610d3b8661095c565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60608315610e3d57508161081a565b825115610e4d5782518084602001fd5b8160405162461bcd60e51b815260040161015a91906113b6565b6000610e7c8260181c6001600160601b031690565b610e8f8360781c6001600160601b031690565b016001600160601b03169050919050565b600060f08083179060ff82161415610ebb5750603092915050565b8060ff1660f11415610ed05750603192915050565b8060ff1660f21415610ee55750603292915050565b8060ff1660f31415610efa5750603392915050565b8060ff1660f41415610f0f5750603492915050565b8060ff1660f51415610f245750603592915050565b8060ff1660f61415610f395750603692915050565b8060ff1660f71415610f4e5750603792915050565b8060ff1660f81415610f635750603892915050565b8060ff1660f91415610f785750603992915050565b8060ff1660fa1415610f8d5750606192915050565b8060ff1660fb1415610fa25750606292915050565b8060ff1660fc1415610fb75750606392915050565b8060ff1660fd1415610fcc5750606492915050565b8060ff1660fe1415610fe15750606592915050565b8060ff1660ff1415610ff65750606692915050565b50919050565b82805461100890611318565b90600052602060002090601f01602090048101928261102a5760008555611070565b82601f1061104357805160ff1916838001178555611070565b82800160010185558215611070579182015b82811115611070578251825591602001919060010190611055565b506109359291505b808211156109355760008155600101611078565b6001600160a01b03811681146110a157600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008083601f8401126110cc57600080fd5b50813567ffffffffffffffff8111156110e457600080fd5b6020830191508360208285010111156110fc57600080fd5b9250929050565b600080600080600080600060c0888a03121561111e57600080fd5b873596506020880135955060408801356111378161108c565b945060608801356111478161108c565b9350608088013567ffffffffffffffff8082111561116457600080fd5b818a0191508a601f83011261117857600080fd5b81358181111561118a5761118a6110a4565b604051601f8201601f19908116603f011681019083821181831017156111b2576111b26110a4565b816040528281528d60208487010111156111cb57600080fd5b8260208601602083013760006020848301015280975050505060a08a01359150808211156111f857600080fd5b506112058a828b016110ba565b989b979a50959850939692959293505050565b60005b8381101561123357818101518382015260200161121b565b838111156104995750506000910152565b6000815180845261125c816020860160208601611218565b601f01601f19169290920160200192915050565b82151581526040602082015260006105f56040830184611244565b8183823760009101908152919050565b60018060a01b038816815286602082015260c0604082015260006112c260c0830188611244565b828103606084015285815285876020830137600060208783010152601f19601f8701168101905060208382030160808401526113016020820186611244565b91505082151560a083015298975050505050505050565b600181811c9082168061132c57607f821691505b60208210811415610ff657634e487b7160e01b600052602260045260246000fd5b60006020828403121561135f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561138f5761138f611366565b500190565b6000602082840312156113a657600080fd5b8151801515811461081a57600080fd5b60208152600061081a6020830184611244565b600060ff821660ff8416808210156113e3576113e3611366565b90039392505050565b600060ff821660ff84168160ff048111821515161561140d5761140d611366565b029392505050565b60008251611427818460208701611218565b919091019291505056fea2646970667358221220d3023101ff967b44cdefbc4d21cf5699b8f973d3da7c2fd67c779f07bb0e96a464736f6c634300080b0033a264697066735822122061fbdec1d3701e23afb13812e10ec23bd7235185bcc290189767d4655d6864ae64736f6c634300080b0033",
  "libraries": {
    "ConnextLogic": "0x801F5323d730d5b26D512b7c938F28b9A992CF96",
    "RouterPermissionsManagerLogic": "0x167675832BBf781A735a543AeBe956164682DCFE"
  },
  "devdoc": {
    "author": "Connext Labs",
    "details": "This contract primarily contains the storage used by the functions within the `ConnextLogic` contract, which contains the meaningful logic",
    "kind": "dev",
    "methods": {
      "acceptProposedRouterOwner(address)": {
        "params": {
          "router": "Router address to set recipient"
        }
      },
      "addLiquidity(uint256,address)": {
        "details": "The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.",
        "params": {
          "_amount": "- The amount of liquidity to add for the router",
          "_local": "- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset"
        }
      },
      "addLiquidityFor(uint256,address,address)": {
        "details": "The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.",
        "params": {
          "_amount": "- The amount of liquidity to add for the router",
          "_local": "- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset",
          "_router": "The router you are adding liquidity on behalf of"
        }
      },
      "addRelayer(address)": {
        "params": {
          "_relayer": "- The relayer address to add"
        }
      },
      "bumpTransfer(bytes32)": {
        "params": {
          "_transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "claim(address,bytes32[])": {
        "details": "Called by the RelayerFeeRouter.handle message. The validity of the transferIds is asserted before dispatching the message.",
        "params": {
          "_recipient": "- address on origin chain to send claimed funds to",
          "_transferIds": "- transferIds to claim"
        }
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote xApp Router",
          "_router": "The address of the remote xApp Router"
        }
      },
      "execute(((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address))": {
        "details": "Can be called prior to or after `handle`, depending if fast liquidity is being used."
      },
      "getProposedRouterOwner(address)": {
        "details": "All routers must wait for the delay timeout before accepting a new owner",
        "params": {
          "_router": "The relevant router address"
        }
      },
      "getProposedRouterOwnerTimestamp(address)": {
        "details": "All routers must wait for the delay timeout before accepting a new owner",
        "params": {
          "_router": "The relevant router address"
        }
      },
      "getRouterApproval(address)": {
        "params": {
          "_router": "The relevant router address"
        }
      },
      "getRouterOwner(address)": {
        "details": "Uses logic function here to handle the case where router owner is not set. Other getters within this interface use explicitly the stored value",
        "params": {
          "_router": "The relevant router address"
        }
      },
      "getRouterRecipient(address)": {
        "details": "The recipient (if set) receives all funds when router liquidity is removed",
        "params": {
          "_router": "The relevant router address"
        }
      },
      "handle(uint32,uint32,bytes32,bytes)": {
        "details": "This function relies on nomad relayers and should not consume arbitrary amounts of gas",
        "params": {
          "_message": "The message",
          "_nonce": "The unique identifier for the message from origin to destination",
          "_origin": "The origin domain",
          "_sender": "The sender address"
        }
      },
      "initiateClaim(uint32,address,bytes32[])": {
        "details": "Domain should be the origin domain of all the transfer ids",
        "params": {
          "_domain": "- domain to claim funds on",
          "_recipient": "- address on origin chain to send claimed funds to",
          "_transferIds": "- transferIds to claim"
        }
      },
      "proposeRouterOwner(address,address)": {
        "params": {
          "proposed": "Proposed owner Address to set to router",
          "router": "Router address to set recipient"
        }
      },
      "removeAssetId(bytes32,address)": {
        "params": {
          "_adoptedAssetId": "- Corresponding adopted asset to remove",
          "_canonicalId": "- Token id to remove"
        }
      },
      "removeLiquidity(uint256,address,address)": {
        "params": {
          "_amount": "- The amount of liquidity to remove for the router",
          "_local": "- The address of the asset you're removing liquidity from. If removing liquidity of the native asset, routers may use `address(0)` or the wrapped asset",
          "_to": "The address that will receive the liquidity being removed"
        }
      },
      "removeRelayer(address)": {
        "params": {
          "_relayer": "- The relayer address to remove"
        }
      },
      "removeRouter(address)": {
        "params": {
          "_router": "Router address to remove"
        }
      },
      "setMaxRoutersPerTransfer(uint256)": {
        "params": {
          "_newMaxRouters": "The new max amount of routers"
        }
      },
      "setRouterRecipient(address,address)": {
        "details": "Router should only be able to set this once otherwise if router key compromised, no problem is solved since attacker could just update recipient",
        "params": {
          "recipient": "Recipient Address to set to router",
          "router": "Router address to set recipient"
        }
      },
      "setXAppConnectionManager(address)": {
        "params": {
          "_xAppConnectionManager": "The address of the xAppConnectionManager contract"
        }
      },
      "setupAsset((uint32,bytes32),address,address)": {
        "details": "When whitelisting the canonical asset, all representational assets would be whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC on polygon), you should *not* whitelist the adopted asset. The stable swap pool address used should allow you to swap between the local <> adopted asset",
        "params": {
          "_adoptedAssetId": "- The used asset id for this domain (i.e. PoS USDC for polygon)",
          "_canonical": "- The canonical asset to add by id and domain. All representations will be whitelisted as well"
        }
      },
      "setupRouter(address,address,address)": {
        "params": {
          "_owner": "Initial Owner of router",
          "_recipient": "Initial Recipient of router",
          "_router": "Router address to setup"
        }
      },
      "xcall(((address,bytes,uint32,uint32),address,uint256,uint256))": {
        "details": "This contract must have approval to transfer the adopted assets. They are then swapped to the local nomad assets via the configured AMM and sent over the bridge router.",
        "params": {
          "_args": "- The XCallArgs"
        },
        "returns": {
          "_0": "The transfer id of the crosschain transfer"
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      },
      "adoptedToCanonical": {
        "details": "If the adopted asset is the native asset, the keyed address will be the wrapped asset address"
      },
      "adoptedToLocalPools": {
        "details": "Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)"
      },
      "approvedAssets": {
        "details": "Mapping is keyed on the canonical token identifier matching what is stored in the token registry"
      },
      "approvedRelayers": {
        "details": "Send relayer fee if msg.sender is approvedRelayer. otherwise revert()"
      },
      "canonicalToAdopted": {
        "details": "If the adopted asset is the native asset, the stored address will be the wrapped asset address"
      },
      "domain": {
        "details": "Must match the nomad domain, which is distinct from the \"chainId\""
      },
      "nonce": {
        "details": "Assigned at first interaction (xcall on origin domain);"
      },
      "relayerFees": {
        "details": "This will track all of the relayer fees assigned to a transfer by id, including any bumps made by the relayer"
      },
      "routerBalances": {
        "details": "Routers should always store liquidity that they can expect to receive via the bridge on this domain (the nomad local asset)"
      },
      "transferRelayer": {
        "details": "When relayer claims, must check that the msg.sender has forwarded transfer"
      },
      "wrapper": {
        "details": "Needed because the nomad only handles ERC20 assets"
      }
    },
    "title": "ConnextHandler",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "acceptProposedRouterOwner(address)": {
        "notice": "New router owner must accept role, or previous if proposed is 0x0"
      },
      "addLiquidity(uint256,address)": {
        "notice": "This is used by any router to increase their available liquidity for a given asset."
      },
      "addLiquidityFor(uint256,address,address)": {
        "notice": "This is used by anyone to increase a router's available liquidity for a given asset."
      },
      "addRelayer(address)": {
        "notice": "Used to add approved relayer"
      },
      "addStableSwapPool((uint32,bytes32),address)": {
        "notice": "Adds a stable swap pool for the local <> adopted asset."
      },
      "adoptedToCanonical(address)": {
        "notice": "Mapping of canonical to adopted assets on this domain"
      },
      "adoptedToLocalPools(bytes32)": {
        "notice": "Mapping holding the AMMs for swapping in and out of local assets"
      },
      "approvedAssets(bytes32)": {
        "notice": "Mapping of whitelisted assets on same domain as contract"
      },
      "approvedRelayers(address)": {
        "notice": "Mapping of approved relayers"
      },
      "assetOwnershipTimestamp()": {
        "notice": "Returns the timestamp when asset ownership was last proposed to be renounced"
      },
      "bumpTransfer(bytes32)": {
        "notice": "Anyone can call this function on the origin domain to increase the relayer fee for a transfer."
      },
      "canonicalToAdopted(bytes32)": {
        "notice": "Mapping of adopted to canonical on this domain"
      },
      "claim(address,bytes32[])": {
        "notice": "Pays out a relayer for the given fees"
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "domain()": {
        "notice": "The domain this contract exists on"
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same xApp on a remote chain"
      },
      "execute(((address,bytes,uint32,uint32),address,address[],bytes[],uint256,uint256,address))": {
        "notice": "Called on the destination domain to disburse correct assets to end recipient and execute any included calldata"
      },
      "executor()": {
        "notice": "The external contract that will execute crosschain calldata"
      },
      "getProposedRouterOwner(address)": {
        "notice": "Returns the currently proposed router owner"
      },
      "getProposedRouterOwnerTimestamp(address)": {
        "notice": "Returns the currently proposed router owner timestamp"
      },
      "getRouterApproval(address)": {
        "notice": "Returns the approved router for the given router address"
      },
      "getRouterOwner(address)": {
        "notice": "Returns the router owner if it is set, or the router itself if not"
      },
      "getRouterRecipient(address)": {
        "notice": "Returns the recipient for the specified router"
      },
      "handle(uint32,uint32,bytes32,bytes)": {
        "notice": "Handles an incoming message"
      },
      "initiateClaim(uint32,address,bytes32[])": {
        "notice": "Called by relayer when they want to claim owed funds on a given domain"
      },
      "isAssetOwnershipRenounced()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "isRouterOwnershipRenounced()": {
        "notice": "Indicates if the ownership of the router whitelist has been renounced"
      },
      "maxRoutersPerTransfer()": {
        "notice": "The max amount of routers a payment can be routed through"
      },
      "nonce()": {
        "notice": "Nonce for the contract, used to keep unique transfer ids."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "proposeAssetOwnershipRenunciation()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposeRouterOwner(address,address)": {
        "notice": "Current owner or router may propose a new router owner"
      },
      "proposeRouterOwnershipRenunciation()": {
        "notice": "Indicates if the ownership of the router whitelist has been renounced"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "reconciledTransfers(bytes32)": {
        "notice": "Mapping to determine if transfer is reconciled"
      },
      "relayerFeeRouter()": {
        "notice": "The local nomad relayer fee router"
      },
      "relayerFees(bytes32)": {
        "notice": "Stores the relayer fee for a transfer. Updated on origin domain when a user calls xcall or bump"
      },
      "removeAssetId(bytes32,address)": {
        "notice": "Used to remove assets from the whitelist"
      },
      "removeLiquidity(uint256,address,address)": {
        "notice": "This is used by any router to decrease their available liquidity for a given asset."
      },
      "removeRelayer(address)": {
        "notice": "Used to remove approved relayer"
      },
      "removeRouter(address)": {
        "notice": "Used to remove routers that can transact crosschain"
      },
      "renounceAssetOwnership()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounceRouterOwnership()": {
        "notice": "Indicates if the ownership of the asset whitelist has been renounced"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "routedTransfers(bytes32,uint256)": {
        "notice": "Mapping holding router address that provided fast liquidity"
      },
      "routerBalances(address,address)": {
        "notice": "Mapping of router to available balance of an asset"
      },
      "routerOwnershipTimestamp()": {
        "notice": "Returns the timestamp when router ownership was last proposed to be renounced"
      },
      "setMaxRoutersPerTransfer(uint256)": {
        "notice": "Used to set the max amount of routers a payment can be routed through"
      },
      "setRouterRecipient(address,address)": {
        "notice": "Sets the designated recipient for a router"
      },
      "setXAppConnectionManager(address)": {
        "notice": "Modify the contract the xApp uses to validate Replica contracts"
      },
      "setupAsset((uint32,bytes32),address,address)": {
        "notice": "Used to add supported assets. This is an admin only function"
      },
      "setupRouter(address,address,address)": {
        "notice": "Used to set router initial properties"
      },
      "tokenRegistry()": {
        "notice": "The local nomad token registry"
      },
      "transferRelayer(bytes32)": {
        "notice": "Stores the relayer of a transfer. Updated on the destination domain when a relayer calls execute for transfer"
      },
      "wrapper()": {
        "notice": "The address of the wrapper for the native asset on this domain"
      },
      "xcall(((address,bytes,uint32,uint32),address,uint256,uint256))": {
        "notice": "This function is called by a user who is looking to bridge funds"
      }
    },
    "notice": "Contains logic to facilitate bridging via nomad, including the provision of fast liquidity",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 322,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6392,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 6394,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_proposed",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 6396,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 6398,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_routerOwnershipRenounced",
        "offset": 0,
        "slot": "54",
        "type": "t_bool"
      },
      {
        "astId": 6400,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_routerOwnershipTimestamp",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 6402,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_assetOwnershipRenounced",
        "offset": 0,
        "slot": "56",
        "type": "t_bool"
      },
      {
        "astId": 6404,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_assetOwnershipTimestamp",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 6889,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22173,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "xAppConnectionManager",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(XAppConnectionManager)17267"
      },
      {
        "astId": 22177,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "__GAP",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22067,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "remotes",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 22071,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "__GAP",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6902,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "_delay",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 6905,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "routerInfo",
        "offset": 0,
        "slot": "208",
        "type": "t_struct(RouterPermissionsManagerInfo)11098_storage"
      },
      {
        "astId": 22702,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "LIQUIDITY_FEE_NUMERATOR",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 22704,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "LIQUIDITY_FEE_DENOMINATOR",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 22707,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "EMPTY",
        "offset": 0,
        "slot": "215",
        "type": "t_bytes32"
      },
      {
        "astId": 22712,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "__gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22716,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "relayerFeeRouter",
        "offset": 0,
        "slot": "265",
        "type": "t_contract(RelayerFeeRouter)26343"
      },
      {
        "astId": 22720,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "wrapper",
        "offset": 0,
        "slot": "266",
        "type": "t_contract(IWrapped)8545"
      },
      {
        "astId": 22723,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "nonce",
        "offset": 0,
        "slot": "267",
        "type": "t_uint256"
      },
      {
        "astId": 22727,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "executor",
        "offset": 0,
        "slot": "268",
        "type": "t_contract(IExecutor)8261"
      },
      {
        "astId": 22730,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "domain",
        "offset": 0,
        "slot": "269",
        "type": "t_uint256"
      },
      {
        "astId": 22734,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "tokenRegistry",
        "offset": 0,
        "slot": "270",
        "type": "t_contract(ITokenRegistry)26476"
      },
      {
        "astId": 22740,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "adoptedToLocalPools",
        "offset": 0,
        "slot": "271",
        "type": "t_mapping(t_bytes32,t_contract(IStableSwap)8534)"
      },
      {
        "astId": 22745,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "approvedAssets",
        "offset": 0,
        "slot": "272",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 22751,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "adoptedToCanonical",
        "offset": 0,
        "slot": "273",
        "type": "t_mapping(t_address,t_struct(TokenId)23459_storage)"
      },
      {
        "astId": 22756,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "canonicalToAdopted",
        "offset": 0,
        "slot": "274",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 22761,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "reconciledTransfers",
        "offset": 0,
        "slot": "275",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 22767,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "routedTransfers",
        "offset": 0,
        "slot": "276",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 22774,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "routerBalances",
        "offset": 0,
        "slot": "277",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 22779,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "approvedRelayers",
        "offset": 0,
        "slot": "278",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22784,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "relayerFees",
        "offset": 0,
        "slot": "279",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 22789,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "transferRelayer",
        "offset": 0,
        "slot": "280",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 22792,
        "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
        "label": "maxRoutersPerTransfer",
        "offset": 0,
        "slot": "281",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IExecutor)8261": {
        "encoding": "inplace",
        "label": "contract IExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap)8534": {
        "encoding": "inplace",
        "label": "contract IStableSwap",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenRegistry)26476": {
        "encoding": "inplace",
        "label": "contract ITokenRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IWrapped)8545": {
        "encoding": "inplace",
        "label": "contract IWrapped",
        "numberOfBytes": "20"
      },
      "t_contract(RelayerFeeRouter)26343": {
        "encoding": "inplace",
        "label": "contract RelayerFeeRouter",
        "numberOfBytes": "20"
      },
      "t_contract(XAppConnectionManager)17267": {
        "encoding": "inplace",
        "label": "contract XAppConnectionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenId)23459_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ConnextMessage.TokenId)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenId)23459_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_contract(IStableSwap)8534)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IStableSwap)",
        "numberOfBytes": "32",
        "value": "t_contract(IStableSwap)8534"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(RouterPermissionsManagerInfo)11098_storage": {
        "encoding": "inplace",
        "label": "struct RouterPermissionsManagerInfo",
        "members": [
          {
            "astId": 11081,
            "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
            "label": "approvedRouters",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 11085,
            "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
            "label": "routerRecipients",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 11089,
            "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
            "label": "routerOwners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 11093,
            "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
            "label": "proposedRouterOwners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 11097,
            "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
            "label": "proposedRouterTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TokenId)23459_storage": {
        "encoding": "inplace",
        "label": "struct ConnextMessage.TokenId",
        "members": [
          {
            "astId": 23456,
            "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
            "label": "domain",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23458,
            "contract": "contracts/nomad-xapps/contracts/connext/ConnextHandler.sol:ConnextHandler",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}